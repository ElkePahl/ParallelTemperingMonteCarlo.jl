using Test
using SafeTestsets
using ParallelTemperingMonteCarlo
using StaticArrays, LinearAlgebra, DelimitedFiles
using Random
"Lenient comparison operator for `struct`, both mutable and immutable (type with \\eqsim)."
function ≂(x, y)
    if x == y
        return true
    end
    try
        if x ≈ y
            return true
        end
    catch
    end
    # If x and y are of different types, they are not equal
    if typeof(x) != typeof(y)
        println("x does not share a type with y")
        println("x: ", x)
        println("y: ", y)
        return false
    end
            
    # If x and y are arrays, compare their elements recursively
    if x isa AbstractArray && y isa AbstractArray
        if length(x) != length(y)
            println("x and y are arrays of different lengths")
            println("x: ", x)
            println("y: ", y)
            return false
        end
        for i in eachindex(x)
            if !(x[i] ≂ y[i])
                return false
            end
        end
        return true
    end
    
    # If x and y are structs, compare their fields recursively
    for field in fieldnames(typeof(x))
        if !(getfield(x, field) ≂ getfield(y, field))
            return false
        end
    end
    
    return true
end

random_test_samples_and_test_results = Dict(
    "Configurations" => "testing_data/Configurations.jl",
    "EnergyEvaluation" => "testing_data/EnergyEvaluation.jl",
    "Exchange" => "testing_data/Exchange_Initialisation.jl",
    "MCMove" => "testing_data/MCMove.jl",
    "Sampling" => "testing_data/Sampling.jl"
)

@testset "Ensemble" begin
    @testset "get_r_cut" begin
        cubic_bc = CubicBC(10.0)
        @test get_r_cut(cubic_bc) == 25.0
        
        rhombic_bc = RhombicBC(4.0, 5.0)
        @test get_r_cut(rhombic_bc) == 3.0
    end
    
    
    @testset "NVT" begin
        nvt = NVT(10)
        @test nvt == NVT(10, 10, 0)
    end
    
    @testset "MoveStrategy" begin
        test_ensemble = NVT(0, 2, 3)
        x = MoveStrategy(test_ensemble)    
        @test x ≂ MoveStrategy{5, NVT}(NVT(0,2,3),
            [
                "atommove",
                "atommove",
                "atomswap",
                "atomswap",
                "atomswap"
            ]
        )
    end
    
    @testset "NVTVariables" begin
        bc = SphericalBC(radius=2.0)
        v1 = SVector(1., 2., 3.)
        conf = Config{3}([v1,v1,v1],bc)
    
        envars_nvt = set_ensemble_variables(conf,NVT(1))
        @test envars_nvt ≂ NVTVariables{Float64}(
            1,
            SVector{3, Float64}(0.0, 0.0, 0.0)
        )
    end
    
    @testset "NPT" begin
        npt = NPT(10, 101325)
        @test npt ≂ NPT(10, 10, 1, 0, 101325)
    
        y = MoveStrategy(npt)
        @test y ≂ MoveStrategy{11, NPT}(
            NPT(10, 10, 1, 0, 101325),
            [
                "atommove",
                "atommove",
                "atommove",
                "atommove",
                "atommove",
                "atommove",
                "atommove",
                "atommove",
                "atommove",
                "atommove",
                "volumemove"
            ]
        )
    end
    
    @testset "NPTVariables" begin
        v1 = SVector(1., 2., 3.)
        conf2 = Config{3}([v1,v1,v1] , CubicBC(8.7674))
        envars_npt = set_ensemble_variables(conf2,NPT(3,101325))
    
        @test envars_npt ≂ NPTVariables{Float64}(1, [0.0, 0.0, 0.0], Config{3, CubicBC{Float64}, Float64}(SVector{3, Float64}[[1.0, 2.0, 3.0], [1.0, 2.0, 3.0], [1.0, 2.0, 3.0]], CubicBC{Float64}(8.7674)), [0.0 0.0 0.0; 0.0 0.0 0.0; 0.0 0.0 0.0], 19.21682569, 0.0)
        conf3 = Config{3}([v1,v1,v1] , RhombicBC(10.0,10.0))
        envars_npt = set_ensemble_variables(conf3,NPT(3,101325))
    
        @test envars_npt ≂ NPTVariables{Float64}(1, [0.0, 0.0, 0.0], Config{3, RhombicBC{Float64}, Float64}(SVector{3, Float64}[[1.0, 2.0, 3.0], [1.0, 2.0, 3.0], [1.0, 2.0, 3.0]], RhombicBC{Float64}(10.0, 10.0)), [0.0 0.0 0.0; 0.0 0.0 0.0; 0.0 0.0 0.0], 18.75, 0.0)
    
        conf4 = Config{3}([v1,v1,v1] , RhombicBC(10.0,5.0))
        envars_npt = set_ensemble_variables(conf4,NPT(3,101325))
        @test envars_npt ≂ NPTVariables{Float64}(1, [0.0, 0.0, 0.0], Config{3, RhombicBC{Float64}, Float64}(SVector{3, Float64}[[1.0, 2.0, 3.0], [1.0, 2.0, 3.0], [1.0, 2.0, 3.0]], RhombicBC{Float64}(10.0, 5.0)), [0.0 0.0 0.0; 0.0 0.0 0.0; 0.0 0.0 0.0], 6.25, 0.0)

    end
end

@testset "Configurations" begin
    include(random_test_samples_and_test_results["Configurations"])
    @testset "Config constructor" begin
        #Testing Config with SphericalBC and the `inferred` macro 
        bc = SphericalBC(radius=4.0)
        coords = random_test_samples[:spheripos]
        posarray = [SVector(coords[1],coords[2],coords[3]) for _ in 0:9]
        config = @inferred Config{10}(posarray,bc)
        @test config ≂ test_results[:spheripos]
        @test_throws ErrorException @inferred Config(posarray,bc)

        #Testing Config with SphericalBC with random positions
        coords = random_test_samples[:spheripos2]
        posarray = [[coords[1],coords[2],coords[3]] for _ in 0:9]
        config = Config(posarray,bc)
        @test config ≂ test_results[:spheripos2]

        # Testing Config with CubicBC
        bc = CubicBC(10.0)
        v1 = SVector(1., 2., 3.)
        conf = Config{3}([v1,v1,v1],bc)
        @test conf ≂ test_results[:cubicpos]

        # Testing Config with RhombicBC
        bc = RhombicBC(10.0,10.0)
        v1 = SVector(1., 2., 3.)
        conf = Config{3}([v1,v1,v1],bc)
        @test conf ≂ test_results[:rhombicpos]
    end

    @testset "distance2" begin
        v1 = SVector(1., 2., 3.)
        v2 = SVector(2.,4.,6.)
        v3 = SVector(3., 6., 9.)

        # Basic distance2 with 2 arguments
        @test distance2(v1,v2) == 14.0
        @test distance2(v1,v3) == 56.0

        # SphericalBC(same function as distance2(a,b))
        bc = SphericalBC(radius=4.0)
        @test distance2(v1,v2,bc) == 14.0

        # CubicBC 
        bc = CubicBC(10.0)
        @test distance2(v1,v2,bc) == 14.0
        @test distance2(v1,v3,bc) == 36.0

        # RhombicBC
        bc = RhombicBC(10.0,10.0)
        @test distance2(v1,v2,bc) == 14.0
        @test distance2(v1,v3,bc) == 36.0
    end

    @testset "get_distance2_mat" begin
        v1 = SVector(1., 2., 3.)
        v2 = SVector(2.,4.,6.)
        v3 = SVector(3., 6., 9.)

        # SphericalBC
        bc = SphericalBC(radius=4.0)
        conf2 = Config{3}([v1,v2,v3],bc)
        d2mat = get_distance2_mat(conf2)
        @test d2mat ≂ [0.0 14.0 11.0; 14.0 0.0 49.0; 11.0 49.0 0.0]

        # CubicBC
        bc = CubicBC(10.0)
        conf2 = Config{3}([v1,v2,v3],bc)
        d2mat = get_distance2_mat(conf2)
        @test d2mat ≂ [0.0 14.0 36.0; 14.0 0.0 14.0; 36.0 14.0 0.0]

        # RhombicBC
        bc = RhombicBC(10.0,10.0)
        conf2 = Config{3}([v1,v2,v3],bc)
        d2mat = get_distance2_mat(conf2)
        @test d2mat ≂ [0.0 14.0 36.0; 14.0 0.0 14.0; 36.0 14.0 0.0]
    end

    @testset "get_volume" begin
        # CubicBC
        bc = CubicBC(10.0)
        v = get_volume(bc)
        @test v==1000.0

        # RhombicBC
        bc = RhombicBC(10.0,10.0)
        v = get_volume(bc)
        @test v==3^0.5/2*1000.0
    end

    @testset "get_tantheta_mat" begin
        v1 = SVector(5., 0., 0.)
        v2 = SVector(-3.,0.,4.)
        v3 = SVector(-2.,0., -3.)

        # SphericalBC
        bc = SphericalBC(radius=10.0)
        conf = Config{3}([v1,v2,v3],bc)
        mat = get_tantheta_mat(conf,bc)
        #Here we do not test the whole matrix due to floating point errors.
        @test mat[1,2]==-2.0
        @test mat[1,3]==7/3
        @test mat[2,3]==1/7

        # CubicBC
        bc = CubicBC(10.0)
        conf = Config{3}([v1,v2,v3],bc)
        mat = get_tantheta_mat(conf,bc)
        @test mat ≂ [0.0 -0.5 1.0; -0.5 0.0 -1/3; 1.0 -1/3 0.0]

        # RhombicBC
        bc = RhombicBC(5.0,5.0)
        conf = Config{3}([v1,v2,v3],bc)
        mat = get_tantheta_mat(conf,bc)
        @test mat ≂ [0.0 2.0 -1.0; 2.0 0.0 0.5; -1.0 0.5 0.0]
    end

    @testset "get_tan" begin
        #Testing get_tan with two arguments
        coords_v1 = random_test_samples[:get_tan_v1]
        v1 = SVector(coords_v1[1], coords_v1[2], coords_v1[3]) .* 100.0
        coords_v2 = random_test_samples[:get_tan_v2]
        v2 = SVector(coords_v2[1], coords_v2[2], coords_v2[3]) .* 100.0
        result = get_tan(v1,v2)
        @test result ≈ -3.421783622152092

        #Testing get_tan with SphericalBC
        bc = SphericalBC(radius=4.0)
        @test get_tan(v1,v2,bc) ≈ result

        #Testing get_tan with CubicBC
        bc = CubicBC(10.0)
        @test get_tan(v1,v2,bc) ≈ 1.3147700496470467

        #Testing get_tan with RhombicBC
        bc = RhombicBC(10.0,10.0)
        @test get_tan(v1,v2,bc) ≈ 1.6043117438283387
    end

    @testset "get_centre" begin
        posarray = random_test_samples[:get_centre]
        centre = get_centre(posarray,length(posarray))
        @test centre ≈ test_results[:get_centre]
    end

    @testset "recentre!" begin
        posarray = random_test_samples[:get_centre]
        conf = Config{length(posarray)}(posarray,SphericalBC(radius=4.0))
        recentre!(conf)
        @test conf ≂ test_results[:recentre]
    end
end

@testset "BoundaryConditions" begin
    @testset "SphericalBC" begin
        bc = SphericalBC(radius=1.0)
        @test bc.radius2 == 1.
    end

    @testset "CubicBC" begin
        bc = CubicBC(10.0)
        @test bc.box_length == 10.0
    end

    @testset "RhombicBC" begin
        bc = RhombicBC(15.0,10.0)
        @test bc.box_length == 15.0
        @test bc.box_height == 10.0
    end

    @testset "check_boundary" begin
        bc = SphericalBC(radius=1.0)
        @test check_boundary(bc,SVector(0,0.5,1.))
        @test !check_boundary(bc,SVector(0,0.5,0.5))
    end
end

@testset "InputParams" begin
    @testset "MCParams" begin
        mc_params = MCParams(100, 32, 10; eq_percentage = 0.5)
        @test mc_params ≂ MCParams(100, 50, 1, 32, 10, 100, 100, 0.4, 0.6)
    end
    @testset "TempGrid" begin
        n_traj = 32
        temp = TempGrid{n_traj}(2, 16)
        @test temp ≂ TempGrid{32, Float64}([2.0, 2.1387593971421346, 2.2871458794318933, 2.4458273711349365, 2.615518136901144, 2.796981996846505, 2.991035764696417, 3.198552924466336, 3.420467562229416, 3.6577785706690062, 3.911554145341731, 4.1829365928899485, 4.473147472846541, 4.7834930961765645, 5.115370405306075, 5.470273262105569, 5.849799172131822, 6.255656475395606, 6.689672036022699, 7.153799465421251, 7.650127915970039, 8.180891484810147, 8.748479270068886, 9.355446124781496, 10.004524156916695, 10.698635027270536, 11.440903100584428, 12.234669509083764, 13.08350719174062, 13.991236976955975, 14.961944781053553, 16.0], [157887.4926315486, 147643.99664826435, 138065.08281908667, 129107.63408317252, 120731.33074780596, 112898.46899948658, 105573.79118973778, 98724.32713170841, 92319.24569320552, 86329.71601814106, 80728.7777517163, 75491.21968519525, 70593.46627401712, 66013.47151843816, 61730.619729032696, 57725.63273037514, 53980.48308520315, 50478.31294846281, 47203.35818597755, 44140.87741618053, 41277.08565550918, 38599.09226878412, 36094.84294527119, 33753.06543924675, 31563.218830831054, 29515.446078700246, 27600.52965110479, 25809.85003547882, 24135.346939881703, 22569.483011629993, 21105.20990980838, 19735.936578943576])
        temp1 = TempGrid{n_traj}(2, 16; tdistr = :equally_spaced)
        @test temp1 ≂ TempGrid{32, Float64}([2.0, 2.4516129032258065, 2.903225806451613, 3.354838709677419, 3.806451612903226, 4.258064516129032, 4.709677419354838, 5.161290322580645, 5.612903225806452, 6.064516129032258, 6.516129032258064, 6.967741935483871, 7.419354838709677, 7.870967741935484, 8.32258064516129, 8.774193548387096, 9.225806451612904, 9.677419354838708, 10.129032258064516, 10.580645161290322, 11.032258064516128, 11.483870967741936, 11.935483870967742, 12.387096774193548, 12.838709677419354, 13.29032258064516, 13.741935483870968, 14.193548387096774, 14.64516129032258, 15.096774193548386, 15.548387096774194, 16.0], [157887.4926315486, 128802.95451521069, 108766.93936840016, 94125.23599188475, 82957.83511149163, 74159.27684209101, 67048.11330928777, 61181.40339472509, 56258.761742275936, 52069.27948487241, 48460.517540376306, 45319.55807016673, 42560.97627459136, 40118.95304572137, 37941.95559362796, 35989.06082042652, 34227.35854250354, 32630.08181052005, 31175.237398586032, 29844.587021817115, 28622.87878115794, 27497.25995268543, 26456.823089610847, 25492.251414468785, 24595.539053155815, 23759.768308631104, 22978.930852478905, 22247.783052627303, 21561.72806862558, 20916.719109307724, 20309.17955011621, 19735.936578943576])
    end 
    #Output functions are just constructors, with very little logic to test
end

@testset "EnergyEvaluation" begin
    include(random_test_samples_and_test_results["EnergyEvaluation"])

    n_atoms = 10
    c=[-10.5097942564988, 989.725135614556, -101383.865938807, 3918846.12841668, -56234083.4334278, 288738837.441765]
    eljpot_even = ELJPotentialEven{6}(c)
    a=[0.0005742,-0.4032,-0.2101,-0.0595,0.0606,0.1608]
    b=[-0.01336,-0.02005,-0.1051,-0.1268,-0.1405,-0.1751]
    c1=[-0.1132,-1.5012,35.6955,-268.7494,729.7605,-583.4203]
    eljpot_b = ELJPotentialB{6}(a,b,c1)
    index = 5
    pos = random_test_samples[:pos]
    sphericalbc = SphericalBC(radius=4.0)
    rhombicbc = RhombicBC(5.0,10.0)
    cubicbc = CubicBC(10.0)
    spherical_config = Config(pos,sphericalbc)
    cubic_config = Config(pos,cubicbc)
    rhombic_config = Config(pos,rhombicbc)
    d2mat_spherical = get_distance2_mat(spherical_config)
    d2mat_cubic = get_distance2_mat(cubic_config)
    d2mat_rhombic = get_distance2_mat(rhombic_config)
    d2vec_spherical = d2mat_spherical[index,:]
    d2vec_cubic = d2mat_cubic[index,:]
    d2vec_rhombic = d2mat_rhombic[index,:]
    thetamat_spherical = get_tantheta_mat(spherical_config,sphericalbc)
    thetamat_cubic = get_tantheta_mat(cubic_config,cubicbc)
    thetamat_rhombic = get_tantheta_mat(rhombic_config,rhombicbc)
    r_cut = 100
    @testset "dimer_energy_atom" begin
        r_cut = 50
        @test dimer_energy_atom(index,d2vec_spherical,eljpot_even) ≈ 0.023911356198916628
        @test dimer_energy_atom(index,d2vec_spherical,r_cut,eljpot_even) ≈ 0.02402606005477939
        @test dimer_energy_atom(index,d2vec_spherical,thetamat_spherical[index,:],eljpot_b) ≈ -8.991276776044012e-5
        @test dimer_energy_atom(index,d2vec_spherical,thetamat_spherical[index,:],r_cut,eljpot_b) ≈ -8.830231441827703e-5
    end

    dimer_potential_variables = DimerPotentialVariables(random_test_samples[:dimer_potvars])
    eljb_potential_variables = ELJPotentialBVariables(random_test_samples[:eljb_potvars1],thetamat_spherical,random_test_samples[:eljb_potvars2])
    @testset "dimer_energy_config" begin
        @test dimer_energy_config(d2mat_spherical,n_atoms,dimer_potential_variables,eljpot_even) ≂ ([1.3557145257410774e7, 4.490459175475829, 56.12295154741882, 1.1988466992169222e7, 0.023911356198916628, 365.20355684232544, 5.276074090915916, 1.3557153443327183e7, 12.126980651298927, 1.1988772333137097e7], 2.554599063498897e7)
        @test dimer_energy_config(d2mat_rhombic,n_atoms,dimer_potential_variables,r_cut,rhombicbc,eljpot_even) ≂ ([1.3630035267213766e7, 57046.0084073771, 3.669527911994271e8, 1.1988462632017003e7, 3.670081538109875e8, 1507.4729882659524, 3.409020761089101e10, 1.3557570527187362e7, 3.4090135626498367e10, 1.1988773086656507e7], 3.448276378869706e10)
        @test dimer_energy_config(d2mat_spherical,n_atoms,eljb_potential_variables,eljpot_b) ≂ ([0.09974246784456195, -0.0004949984150655538, 0.0004464986278423629, 0.09974315464916497, -8.991276776044012e-5, 0.10029787911494172, 1.4848011272009263e-5, 0.0996475159492499, -0.0002882452740609024, 0.19977959309929333], 0.2993994004197197)
        @test dimer_energy_config(d2mat_cubic,n_atoms,eljb_potential_variables,r_cut,cubicbc,eljpot_b) ≂ ([0.09974246784456195, -0.000527207943895608, 0.0004422256538654586, 0.09974237893004974, -0.00013164977594247492, 0.100297349592459, 1.0711892535640772e-5, 0.0996475159492499, -0.0002884321290201486, 0.19977959309929333], 0.2993539333415685)
    end
    variance = 1e2
    pos2 = random_test_samples[:pos2]
    config2 = Config(pos2, sphericalbc)
    new_d2_mat_spherical = get_distance2_mat(config2)
    new_d2_spherical_vec = new_d2_mat_spherical[index,:]
    new_tanmat_spherical = get_tantheta_mat(config2, sphericalbc)
    new_tanvec_spherical = new_tanmat_spherical[index,:]
    @testset "dimer_energy_update" begin
        r_cut = 50
        @test dimer_energy_update!(index,d2mat_spherical,new_d2_spherical_vec,0.0,eljpot_even) ≈ 0.00045929693400654364
        @test dimer_energy_update!(index,d2mat_spherical,new_d2_spherical_vec,0.0,r_cut,eljpot_even) ≈ 0.0004603835196235889
        @test dimer_energy_update!(index,d2mat_spherical,thetamat_spherical,new_d2_spherical_vec,new_tanvec_spherical,0.0,eljpot_b) ≈ -1.0393533062129953e-6
        @test dimer_energy_update!(index,d2mat_spherical,thetamat_spherical,new_d2_spherical_vec,new_tanvec_spherical,0.0,r_cut,eljpot_b) ≈ -1.024244264038313e-6
    end
    values = random_test_samples[:eam]
    eam = EmbeddedAtomPotential(values[1], values[2], values[3], values[4], values[5])

    data_path = joinpath(@__DIR__,"..","scripts","data")

    #The following is an adapted exerpt from test_Cu55.jl
    #-------------------------------------------#
    #--------Vector of radial symm values-------#
    #-------------------------------------------#
    X = [ 1    1              0.001   0.000  11.338
    1    0              0.001   0.000  11.338
    1    1              0.020   0.000  11.338
    1    0              0.020   0.000  11.338
    1    1              0.035   0.000  11.338
    1    0              0.035   0.000  11.338
    1    1              0.100   0.000  11.338
    1    0              0.100   0.000  11.338
    1    1              0.400   0.000  11.338
    1    0              0.400   0.000  11.338]

    radsymmvec = RadialType2{Float64}[]


    #--------------------------------------------#
    #--------Vector of angular symm values-------#
    #--------------------------------------------#
    V = [[0.0001,1,1,11.338],[0.0001,-1,2,11.338],[0.003,-1,1,11.338],[0.003,-1,2,11.338],[0.008,-1,1,11.338],[0.008,-1,2,11.338],[0.008,1,2,11.338],[0.015,1,1,11.338],[0.015,-1,2,11.338],[0.015,-1,4,11.338],[0.015,-1,16,11.338],[0.025,-1,1,11.338],[0.025,1,1,11.338],[0.025,1,2,11.338],[0.025,-1,4,11.338],[0.025,-1,16,11.338],[0.025,1,16,11.338],[0.045,1,1,11.338],[0.045,-1,2,11.338],[0.045,-1,4,11.338],[0.045,1,4,11.338],[0.045,1,16,11.338],[0.08,1,1,11.338],[0.08,-1,2,11.338],[0.08,-1,4,11.338],[0.08,1,4,11.338]]

    T = [[1.,1.,1.],[1.,1.,0.],[1.,0.,0.]]

    angularsymmvec = AngularType3{Float64}[]
    #-------------------------------------------#
    #-----------Including scaling data----------#
    #-------------------------------------------#
    file = open(joinpath(data_path,"scaling.data")) # full path "./data/scaling.data"
    scalingvalues = readdlm(file)
    close(file)
    G_value_vec = []
    for row in eachrow(scalingvalues[1:88,:])
        max_min = [row[4],row[3]]
        push!(G_value_vec,max_min)
    end


    for symmindex in eachindex(eachrow(X))
        row = X[symmindex,:]
        radsymm = RadialType2{Float64}(row[3],row[5],[row[1],row[2]],G_value_vec[symmindex])
        push!(radsymmvec,radsymm)
    end


    let n_index = 10

    for element in V
        for types in T

            n_index += 1

            symmfunc = AngularType3{Float64}(element[1],element[2],element[3],11.338,types,G_value_vec[n_index])

            push!(angularsymmvec,symmfunc)
        end
    end
    end
    #---------------------------------------------------#
    #------concatenating radial and angular values------#
    #---------------------------------------------------#

    num_nodes::Vector{Int32} = [88, 20, 20, 1]
    activation_functions::Vector{Int32} = [1, 2, 2, 1]
    file = open(joinpath(data_path, "weights.029.data"), "r+") # "./data/weights.029.data"
    weights=readdlm(file)
    close(file)
    weights = vec(weights)
    nnp = NeuralNetworkPotential(num_nodes,activation_functions,weights)
    runnerpotential = RuNNerPotential(nnp,radsymmvec, angularsymmvec)

    eav = set_variables(spherical_config, d2mat_spherical, eam)
    nnp_variables = set_variables(spherical_config, d2mat_spherical, runnerpotential)
    @testset "set_variables" begin
        @test set_variables(spherical_config, d2mat_spherical, eljpot_even) ≂ DimerPotentialVariables{Float64}([0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0])
        @test set_variables(spherical_config, d2mat_spherical, eljpot_b) ≂ ELJPotentialBVariables{Float64}([0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0 -3.4217836221520925 -2.4444706453772396 -0.831346482981883 -2.143621872020414 -1.2617077495302194 6.450682774441876 -4.717870686429747 4.643389832366683 -0.569992794489424; -3.4217836221520925 0.0 -4.463604767231692 -0.8038455164527933 -20.00598727546692 -2.522398410039182 1.4396612920748406 3.241544205776989 1.0863577753928038 -1.1637323286873107; -2.4444706453772396 -4.463604767231692 0.0 -1.277571841028557 20.32314995953278 -2.0504865161360217 0.1655417251392104 2.146219864028591 1.757687320518332 -1.3619194056658424; -0.831346482981883 -0.8038455164527933 -1.277571841028557 0.0 2.8826720115026307 4.797719745410046 0.4878584257931274 0.5428225181207741 0.6051413417103325 -4.93618564512869; -2.143621872020414 -20.00598727546692 20.32314995953278 2.8826720115026307 0.0 -4.863397302350482 3.4382986085499723 3.271364961720193 1.9727030277918467 -2.3744996599048367; -1.2617077495302194 -2.522398410039182 -2.0504865161360217 4.797719745410046 -4.863397302350482 0.0 0.7001189036560198 1.1058631589273262 1.3856501999795523 -2.5696609157704278; 6.450682774441876 1.4396612920748406 0.1655417251392104 0.4878584257931274 3.4382986085499723 0.7001189036560198 0.0 -3.741511834993883 -43.1155862096522 -0.6048554499477571; -4.717870686429747 3.241544205776989 2.146219864028591 0.5428225181207741 3.271364961720193 1.1058631589273262 -3.741511834993883 0.0 2.7721688770257784 -0.31506997656432567; 4.643389832366683 1.0863577753928038 1.757687320518332 0.6051413417103325 1.9727030277918467 1.3856501999795523 -43.1155862096522 2.7721688770257784 0.0 -0.6890567756323963; -0.569992794489424 -1.1637323286873107 -1.3619194056658424 -4.93618564512869 -2.3744996599048367 -2.5696609157704278 -0.6048554499477571 -0.31506997656432567 -0.6890567756323963 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0])
        @test eav ≂ EmbeddedAtomVariables{Float64}([8.17419408890664 4.763043614104647; 8.164446276424366 4.642825154453063; 8.171894379461301 4.706913647424885; 8.227207746953418 4.986418153301363; 7.907383328474283 3.7317367776929022; 8.127078801038815 4.546274362661938; 8.060770220498517 4.264036518582607; 8.256887602631338 5.075454489483552; 8.100030373259722 4.412291972170639; 8.207601093670165 4.916072906639678], [0.0 0.0; 0.0 0.0; 0.0 0.0; 0.0 0.0; 0.0 0.0; 0.0 0.0; 0.0 0.0; 0.0 0.0; 0.0 0.0; 0.0 0.0])
        @test nnp_variables ≂ NNPVariables{Float64}([0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.38422394821232375 0.39700125339329706 0.3849429282136446 0.4009361747428534 0.23000122663663955 0.35845001886899924 0.3365265650781538 0.42806529153662787 0.35733119699277344 0.3899453303964701; 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0; 0.6048988954813043 0.6423250848534686 0.6373007034142937 0.6637293951267994 0.2868936334967644 0.5659268032836658 0.5040047605985355 0.7199371232952273 0.5435660937674479 0.6338231493362171; 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0; 0.7764069523367209 0.8378042146640688 0.8523832998713955 0.8896233761490461 0.31357090852469305 0.7360063195729203 0.6213240406478509 0.9653875260773103 0.682128118641929 0.8396270173266942; 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0; 1.6705180595874634 1.7278443549358198 2.0133826257032523 2.245209551185368 0.3620820034656417 1.6771518278696256 1.0486335945621266 2.282976381318068 1.321318345840067 2.079932498520809; 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0; 65.11354101824273 10.473864696665068 23.371160324873884 75.73864096009247 0.4501052642053114 28.828982301423547 5.952830328705113 70.62437179209878 12.127860572596905 79.20034954525549; 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0; 0.44073769284456604 0.4481082564419415 0.41684273291432006 0.4252463667527037 0.2340126177799738 0.42745972554260153 0.40815606269075644 0.39542617758309834 0.4137510043264017 0.43621817304398336; 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0; 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0; 0.3730654921434763 0.49051785327683195 0.5525724161889083 0.6389759744157085 0.017711366197535224 0.21914170189790558 0.1433014700822986 1.150296070052741 0.22190965710614002 0.44897545861770266; 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0; 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0; 0.42647852319012836 0.5752866246627674 0.6060030919988203 0.6909654289218358 0.06410726353607481 0.36582686608790005 0.26860387369631833 0.9466640882796579 0.33520698162987006 0.5566033317462287; 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0; 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0; 0.4324948556112277 0.5831973683606986 0.6724662551915315 0.7786458963463093 0.019369373789551055 0.2635998224960772 0.16738692410910977 1.3863059973257563 0.2581964823191069 0.5411328199029749; 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0; 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0; 0.5407406733970865 0.752747081073424 0.816339881538033 0.9342971361997795 0.07275790268915652 0.483868824344221 0.3411020736957842 1.2619452713635038 0.4260470211420768 0.7444245091991838; 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0; 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0; 0.5521767441326909 0.7741240222298142 0.9273731627983446 1.0817508033480734 0.022295630485198316 0.3583694054245387 0.21557668531910712 1.8842929286332872 0.3323359064082514 0.7405349148173794; 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0; 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0; 0.7232436676616368 0.7164444713865251 0.6549477675247651 0.6475063709802811 0.3430154302885961 0.6914168981172851 0.6638538310703913 0.6057618052030661 0.6558840230933077 0.6793410596233771; 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0; 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0; 0.9499478946589506 1.0422079878142596 0.9822724323165264 1.0011707463869712 0.3439968024501927 0.9468152727496189 0.836131447148128 0.9537939206005716 0.8467195760414438 0.999070091894408; 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0; 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0; 0.7599299494899554 1.1131762157917688 1.4021238537743508 1.668395283307375 0.026399984346376897 0.536951748155626 0.29759354536732446 2.8045552439044332 0.4637423740348744 1.12736128314747; 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0; 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0; 0.7872308209082846 0.9561785377996589 1.6145747917375 1.8413556334736274 0.0019337869193673052 0.22359725998284555 0.09722538110737827 4.486854221210786 0.25274753475024947 0.8397204679763876; 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0; 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0; 0.24235493108405243 0.0947138612067362 0.5110746572612422 0.845125302777198 2.6506473427271516e-10 0.0003653039743350403 6.588325524988472e-5 6.835787764982042 0.008440174334819502 0.02243552723867971; 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0; 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0; 1.072668522117969 1.6131174576665896 1.9238507110332144 2.293260627523797 0.0996349529742113 1.1096619760212543 0.6647301694223571 2.88404566106233 0.852952194193479 1.794222991579596; 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0; 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0; 1.4320893885421069 1.6534574844357253 1.596423677726839 1.6218875505766839 0.4218205378139094 1.4943709332226836 1.222506350964251 1.5336967953380862 1.2501180885643366 1.590939212316388; 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0; 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0; 1.5559569847043753 1.695975635418411 1.5856467774945169 1.548297711897043 0.5051991418663074 1.5747887985731714 1.3491845081854925 1.4688928816817957 1.3451550615048775 1.569748876284584; 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0; 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0; 1.2901235317779904 1.6065412836688195 2.924312179347349 3.574504345583093 0.002365500967000977 0.4103919363693273 0.151783960678379 8.023420647726466 0.40566875261374385 1.607997175732602; 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0; 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0; 0.4077992415019675 0.18382648202216303 1.045249034851542 1.9654295539720383 3.292522511661466e-10 0.0006668220544152756 0.0001124123956815111 13.702609199571796 0.00979398288659503 0.037288840634045514; 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0; 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0; 3.7305815706279715 4.0109051507992 2.970630442917298 2.1397312800296406 1.974803175511754 3.4621502053938578 3.445969386234832 2.184654075988402 3.1730720604393765 2.5925801992592246; 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0; 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0; 2.9104040954294175 3.666206445442438 3.810169211918313 3.874033967479797 0.6240405946719936 3.479119877810813 2.307694546229822 3.44019520912414 2.5152674516398617 3.6886503175202936; 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0; 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0; 2.27939522349818 3.5162449647745295 5.366437103205774 7.599949030223211 0.0398439087310176 2.2097545117453814 0.8181172636843104 10.541335941557984 1.470233230641542 5.310148981203036; 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0; 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0; 3.4902887702193084 4.178669832459217 8.707328608864547 12.746265089227458 0.0034287707982959305 1.3505101715150394 0.34882977132460463 24.03929655908723 1.0746982715468407 6.053427030640491; 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0; 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0; 4.006584900644007 4.589196531908443 4.310269364858182 3.827718184389592 1.103700134646618 4.44712240479805 3.254729906763569 3.7233528785452985 3.4194177810315733 3.925808626214451; 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0; 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0; 11.799578850417419 15.498337018531975 11.938946008886212 7.356998345411697 5.256458576063363 13.879129002499953 10.531745199868089 8.217567402060967 11.37523696300867 9.00611204018734; 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0; 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0; 7.745382436158898 10.440566525143701 13.092413843347158 13.84288617769189 1.1230440846179668 12.542493340814545 4.990402124464694 9.815644799351254 7.137584431909969 12.630201481401107; 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0; 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0; 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0; 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0; 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0; 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0; 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0; 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0; 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0; 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0; 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0], [1.0 0.6743277308516467 0.5789986344580262 0.6410847856274119 0.7649326838191254 0.6141578308341368 0.5978782932002765 0.9731024078612218 0.8246581965618232 0.6751004677426795; 0.6743277308516467 1.0 0.8158037804490788 0.8372967267025747 0.41192801612114927 0.61697031140504 0.7842341314954936 0.8012876504410998 0.858357982683518 0.7293899215923119; 0.5789986344580262 0.8158037804490788 1.0 0.8707939966249733 0.21762837596356643 0.8888855264062303 0.8640442308526532 0.7249204704742949 0.5606793592625839 0.819656787206907; 0.6410847856274119 0.8372967267025747 0.8707939966249733 1.0 0.43136328260482243 0.8620016732890292 0.6175924644588785 0.7503638404324096 0.6010096272506619 0.9727046697632333; 0.7649326838191254 0.41192801612114927 0.21762837596356643 0.43136328260482243 1.0 0.2878372263724778 0.1720807509762431 0.6669635447101079 0.6100270665432921 0.4791530334162994; 0.6141578308341368 0.61697031140504 0.8888855264062303 0.8620016732890292 0.2878372263724778 1.0 0.6465699690345487 0.7090189623116725 0.41893708379965805 0.9098185052482473; 0.5978782932002765 0.7842341314954936 0.8640442308526532 0.6175924644588785 0.1720807509762431 0.6465699690345487 1.0 0.7358203960102597 0.6669826176975818 0.5465452283096874; 0.9731024078612218 0.8012876504410998 0.7249204704742949 0.7503638404324096 0.6669635447101079 0.7090189623116725 0.7358203960102597 1.0 0.8700823698921797 0.7560040741892883; 0.8246581965618232 0.858357982683518 0.5606793592625839 0.6010096272506619 0.6100270665432921 0.41893708379965805 0.6669826176975818 0.8700823698921797 1.0 0.5350059177407622; 0.6751004677426795 0.7293899215923119 0.819656787206907 0.9727046697632333 0.4791530334162994 0.9098185052482473 0.5465452283096874 0.7560040741892883 0.5350059177407622 1.0], [0.38422394821232375 0.39700125339329706 0.3849429282136446 0.4009361747428534 0.23000122663663955 0.35845001886899924 0.3365265650781538 0.42806529153662787 0.35733119699277344 0.3899453303964701; 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0; 0.6048988954813043 0.6423250848534686 0.6373007034142937 0.6637293951267994 0.2868936334967644 0.5659268032836658 0.5040047605985355 0.7199371232952273 0.5435660937674479 0.6338231493362171; 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0; 0.7764069523367209 0.8378042146640688 0.8523832998713955 0.8896233761490461 0.31357090852469305 0.7360063195729203 0.6213240406478509 0.9653875260773103 0.682128118641929 0.8396270173266942; 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0; 1.6705180595874634 1.7278443549358198 2.0133826257032523 2.245209551185368 0.3620820034656417 1.6771518278696256 1.0486335945621266 2.282976381318068 1.321318345840067 2.079932498520809; 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0; 65.11354101824273 10.473864696665068 23.371160324873884 75.73864096009247 0.4501052642053114 28.828982301423547 5.952830328705113 70.62437179209878 12.127860572596905 79.20034954525549; 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0; 0.44073769284456604 0.4481082564419415 0.41684273291432006 0.4252463667527037 0.2340126177799738 0.42745972554260153 0.40815606269075644 0.39542617758309834 0.4137510043264017 0.43621817304398336; 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0; 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0; 0.3730654921434763 0.49051785327683195 0.5525724161889083 0.6389759744157085 0.017711366197535224 0.21914170189790558 0.1433014700822986 1.150296070052741 0.22190965710614002 0.44897545861770266; 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0; 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0; 0.42647852319012836 0.5752866246627674 0.6060030919988203 0.6909654289218358 0.06410726353607481 0.36582686608790005 0.26860387369631833 0.9466640882796579 0.33520698162987006 0.5566033317462287; 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0; 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0; 0.4324948556112277 0.5831973683606986 0.6724662551915315 0.7786458963463093 0.019369373789551055 0.2635998224960772 0.16738692410910977 1.3863059973257563 0.2581964823191069 0.5411328199029749; 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0; 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0; 0.5407406733970865 0.752747081073424 0.816339881538033 0.9342971361997795 0.07275790268915652 0.483868824344221 0.3411020736957842 1.2619452713635038 0.4260470211420768 0.7444245091991838; 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0; 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0; 0.5521767441326909 0.7741240222298142 0.9273731627983446 1.0817508033480734 0.022295630485198316 0.3583694054245387 0.21557668531910712 1.8842929286332872 0.3323359064082514 0.7405349148173794; 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0; 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0; 0.7232436676616368 0.7164444713865251 0.6549477675247651 0.6475063709802811 0.3430154302885961 0.6914168981172851 0.6638538310703913 0.6057618052030661 0.6558840230933077 0.6793410596233771; 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0; 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0; 0.9499478946589506 1.0422079878142596 0.9822724323165264 1.0011707463869712 0.3439968024501927 0.9468152727496189 0.836131447148128 0.9537939206005716 0.8467195760414438 0.999070091894408; 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0; 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0; 0.7599299494899554 1.1131762157917688 1.4021238537743508 1.668395283307375 0.026399984346376897 0.536951748155626 0.29759354536732446 2.8045552439044332 0.4637423740348744 1.12736128314747; 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0; 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0; 0.7872308209082846 0.9561785377996589 1.6145747917375 1.8413556334736274 0.0019337869193673052 0.22359725998284555 0.09722538110737827 4.486854221210786 0.25274753475024947 0.8397204679763876; 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0; 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0; 0.24235493108405243 0.0947138612067362 0.5110746572612422 0.845125302777198 2.6506473427271516e-10 0.0003653039743350403 6.588325524988472e-5 6.835787764982042 0.008440174334819502 0.02243552723867971; 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0; 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0; 1.072668522117969 1.6131174576665896 1.9238507110332144 2.293260627523797 0.0996349529742113 1.1096619760212543 0.6647301694223571 2.88404566106233 0.852952194193479 1.794222991579596; 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0; 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0; 1.4320893885421069 1.6534574844357253 1.596423677726839 1.6218875505766839 0.4218205378139094 1.4943709332226836 1.222506350964251 1.5336967953380862 1.2501180885643366 1.590939212316388; 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0; 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0; 1.5559569847043753 1.695975635418411 1.5856467774945169 1.548297711897043 0.5051991418663074 1.5747887985731714 1.3491845081854925 1.4688928816817957 1.3451550615048775 1.569748876284584; 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0; 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0; 1.2901235317779904 1.6065412836688195 2.924312179347349 3.574504345583093 0.002365500967000977 0.4103919363693273 0.151783960678379 8.023420647726466 0.40566875261374385 1.607997175732602; 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0; 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0; 0.4077992415019675 0.18382648202216303 1.045249034851542 1.9654295539720383 3.292522511661466e-10 0.0006668220544152756 0.0001124123956815111 13.702609199571796 0.00979398288659503 0.037288840634045514; 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0; 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0; 3.7305815706279715 4.0109051507992 2.970630442917298 2.1397312800296406 1.974803175511754 3.4621502053938578 3.445969386234832 2.184654075988402 3.1730720604393765 2.5925801992592246; 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0; 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0; 2.9104040954294175 3.666206445442438 3.810169211918313 3.874033967479797 0.6240405946719936 3.479119877810813 2.307694546229822 3.44019520912414 2.5152674516398617 3.6886503175202936; 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0; 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0; 2.27939522349818 3.5162449647745295 5.366437103205774 7.599949030223211 0.0398439087310176 2.2097545117453814 0.8181172636843104 10.541335941557984 1.470233230641542 5.310148981203036; 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0; 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0; 3.4902887702193084 4.178669832459217 8.707328608864547 12.746265089227458 0.0034287707982959305 1.3505101715150394 0.34882977132460463 24.03929655908723 1.0746982715468407 6.053427030640491; 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0; 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0; 4.006584900644007 4.589196531908443 4.310269364858182 3.827718184389592 1.103700134646618 4.44712240479805 3.254729906763569 3.7233528785452985 3.4194177810315733 3.925808626214451; 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0; 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0; 11.799578850417419 15.498337018531975 11.938946008886212 7.356998345411697 5.256458576063363 13.879129002499953 10.531745199868089 8.217567402060967 11.37523696300867 9.00611204018734; 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0; 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0; 7.745382436158898 10.440566525143701 13.092413843347158 13.84288617769189 1.1230440846179668 12.542493340814545 4.990402124464694 9.815644799351254 7.137584431909969 12.630201481401107; 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0; 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0; 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0; 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0; 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0; 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0; 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0; 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0; 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0; 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0; 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0])
    end
    @testset "energy_update!" begin
        r_cut = 50
        @test energy_update!(pos2[index], index, spherical_config, dimer_potential_variables, d2mat_spherical, new_d2_spherical_vec, 0.0, eljpot_even) ≂ (DimerPotentialVariables{Float64}([0.5888720595243433, 0.36585394350375, 0.13102565622085904, 0.9464532262313834, 0.5743234852783174, 0.6776499075995779, 0.5715863775229529, 0.07271614209221577, 0.7011158355140754, 0.09521752297832098]), 0.00045929693400654364)
        @test energy_update!(pos2[index], index, spherical_config, dimer_potential_variables, d2mat_spherical, new_d2_spherical_vec, 0.0, r_cut, eljpot_even) ≂ (DimerPotentialVariables{Float64}([0.5888720595243433, 0.36585394350375, 0.13102565622085904, 0.9464532262313834, 0.5743234852783174, 0.6776499075995779, 0.5715863775229529, 0.07271614209221577, 0.7011158355140754, 0.09521752297832098]), 0.0004603835196235889)
        @test energy_update!(pos2[index], index, spherical_config, eljb_potential_variables, d2mat_spherical, new_d2_spherical_vec, 0.0, eljpot_b) ≂ (ELJPotentialBVariables{Float64}([0.8455146021206799, 0.3489952438885606, 0.768308366781904, 0.26905972740914796, 0.5396312192884193, 0.2939048617340425, 0.24219473008713432, 0.9780697196764138, 0.8532418055972256, 0.7060651915306733], [0.0 -3.4217836221520925 -2.4444706453772396 -0.831346482981883 -2.143621872020414 -1.2617077495302194 6.450682774441876 -4.717870686429747 4.643389832366683 -0.569992794489424; -3.4217836221520925 0.0 -4.463604767231692 -0.8038455164527933 -20.00598727546692 -2.522398410039182 1.4396612920748406 3.241544205776989 1.0863577753928038 -1.1637323286873107; -2.4444706453772396 -4.463604767231692 0.0 -1.277571841028557 20.32314995953278 -2.0504865161360217 0.1655417251392104 2.146219864028591 1.757687320518332 -1.3619194056658424; -0.831346482981883 -0.8038455164527933 -1.277571841028557 0.0 2.8826720115026307 4.797719745410046 0.4878584257931274 0.5428225181207741 0.6051413417103325 -4.93618564512869; -2.143621872020414 -20.00598727546692 20.32314995953278 2.8826720115026307 0.0 -4.863397302350482 3.4382986085499723 3.271364961720193 1.9727030277918467 -2.3744996599048367; -1.2617077495302194 -2.522398410039182 -2.0504865161360217 4.797719745410046 -4.863397302350482 0.0 0.7001189036560198 1.1058631589273262 1.3856501999795523 -2.5696609157704278; 6.450682774441876 1.4396612920748406 0.1655417251392104 0.4878584257931274 3.4382986085499723 0.7001189036560198 0.0 -3.741511834993883 -43.1155862096522 -0.6048554499477571; -4.717870686429747 3.241544205776989 2.146219864028591 0.5428225181207741 3.271364961720193 1.1058631589273262 -3.741511834993883 0.0 2.7721688770257784 -0.31506997656432567; 4.643389832366683 1.0863577753928038 1.757687320518332 0.6051413417103325 1.9727030277918467 1.3856501999795523 -43.1155862096522 2.7721688770257784 0.0 -0.6890567756323963; -0.569992794489424 -1.1637323286873107 -1.3619194056658424 -4.93618564512869 -2.3744996599048367 -2.5696609157704278 -0.6048554499477571 -0.31506997656432567 -0.6890567756323963 0.0], [2.1370894882817995, 19.750026386243285, -20.53709478486394, -2.8880314193211483, 0.0, -4.87598650982037, 3.4318338068722096, 3.2602639036228953, 1.9689915708338097, -2.378248296868027]), -1.0352328629057356e-6)
        @test energy_update!(pos2[index], index, spherical_config, eljb_potential_variables, d2mat_spherical, new_d2_spherical_vec, 0.0, r_cut, eljpot_b) ≂ (ELJPotentialBVariables{Float64}([0.8455146021206799, 0.3489952438885606, 0.768308366781904, 0.26905972740914796, 0.5396312192884193, 0.2939048617340425, 0.24219473008713432, 0.9780697196764138, 0.8532418055972256, 0.7060651915306733], [0.0 -3.4217836221520925 -2.4444706453772396 -0.831346482981883 -2.143621872020414 -1.2617077495302194 6.450682774441876 -4.717870686429747 4.643389832366683 -0.569992794489424; -3.4217836221520925 0.0 -4.463604767231692 -0.8038455164527933 -20.00598727546692 -2.522398410039182 1.4396612920748406 3.241544205776989 1.0863577753928038 -1.1637323286873107; -2.4444706453772396 -4.463604767231692 0.0 -1.277571841028557 20.32314995953278 -2.0504865161360217 0.1655417251392104 2.146219864028591 1.757687320518332 -1.3619194056658424; -0.831346482981883 -0.8038455164527933 -1.277571841028557 0.0 2.8826720115026307 4.797719745410046 0.4878584257931274 0.5428225181207741 0.6051413417103325 -4.93618564512869; -2.143621872020414 -20.00598727546692 20.32314995953278 2.8826720115026307 0.0 -4.863397302350482 3.4382986085499723 3.271364961720193 1.9727030277918467 -2.3744996599048367; -1.2617077495302194 -2.522398410039182 -2.0504865161360217 4.797719745410046 -4.863397302350482 0.0 0.7001189036560198 1.1058631589273262 1.3856501999795523 -2.5696609157704278; 6.450682774441876 1.4396612920748406 0.1655417251392104 0.4878584257931274 3.4382986085499723 0.7001189036560198 0.0 -3.741511834993883 -43.1155862096522 -0.6048554499477571; -4.717870686429747 3.241544205776989 2.146219864028591 0.5428225181207741 3.271364961720193 1.1058631589273262 -3.741511834993883 0.0 2.7721688770257784 -0.31506997656432567; 4.643389832366683 1.0863577753928038 1.757687320518332 0.6051413417103325 1.9727030277918467 1.3856501999795523 -43.1155862096522 2.7721688770257784 0.0 -0.6890567756323963; -0.569992794489424 -1.1637323286873107 -1.3619194056658424 -4.93618564512869 -2.3744996599048367 -2.5696609157704278 -0.6048554499477571 -0.31506997656432567 -0.6890567756323963 0.0], [2.1370894882817995, 19.750026386243285, -20.53709478486394, -2.8880314193211483, 0.0, -4.87598650982037, 3.4318338068722096, 3.2602639036228953, 1.9689915708338097, -2.378248296868027]), -1.0201151572753717e-6)
        @test energy_update!(pos2[index], index, spherical_config, eav, d2mat_spherical, new_d2_spherical_vec, 0.0, eam) ≂ (EmbeddedAtomVariables{Float64}([8.17419408890664 4.763043614104647; 8.164446276424366 4.642825154453063; 8.171894379461301 4.706913647424885; 8.227207746953418 4.986418153301363; 7.907383328474283 3.7317367776929022; 8.127078801038815 4.546274362661938; 8.060770220498517 4.264036518582607; 8.256887602631338 5.075454489483552; 8.100030373259722 4.412291972170639; 8.207601093670165 4.916072906639678], [8.174260661432989 4.76330565505295; 8.164405082144599 4.642696889410482; 8.172135725325145 4.707599108628744; 8.2273707798317 4.98693111246263; 7.9082648673055 3.734723194661843; 8.127196241560904 4.546619032483529; 8.060628289122771 4.263642757944721; 8.257208868069114 5.076618627304469; 8.100183466938683 4.412824977298026; 8.207603007249595 4.916079075205762]), 32.53700166568562)
        #println(energy_update!(pos2[index], index, spherical_config, nnp_variables, d2mat_spherical, new_d2_spherical_vec, 0.0, runnerpotential))
    end
    @testset "dimer_energy" begin
        @test dimer_energy(eljpot_even, 10.0) ≈ 0.2574502194084367
        @test dimer_energy(eljpot_b, 10.0, 3.0) ≈ -0.00011984901305173401
    end
    @testset "lrc" begin
        @test lrc(n_atoms, r_cut, eljpot_even) ≈ -0.0016343729421203546
        @test lrc(n_atoms, r_cut, eljpot_b) ≈ -2.9664450279322593e-5
    end
    @testset "invrexp" begin
        @test invrexp(3.0, 4.0, 5.0) ≂ (0.11111111111111117, 0.06415002990995847)
        @test invrexp(4.0, 5.0, 6.0) ≂ (0.03125, 0.015625)
    end
    componentvec = random_test_samples[:componentvec]
    # @testset "calc_components" begin
    #     println(calc_components(componentvec, d2vec_spherical, 3, 4))
    #     println(calc_components(new_component_vec, index, d2vec_spherical, new_d2_spherical_vec, 3, 4))
    #     println(calc_components(componentvec, new_component_vec, index, d2vec_spherical, new_d2_spherical_vec, 3, 4))
    # end
    @testset "calc_energies_from_components" begin
        @test calc_energies_from_components(componentvec, 3., 4.) ≈ -2.3459156096091585
    end
    @testset "initialise_energy" begin
        nvtvars = set_ensemble_variables(spherical_config, NVT(n_atoms))
        nptvars = set_ensemble_variables(cubic_config, NPT(n_atoms, 101325))
        @test initialise_energy(spherical_config, d2mat_spherical, dimer_potential_variables, nvtvars, eljpot_even) ≂ (2.554599063498897e7, DimerPotentialVariables{Float64}([1.3557145257410774e7, 4.490459175475829, 56.12295154741882, 1.1988466992169222e7, 0.023911356198916628, 365.20355684232544, 5.276074090915916, 1.3557153443327183e7, 12.126980651298927, 1.1988772333137097e7]))
        @test initialise_energy(cubic_config, d2mat_spherical, dimer_potential_variables, nptvars, eljpot_even) ≂ (2.5545990627032924e7, DimerPotentialVariables{Float64}([1.3557145257306417e7, 4.490570347293737, 56.122878870413494, 1.1988466992289081e7, 0.024387305640198184, 365.2037266096757, 5.276148054916029, 1.3557153443327183e7, 12.12717117184831, 1.1988772333395293e7]))
        @test initialise_energy(spherical_config, d2mat_spherical, eljb_potential_variables, nvtvars, eljpot_b) ≂ (0.2993994004197197, ELJPotentialBVariables{Float64}([0.09974246784456195, -0.0004949984150655538, 0.0004464986278423629, 0.09974315464916497, -8.991276776044012e-5, 0.10029787911494172, 1.4848011272009263e-5, 0.0996475159492499, -0.0002882452740609024, 0.19977959309929333], [0.0 -3.4217836221520925 -2.4444706453772396 -0.831346482981883 -2.143621872020414 -1.2617077495302194 6.450682774441876 -4.717870686429747 4.643389832366683 -0.569992794489424; -3.4217836221520925 0.0 -4.463604767231692 -0.8038455164527933 -20.00598727546692 -2.522398410039182 1.4396612920748406 3.241544205776989 1.0863577753928038 -1.1637323286873107; -2.4444706453772396 -4.463604767231692 0.0 -1.277571841028557 20.32314995953278 -2.0504865161360217 0.1655417251392104 2.146219864028591 1.757687320518332 -1.3619194056658424; -0.831346482981883 -0.8038455164527933 -1.277571841028557 0.0 2.8826720115026307 4.797719745410046 0.4878584257931274 0.5428225181207741 0.6051413417103325 -4.93618564512869; -2.143621872020414 -20.00598727546692 20.32314995953278 2.8826720115026307 0.0 -4.863397302350482 3.4382986085499723 3.271364961720193 1.9727030277918467 -2.3744996599048367; -1.2617077495302194 -2.522398410039182 -2.0504865161360217 4.797719745410046 -4.863397302350482 0.0 0.7001189036560198 1.1058631589273262 1.3856501999795523 -2.5696609157704278; 6.450682774441876 1.4396612920748406 0.1655417251392104 0.4878584257931274 3.4382986085499723 0.7001189036560198 0.0 -3.741511834993883 -43.1155862096522 -0.6048554499477571; -4.717870686429747 3.241544205776989 2.146219864028591 0.5428225181207741 3.271364961720193 1.1058631589273262 -3.741511834993883 0.0 2.7721688770257784 -0.31506997656432567; 4.643389832366683 1.0863577753928038 1.757687320518332 0.6051413417103325 1.9727030277918467 1.3856501999795523 -43.1155862096522 2.7721688770257784 0.0 -0.6890567756323963; -0.569992794489424 -1.1637323286873107 -1.3619194056658424 -4.93618564512869 -2.3744996599048367 -2.5696609157704278 -0.6048554499477571 -0.31506997656432567 -0.6890567756323963 0.0], [2.1370894882817995, 19.750026386243285, -20.53709478486394, -2.8880314193211483, 0.0, -4.87598650982037, 3.4318338068722096, 3.2602639036228953, 1.9689915708338097, -2.378248296868027]))
        @test initialise_energy(cubic_config, d2mat_spherical, eljb_potential_variables, nptvars, eljpot_b) ≂ (0.29918016728976027, ELJPotentialBVariables{Float64}([0.09974926865986744, -0.0004932086096983631, 0.0004595966032186386, 0.09974522173645396, -8.148584171375536e-5, 0.10030055752676867, 2.0444427637498044e-5, 0.0996475159492499, -0.00027577888416774836, 0.19979253918171097], [0.0 -3.4217836221520925 -2.4444706453772396 -0.831346482981883 -2.143621872020414 -1.2617077495302194 6.450682774441876 -4.717870686429747 4.643389832366683 -0.569992794489424; -3.4217836221520925 0.0 -4.463604767231692 -0.8038455164527933 -20.00598727546692 -2.522398410039182 1.4396612920748406 3.241544205776989 1.0863577753928038 -1.1637323286873107; -2.4444706453772396 -4.463604767231692 0.0 -1.277571841028557 20.32314995953278 -2.0504865161360217 0.1655417251392104 2.146219864028591 1.757687320518332 -1.3619194056658424; -0.831346482981883 -0.8038455164527933 -1.277571841028557 0.0 2.8826720115026307 4.797719745410046 0.4878584257931274 0.5428225181207741 0.6051413417103325 -4.93618564512869; -2.143621872020414 -20.00598727546692 20.32314995953278 2.8826720115026307 0.0 -4.863397302350482 3.4382986085499723 3.271364961720193 1.9727030277918467 -2.3744996599048367; -1.2617077495302194 -2.522398410039182 -2.0504865161360217 4.797719745410046 -4.863397302350482 0.0 0.7001189036560198 1.1058631589273262 1.3856501999795523 -2.5696609157704278; 6.450682774441876 1.4396612920748406 0.1655417251392104 0.4878584257931274 3.4382986085499723 0.7001189036560198 0.0 -3.741511834993883 -43.1155862096522 -0.6048554499477571; -4.717870686429747 3.241544205776989 2.146219864028591 0.5428225181207741 3.271364961720193 1.1058631589273262 -3.741511834993883 0.0 2.7721688770257784 -0.31506997656432567; 4.643389832366683 1.0863577753928038 1.757687320518332 0.6051413417103325 1.9727030277918467 1.3856501999795523 -43.1155862096522 2.7721688770257784 0.0 -0.6890567756323963; -0.569992794489424 -1.1637323286873107 -1.3619194056658424 -4.93618564512869 -2.3744996599048367 -2.5696609157704278 -0.6048554499477571 -0.31506997656432567 -0.6890567756323963 0.0], [2.1370894882817995, 19.750026386243285, -20.53709478486394, -2.8880314193211483, 0.0, -4.87598650982037, 3.4318338068722096, 3.2602639036228953, 1.9689915708338097, -2.378248296868027]))
        @test initialise_energy(spherical_config, d2mat_spherical, eav, nvtvars, eam) ≂ (32.536377941866924, EmbeddedAtomVariables{Float64}([8.17419408890664 4.763043614104647; 8.164446276424366 4.642825154453063; 8.171894379461301 4.706913647424885; 8.227207746953418 4.986418153301363; 7.907383328474283 3.7317367776929022; 8.127078801038815 4.546274362661938; 8.060770220498517 4.264036518582607; 8.256887602631338 5.075454489483552; 8.100030373259722 4.412291972170639; 8.207601093670165 4.916072906639678], [8.174260661432989 4.76330565505295; 8.164405082144599 4.642696889410482; 8.172135725325145 4.707599108628744; 8.2273707798317 4.98693111246263; 7.9082648673055 3.734723194661843; 8.127196241560904 4.546619032483529; 8.060628289122771 4.263642757944721; 8.257208868069114 5.076618627304469; 8.100183466938683 4.412824977298026; 8.207603007249595 4.916079075205762]))
        #println(initialise_energy(spherical_config, d2mat_spherical, nnp_variables, nptvars, runnerpotential))
    end
end

@testset "Exchange" begin
    include(random_test_samples_and_test_results["Exchange"])
    @testset "metropolis_condition" begin
        tests = random_test_samples[:metropolis]
        results = test_results[:metropolis1]
        for i in 1:100
            @test results[i] ≈ metropolis_condition(tests[i], 1)
        end

        npt = NPT(100, 101325)
        results = test_results[:metropolis2]
        for i in 1:100
            @test results[i] ≈ metropolis_condition(npt, tests[i], random_test_samples[:volume_changed][i], random_test_samples[:volume_unchanged][i], 1.)
        end

        bc = CubicBC(4.)
        pos = random_test_samples[:pos]
        config = Config(pos, bc)
        ensemble = NPT(10, 101325)
        d2_mat = get_distance2_mat(config)
        d2_vec = d2_mat[3,:]
        a=[0.0005742,-0.4032,-0.2101,-0.0595,0.0606,0.1608]
        b=[-0.01336,-0.02005,-0.1051,-0.1268,-0.1405,-0.1751]
        c1=[-0.1132,-1.5012,35.6955,-268.7494,729.7605,-583.4203]
        eljpot_b = ELJPotentialB{6}(a,b,c1)
        thetamat = get_tantheta_mat(config, bc)
        eljb_potential_variables = ELJPotentialBVariables(random_test_samples[:eljb_potvars1],thetamat,random_test_samples[:eljb_potvars2])
        ensemble_variables = set_ensemble_variables(config, ensemble)
        for i in 1:100
            mc_state = MCState(random_test_samples[:volume_changed][i], random_test_samples[:volume_unchanged][i], config, d2_mat, d2_vec, tests[i], 0., eljb_potential_variables, ensemble_variables)
            @test test_results[:atommove][i] ≈ metropolis_condition("atommove", mc_state, ensemble)
            @test test_results[:volumemove][i] ≈ metropolis_condition("volumemove", mc_state, ensemble)
            if i == 1 @test_throws ErrorException metropolis_condition("something_else", mc_state, ensemble) end
        end
    end
    @testset "exc_acceptance" begin
        sample = random_test_samples[:volume_changed]
        results = test_results[:exc_acc]
        for i in 1:25
            @test results[i] ≈ exc_acceptance(sample[i], sample[i+25], sample[i+50], sample[i+75])
        end
    end
    @testset "exc_trajectories" begin
        tests = random_test_samples[:metropolis]
        bc = CubicBC(4.)
        pos = random_test_samples[:pos]
        config = Config(pos, bc)
        ensemble = NPT(10, 101325)
        d2_mat = get_distance2_mat(config)
        d2_vec = d2_mat[3,:]
        a=[0.0005742,-0.4032,-0.2101,-0.0595,0.0606,0.1608]
        b=[-0.01336,-0.02005,-0.1051,-0.1268,-0.1405,-0.1751]
        c1=[-0.1132,-1.5012,35.6955,-268.7494,729.7605,-583.4203]
        eljpot_b = ELJPotentialB{6}(a,b,c1)
        thetamat = get_tantheta_mat(config, bc)
        eljb_potential_variables = ELJPotentialBVariables(random_test_samples[:eljb_potvars1],thetamat,random_test_samples[:eljb_potvars2])
        ensemble_variables = set_ensemble_variables(config, ensemble)
        for i in 1:10
            mc_state1 = MCState(random_test_samples[:volume_changed][i], random_test_samples[:volume_unchanged][i], config, d2_mat, d2_vec, tests[i], 0., eljb_potential_variables, ensemble_variables)
            mc_state2 = MCState(random_test_samples[:volume_changed][100-i], random_test_samples[:volume_unchanged][100-i], config, d2_mat, d2_vec, tests[i], 0., eljb_potential_variables, ensemble_variables)
            @test test_results[:exc_traj][i] ≂ exc_trajectories!(mc_state1, mc_state2)
        end
    end
    @testset "parallel_tempering_exchange!" begin
        tests = random_test_samples[:metropolis]
        bc = CubicBC(4.)
        pos = random_test_samples[:pos]
        config = Config(pos, bc)
        ensemble = NPT(10, 101325)
        nvt = NVT(10)
        d2_mat = get_distance2_mat(config)
        d2_vec = d2_mat[3,:]
        a=[0.0005742,-0.4032,-0.2101,-0.0595,0.0606,0.1608]
        b=[-0.01336,-0.02005,-0.1051,-0.1268,-0.1405,-0.1751]
        c1=[-0.1132,-1.5012,35.6955,-268.7494,729.7605,-583.4203]
        eljpot_b = ELJPotentialB{6}(a,b,c1)
        thetamat = get_tantheta_mat(config, bc)
        eljb_potential_variables = ELJPotentialBVariables(random_test_samples[:eljb_potvars1],thetamat,random_test_samples[:eljb_potvars2])
        ensemble_variables = set_ensemble_variables(config, ensemble)
        nvt_variables = set_ensemble_variables(config, nvt)

        mc_params = MCParams(50, 2, 10)
        for i in 1:10
            mc_state1 = MCState(random_test_samples[:volume_changed][i], random_test_samples[:volume_unchanged][i], config, d2_mat, d2_vec, tests[i], 0., eljb_potential_variables, ensemble_variables)
            mc_state2 = MCState(random_test_samples[:volume_changed][100-i], random_test_samples[:volume_unchanged][100-i], config, d2_mat, d2_vec, tests[i], 0., eljb_potential_variables, ensemble_variables)
            mc_states = [mc_state1, mc_state2]
            Random.seed!(1)
            @test test_results[:npt_exchange][i] ≂ parallel_tempering_exchange!(mc_states, mc_params, ensemble)
        end
        for i in 1:10
            mc_state1 = MCState(random_test_samples[:volume_changed][i], random_test_samples[:volume_unchanged][i], config, d2_mat, d2_vec, tests[i], 0., eljb_potential_variables, nvt_variables)
            mc_state2 = MCState(random_test_samples[:volume_changed][100-i], random_test_samples[:volume_unchanged][100-i], config, d2_mat, d2_vec, tests[i], 0., eljb_potential_variables, nvt_variables)
            mc_states = [mc_state1, mc_state2]
            Random.seed!(1)
            @test test_results[:nvt_exchange][i] ≂ parallel_tempering_exchange!(mc_states, mc_params, nvt)
        end
    end
    @testset "update_max_stepsize!" begin
        tests = random_test_samples[:metropolis]
        bc = CubicBC(4.)
        pos = random_test_samples[:pos]
        config = Config(pos, bc)
        ensemble = NPT(10, 101325)
        nvt = NVT(10)
        d2_mat = get_distance2_mat(config)
        d2_vec = d2_mat[3,:]
        a=[0.0005742,-0.4032,-0.2101,-0.0595,0.0606,0.1608]
        b=[-0.01336,-0.02005,-0.1051,-0.1268,-0.1405,-0.1751]
        c1=[-0.1132,-1.5012,35.6955,-268.7494,729.7605,-583.4203]
        eljpot_b = ELJPotentialB{6}(a,b,c1)
        thetamat = get_tantheta_mat(config, bc)
        eljb_potential_variables = ELJPotentialBVariables(random_test_samples[:eljb_potvars1],thetamat,random_test_samples[:eljb_potvars2])
        ensemble_variables = set_ensemble_variables(config, ensemble)
        nvt_variables = set_ensemble_variables(config, nvt)
        for i in 1:10
            mc_state = MCState(random_test_samples[:volume_changed][i], random_test_samples[:volume_unchanged][i], config, d2_mat, d2_vec, tests[i], 0., eljb_potential_variables, ensemble_variables)
            @test test_results[:update_max_npt][i] ≂ update_max_stepsize!(mc_state, 10, ensemble, 0.1, 0.5)
        end
        for i in 1:10
            mc_state = MCState(random_test_samples[:volume_changed][i], random_test_samples[:volume_unchanged][i], config, d2_mat, d2_vec, tests[i], 0., eljb_potential_variables, nvt_variables)
            @test test_results[:update_max_nvt][i] ≂ update_max_stepsize!(mc_state, 10, nvt, 0.1, 0.5)
        end
    end
end

@testset "Initialization" begin
    @testset "initialisation" begin
        ensemble = NPT(10, 101325)
        a=[0.0005742,-0.4032,-0.2101,-0.0595,0.0606,0.1608]
        b=[-0.01336,-0.02005,-0.1051,-0.1268,-0.1405,-0.1751]
        c1=[-0.1132,-1.5012,35.6955,-268.7494,729.7605,-583.4203]
        eljpot_b = ELJPotentialB{6}(a,b,c1)
        
        for i in 1:10
            temp = TempGrid{2}(random_test_samples[:volume_changed][i], random_test_samples[:volume_unchanged][i]*4+1)
            bc = CubicBC(random_test_samples[:volume_changed][i]*10)
            pos = random_test_samples[:pos]
            config = Config(pos, bc)
            mc_params = MCParams(50, 2, 10)
            @test test_results[:init][i] ≂ initialisation(mc_params, temp, config, eljpot_b, ensemble)
        end

        cd(joinpath(@__DIR__, "testing_data"))
        @test test_results[:init_true] ≂ initialisation(true, 0.5)
        @test test_results[:init_false] ≂ initialisation(false, 0.5)
        cd(joinpath(@__DIR__, ".."))
    end
end

@testset "MCMoves" begin
    include(random_test_samples_and_test_results["MCMove"])
    v1 = random_test_samples[:spheripos]
    v3 = random_test_samples[:spheripos2]
    bc = SphericalBC(4.0)
    displ = 0.1
    for i in 1:20
        trial_pos = atom_displacement(v1,displ,bc)
        @test norm(trial_pos-v1) < displ
    end

    for i in 1:20
        trial_pos = atom_displacement(v3,displ,bc)
        @test norm(trial_pos-v3) < displ
    end
    bc = CubicBC(4.0)
    conf2 = Config(random_test_samples[:pos], bc)
    max_v = 0.1
    trial_config, scale = volume_change(conf2,bc,max_v,50)
    @test trial_config.bc.box_length/bc.box_length <= exp(0.5*max_v)^(1/3)
    @test trial_config.bc.box_length/bc.box_length >= exp(-0.5*max_v)^(1/3)
    #@test abs(trial_config.bc.box_length/bc.box_length - trial_config.pos[1][1]/v1[1]) <= 10^(-15)

    bc = RhombicBC(10.0, 10.0)
    conf2 = Config(random_test_samples[:pos], bc)
    max_v = 0.1
    trial_config, scale = volume_change(conf2,bc,max_v,50)
    @test trial_config.bc.box_length/bc.box_length <= exp(0.5*max_v)^(1/3)
    @test trial_config.bc.box_length/bc.box_length >= exp(-0.5*max_v)^(1/3)
    #@test abs(trial_config.bc.box_length/bc.box_length - trial_config.pos[1][1]/v1[1]) <= 10^(-15)
    @test abs(trial_config.bc.box_length/bc.box_length - trial_config.bc.box_height/bc.box_height) <= 10^(-15)

    v5 = SVector(7.5, 4.330127018922193, 5.0)
    displ = 0.1
    trial_pos = atom_displacement(v5,displ,bc)
    @test norm(trial_pos-v5) < displ

    #generate_move is tested in test_states.jl
end

@testset "MCRun" begin
    include(random_test_samples_and_test_results["EnergyEvaluation"])

    mc_params = MCParams(100, 10, 10)
    temp = TempGrid{10}(0.5, 5)
    bc = CubicBC(4.0)
    npt = NPT(10, 101325)
    nvt = NVT(10)
    config = Config(random_test_samples[:pos], bc)
    a=[0.0005742,-0.4032,-0.2101,-0.0595,0.0606,0.1608]
    b=[-0.01336,-0.02005,-0.1051,-0.1268,-0.1405,-0.1751]
    c1=[-0.1132,-1.5012,35.6955,-268.7494,729.7605,-583.4203]
    eljpot_b = ELJPotentialB{6}(a,b,c1)

    npt_states, npt_strategy, npt_results, npt_steps, npt_counter = initialisation(mc_params, temp, config, eljpot_b, npt)
    nvt_states, nvt_strategy, nvt_results, nvt_steps, nvt_counter = initialisation(mc_params, temp, config, eljpot_b, nvt)

    npt_results=initialise_histograms!(mc_params,npt_results,[-0.006 , -0.002],bc)
    nvt_results=initialise_histograms!(mc_params,nvt_results,[-0.006 , -0.002],bc)

    for state in npt_states
        push!(state.ham, 0)
        push!(state.ham, 0)
    end
    for state in nvt_states
        push!(state.ham, 0)
        push!(state.ham, 0)
    end

    @testset "get_energy!" begin
        for i in 1:2
            @test test_results[:get_energy_atom_npt][i] ≂ get_energy!(npt_states[i], eljpot_b, "atommove")
            @test test_results[:get_energy_vol_npt][i] ≂ get_energy!(npt_states[i], eljpot_b, "volumemove")
        end
        for i in 1:2
            @test test_results[:get_energy_atom_nvt][i] ≂ get_energy!(nvt_states[i], eljpot_b, "atommove")
        end
    end

    #This test appears flawed, as no matter the RNG seed, the results are always the same. It appears as if metropolis_condition always returns 1 here.
    #Either that or it rolls close enough to 1 consistently.
    @testset "acc_test!" begin
        Random.seed!(12839756)
        for i in 1:10
            acc_test!(npt_states[i ÷ 3 + 1], npt, "atommove")
        end
        @test test_results[:acc_test_npt] ≂ npt_states
        for i in 1:10
            acc_test!(nvt_states[i ÷ 3 + 1], nvt, "atommove")
        end
        @test test_results[:acc_test_nvt] ≂ nvt_states
    end

    @testset "mc_move!" begin
        Random.seed!(1)
        for i in 1:10
            @test test_results[:mc_move_npt][i] ≂ mc_move!(npt_states[i], npt_strategy, eljpot_b, npt)
        end
        Random.seed!(1)
        for i in 1:10
            @test test_results[:mc_move_nvt][i] ≂ mc_move!(nvt_states[i], nvt_strategy, eljpot_b, nvt)
        end
    end

    @testset "mc_step!" begin
        Random.seed!(1)
        @test test_results[:mc_step_npt] ≂ mc_step!(npt_states, npt_strategy, eljpot_b, npt, npt_steps)
        Random.seed!(1)
        @test test_results[:mc_step_nvt] ≂ mc_step!(nvt_states, nvt_strategy, eljpot_b, nvt, nvt_steps)
    end

    @testset "mc_cycle!" begin
        Random.seed!(1)
        @test test_results[:mc_cycle_npt] ≂ mc_cycle!(npt_states, npt_strategy, mc_params, eljpot_b, npt, npt_steps, npt_counter)
        Random.seed!(1)
        @test test_results[:mc_cycle_nvt] ≂ mc_cycle!(nvt_states, nvt_strategy, mc_params, eljpot_b, nvt, nvt_steps, nvt_counter)

        Random.seed!(1)
        @test test_results[:mc_cycle_npt_rdf] ≂ mc_cycle!(npt_states, npt_strategy, mc_params, eljpot_b, npt, npt_steps, npt_results, npt_counter, true)

        Random.seed!(1)
        @test_throws InexactError mc_cycle!(nvt_states, nvt_strategy, mc_params, eljpot_b, nvt, nvt_steps, nvt_results, nvt_counter, true)
        Random.seed!(1)
        @test test_results[:mc_cycle_npt_rdf] ≂ mc_cycle!(npt_states, npt_strategy, mc_params, eljpot_b, npt, npt_steps, npt_results, npt_counter, false)
        Random.seed!(1)
        @test test_results[:mc_cycle_nvt_nordf] ≂ mc_cycle!(nvt_states, nvt_strategy, mc_params, eljpot_b, nvt, nvt_steps, nvt_results, nvt_counter, false)

        bc = SphericalBC(8.)
        config = Config(random_test_samples[:pos], bc)
        nvt_states, nvt_strategy, nvt_results, nvt_steps, nvt_counter = initialisation(mc_params, temp, config, eljpot_b, nvt)
        nvt_results=initialise_histograms!(mc_params,nvt_results,[-0.006 , -0.002],bc)

        for state in nvt_states
            push!(state.ham, 0)
            push!(state.ham, 0)
        end

        @test test_results[:mc_cycle_nvt_rdf] ≂ mc_cycle!(nvt_states, nvt_strategy, mc_params, eljpot_b, nvt, nvt_steps, nvt_results, nvt_counter, true)

    end

    @testset "check_e_bounds" begin
        for i in 1:10
            @test test_results[:ebounds][i] ≂ check_e_bounds(i, [3, 8])
        end
    end

    @testset "reset_counters" begin
        for state in npt_states
            reset_counters(state)
            @test state.count_atom ≂ [0, 0]
            @test state.count_vol ≂ [0, 0]
            @test state.count_exc ≂ [0, 0]
        end
    end

    n_atoms = 13

    # temperature grid
    ti = 4.
    tf = 16.
    n_traj = 25

    temp = TempGrid{n_traj}(ti,tf) 

    # MC simulation details

    mc_cycles = 1000 #default 20% equilibration cycles on top


    mc_sample = 1  #sample every mc_sample MC cycles

    #move_atom=AtomMove(n_atoms) #move strategy (here only atom moves, n_atoms per MC cycle)
    displ_atom = 0.1 # Angstrom
    n_adjust = 100

    max_displ_atom = [0.1*sqrt(displ_atom*temp.t_grid[i]) for i in 1:n_traj]

    mc_params = MCParams(mc_cycles, n_traj, n_atoms, mc_sample = mc_sample, n_adjust = n_adjust)


    #-------------------------------------------------------------#
    #----------------------Potential------------------------------#
    #-------------------------------------------------------------#

    c=[-10.5097942564988, 989.725135614556, -101383.865938807, 3918846.12841668, -56234083.4334278, 288738837.441765]
    pot = ELJPotentialEven{6}(c)


    a=[0.0005742,-0.4032,-0.2101,-0.0595,0.0606,0.1608]
    b=[-0.01336,-0.02005,-0.1051,-0.1268,-0.1405,-0.1751]
    c1=[-0.1132,-1.5012,35.6955,-268.7494,729.7605,-583.4203]
    potB = ELJPotentialB{6}(a,b,c1)
    #-------------------------------------------------------------#
    #------------------------Move Strategy------------------------#
    #-------------------------------------------------------------#
    ensemble = NVT(n_atoms)
    move_strat = MoveStrategy(ensemble)

    #-------------------------------------------------------------#
    #-----------------------Starting Config-----------------------#
    #-------------------------------------------------------------#
    #starting configurations
    #icosahedral ground state of Ne13 (from Cambridge cluster database) in Angstrom
    pos_ne13 = [[2.825384495892464, 0.928562467914040, 0.505520149314310],
    [2.023342172678102,	-2.136126268595355, 0.666071287554958],
    [2.033761811732818,	-0.643989413759464, -2.133000349161121],
    [0.979777205108572,	2.312002562803556, -1.671909307631893],
    [0.962914279874254,	-0.102326586625353, 2.857083360096907],
    [0.317957619634043,	2.646768968413408, 1.412132053672896],
    [-2.825388342924982, -0.928563755928189, -0.505520471387560],
    [-0.317955944853142, -2.646769840660271, -1.412131825293682],
    [-0.979776174195320, -2.312003751825495, 1.671909138648006],
    [-0.962916072888105, 0.102326392265998,	-2.857083272537599],
    [-2.023340541398004, 2.136128558801072,	-0.666071089291685],
    [-2.033762834001679, 0.643989905095452, 2.132999911364582],
    [0.000002325340981,	0.000000762100600, 0.000000414930733]]

    #convert to Bohr
    AtoBohr = 1.8897259886
    pos_ne13 = pos_ne13 * AtoBohr

    #binding sphere
    bc_ne13 = SphericalBC(radius=5.32*AtoBohr) 

    length(pos_ne13) == n_atoms || error("number of atoms and positions not the same - check starting config")

    start_config = Config(pos_ne13, bc_ne13)

    mc_states,move_strategy,results,n_steps,start_counter = initialisation(mc_params,temp,start_config,pot,ensemble)
    @testset "equilibration_cycle!" begin
        Random.seed!(1)
        @test equilibration_cycle!(mc_states, move_strategy, mc_params, pot, ensemble, n_steps, results) ≂ include(joinpath(@__DIR__, "testing_data/equilibration_cycle.jl"))
    end

    @testset "equilibration" begin
        Random.seed!(1)
        @test equilibration(mc_states, move_strategy, mc_params, pot, ensemble, n_steps, results, false) ≂ include(joinpath(@__DIR__, "testing_data/equilibration.jl"))
    end

    @testset "ptmc_run!" begin
        Random.seed!(1)
        open(joinpath(@__DIR__, "testing_data/ptmc_run.data"), "w") do io
            redirect_stdout(io) do
                ptmc_run!(mc_params,temp,start_config,pot,ensemble;save=1000) 
            end
        end
        @test read(joinpath(@__DIR__, "testing_data/ptmc_run.data"), String) ≂ read(joinpath(@__DIR__, "testing_data/ptmc_run_ref.data"), String)

        Random.seed!(1)
        cd(joinpath(@__DIR__, "testing_data"))
        #Way of determining whether code runs without error, as a unit test.
        @test ptmc_run!(true) isa Any
        cd(joinpath(@__DIR__, ".."))
    end
end

@testset "Sampling.jl" begin
    include(random_test_samples_and_test_results["Sampling"])

    mc_params = MCParams(100, 10, 10)
    temp = TempGrid{10}(0.5, 5)
    bc = CubicBC(4.0)
    npt = NPT(10, 101325)
    nvt = NVT(10)
    config = Config(random_test_samples[:pos], bc)
    a=[0.0005742,-0.4032,-0.2101,-0.0595,0.0606,0.1608]
    b=[-0.01336,-0.02005,-0.1051,-0.1268,-0.1405,-0.1751]
    c1=[-0.1132,-1.5012,35.6955,-268.7494,729.7605,-583.4203]
    eljpot_b = ELJPotentialB{6}(a,b,c1)

    npt_states, npt_strategy, npt_results, npt_steps, npt_counter = initialisation(mc_params, temp, config, eljpot_b, npt)
    nvt_states, nvt_strategy, nvt_results, nvt_steps, nvt_counter = initialisation(mc_params, temp, config, eljpot_b, nvt)

    ebounds = [-0.006 , -0.002]

    npt_results=initialise_histograms!(mc_params,npt_results, ebounds,bc)
    nvt_results=initialise_histograms!(mc_params,nvt_results,ebounds,bc)


    for state in npt_states
        push!(state.ham, 0)
        push!(state.ham, 0)
    end
    for state in nvt_states
        push!(state.ham, 0)
        push!(state.ham, 0)
    end

    @testset "update_energy_tot" begin
        update_energy_tot(npt_states, npt)
        update_energy_tot(nvt_states, nvt)
        for i in 1:10
            @test npt_states[i].ham ≂ [6.484801988137965e6, 4.20526568253581e13]
        end

        for i in 1:10
            @test nvt_states[i].ham ≂ [3.1059200113743763, 9.646739117055805]
        end
    end

    @testset "find_hist_index" begin
        for i in 0.1:0.1:2
            @test test_results[:npt_index][Int(i*10)] == find_hist_index(npt_states[1], npt_results, i)
        end

        vec = Tuple{Int, Int}[]
        for i in 0.1:0.1:2
            for j in 0.1:0.1:2
                push!(vec, find_hist_index(npt_states[1], npt_results, i, j))
            end
        end
        @test test_results[:npt_index2] ≂ vec
    end

    @testset "initialise_histograms!" begin
        sphere = SphericalBC(4.0)
        cubic = CubicBC(4.0)
        rhombic = RhombicBC(4.0, 6.)

        nvt_states, nvt_strategy, cubicresults, nvt_steps, nvt_counter = initialisation(mc_params, temp, Config(random_test_samples[:pos], cubic), eljpot_b, nvt)
        nvt_states, nvt_strategy, rhombicresults, nvt_steps, nvt_counter = initialisation(mc_params, temp, Config(random_test_samples[:pos], rhombic), eljpot_b, nvt)
        nvt_states, nvt_strategy, spheresults, nvt_steps, nvt_counter = initialisation(mc_params, temp, Config(random_test_samples[:pos], sphere), eljpot_b, nvt)

        spher = initialise_histograms!(mc_params, spheresults, ebounds, sphere)
        cub = initialise_histograms!(mc_params, cubicresults, ebounds, cubic)
        rhom = initialise_histograms!(mc_params, rhombicresults, ebounds, rhombic)
        
        @test spher ≂ test_results[:spher]
        @test cub ≂ include(joinpath(@__DIR__, "testing_data/cubic_hist.data"))
        @test rhom ≂ include(joinpath(@__DIR__, "testing_data/rhombic_hist.data"))
    end

    @testset "update_histograms!" begin
        for i in 0.1:0.1:2
            update_histograms!(npt_states, npt_results, i)
            @test test_results[:update_hist][Int(10*i)] ≂ npt_results.en_histogram
        end

        for i in [0.5, 1, 1.5]
            for j in [0.5, 1, 1.5]
                update_histograms!(npt_states, npt_results, i, j)
                @test test_results[:update_hist2][Int(2*j+(i-0.5)*6)] ≂ npt_results.en_histogram
            end
        end
    end

    @testset "rdf_index" begin
        for i in 5:-1:1
            for j in 1:5
                @test test_results[:rdf_index][j + 5*(5-i)] ≂ rdf_index(i, j)
            end
        end
    end

    @testset "update_rdf!" begin
        for i in 0.1:0.1:0.5
            update_rdf!(npt_states, npt_results, i)
            @test test_results[:update_rdf][Int(10*i)] ≂ npt_results.rdf
        end
    end
    sphere = SphericalBC(4.)
    nvt_states, nvt_strategy, spheresults, nvt_steps, nvt_counter = initialisation(mc_params, temp, Config(random_test_samples[:pos], sphere), eljpot_b, nvt)
    spheresults = initialise_histograms!(mc_params, spheresults, ebounds, sphere)
    for state in nvt_states
        push!(state.ham, 0)
        push!(state.ham, 0)
    end
    for state in npt_states
        push!(state.ham, 0)
        push!(state.ham, 0)
    end

    @testset "sampling_step!" begin
        begin
            sampling_step!(mc_params, nvt_states, nvt, 0, spheresults, false)
            @test (nvt_states, spheresults) ≂ include(joinpath(@__DIR__, "testing_data/sampling_step_rdf_false.data"))
        end
        
        begin
            sampling_step!(mc_params, nvt_states, nvt, 0, spheresults, true)
            @test (nvt_states, spheresults) ≂ include(joinpath(@__DIR__, "testing_data/sampling_step_rdf_true.data"))
        end
        begin
            sampling_step!(mc_params, npt_states, npt, 0, npt_results, false)
            @test (npt_states, npt_results) ≂ include(joinpath(@__DIR__, "testing_data/sampling_step_npt.data"))
        end
    end

    @testset "finalise_results" begin
        @test finalise_results(npt_states, mc_params, npt_results) ≂ include(joinpath(@__DIR__, "testing_data/finalise_results.data"))
    end
end

@testset "MCStates" begin
end



@testset "Potentials" begin 
    include("test_potentials.jl")
end

@testset "States" begin
    include("test_states.jl")
end

@testset "Checkpoints" begin
    include("checkpoint_test.jl")
end

@safetestset "RuNNer" begin
    #include("test_runner_forward.jl")
end


# @safetestset "script testing" begin
#     function read_save_data(filename)
#         readfile = open(filename, "r+")
#         filecontents = readdlm(readfile)
#         step, configdata = read_input(filecontents)
#         close(readfile)
#         return step, configdata
#     end
#     mycompare(a, b) = a == b
#     mycompare(a::Number, b::Number) = a ≈ b

#     println("starting script testing. Hang on tight ...")
#     @testset "Cu55" begin
#         include("test_Cu55.jl")
#         # 46.922331 seconds (765.86 M allocations: 57.507 GiB, 10.54% gc time, 0.01% compilation time)

#         step, configdata = read_save_data("save.data")
#         # reference data has been produced on a single thread
#         step_ref, configdata_ref = read_save_data("testing_data/save.data")

#         @test step == step_ref # the script successfully finished

#         # The matrix `configdata` has strings and numbers
#         @test all(mycompare.(configdata, configdata_ref)) # identical configurations

#         # clean up
#         rm("save.data")
#         rm("params.data")
#     end
# end

@safetestset "multihist" begin
    include("multihist_test.jl")
end