module Multihistogram

export multihistogram,initialise,systemsolver,bvector,amatrix,Entropycalc,analysis


using Statistics
using StaticArrays
using BenchmarkTools
using Plots
using DelimitedFiles
using LinearAlgebra

using ..BoundaryConditions
using ..Configurations
using ..InputParams
using ..EnergyEvaluation
using ..MCRun_old


Ehistogram_0=[[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.0, 66.0, 694.0, 3117.0, 9450.0, 20563.0, 35494.0, 50479.0, 61027.0, 64498.0, 61803.0, 53795.0, 43493.0, 32532.0, 22955.0, 15279.0, 10055.0, 6134.0, 3837.0, 2144.0, 1169.0, 693.0, 379.0, 172.0, 94.0, 42.0, 21.0, 9.0, 2.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.0, 36.0, 419.0, 2153.0, 7029.0, 15933.0, 29243.0, 43469.0, 54805.0, 61848.0, 61787.0, 56328.0, 47104.0, 37598.0, 27688.0, 19687.0, 13155.0, 8389.0, 5354.0, 3209.0, 1999.0, 1210.0, 715.0, 359.0, 187.0, 114.0, 66.0, 49.0, 33.0, 14.0, 13.0, 3.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 26.0, 280.0, 1458.0, 5027.0, 11919.0, 23165.0, 36410.0, 47971.0, 56432.0, 59456.0, 57303.0, 50650.0, 41996.0, 32814.0, 24148.0, 17222.0, 11666.0, 7849.0, 5190.0, 3242.0, 2081.0, 1302.0, 791.0, 548.0, 332.0, 225.0, 181.0, 118.0, 75.0, 47.0, 31.0, 18.0, 15.0, 6.0, 6.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 20.0, 212.0, 1068.0, 3672.0, 9136.0, 18021.0, 29549.0, 41125.0, 50867.0, 56036.0, 56357.0, 52332.0, 45530.0, 37665.0, 28958.0, 21473.0, 15526.0, 10860.0, 7394.0, 5020.0, 3202.0, 2115.0, 1305.0, 841.0, 530.0, 369.0, 265.0, 173.0, 139.0, 98.0, 64.0, 36.0, 24.0, 7.0, 8.0, 2.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 14.0, 160.0, 696.0, 2625.0, 6791.0, 13802.0, 23796.0, 34646.0, 44926.0, 51633.0, 54124.0, 52665.0, 47942.0, 40788.0, 33174.0, 25691.0, 19385.0, 14354.0, 10035.0, 6996.0, 4789.0, 3272.0, 2279.0, 1495.0, 1090.0, 798.0, 574.0, 411.0, 373.0, 237.0, 180.0, 125.0, 58.0, 47.0, 16.0, 4.0, 5.0, 4.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 70.0, 450.0, 1728.0, 4856.0, 10515.0, 18530.0, 28594.0, 38605.0, 46266.0, 50335.0, 51636.0, 49086.0, 43507.0, 37096.0, 30196.0, 23666.0, 18013.0, 13207.0, 9564.0, 6751.0, 4807.0, 3443.0, 2526.0, 1771.0, 1308.0, 968.0, 769.0, 504.0, 361.0, 295.0, 173.0, 137.0, 95.0, 56.0, 46.0, 29.0, 17.0, 12.0, 6.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 6.0, 54.0, 295.0, 1155.0, 3427.0, 7930.0, 14581.0, 22973.0, 32185.0, 39893.0, 45567.0, 48330.0, 47694.0, 44555.0, 39930.0, 33761.0, 27638.0, 22061.0, 17271.0, 12984.0, 9624.0, 7186.0, 5285.0, 3948.0, 2859.0, 2251.0, 1720.0, 1273.0, 914.0, 700.0, 534.0, 425.0, 267.0, 209.0, 145.0, 107.0, 88.0, 57.0, 36.0, 30.0, 22.0, 18.0, 9.0, 2.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 25.0, 196.0, 780.0, 2395.0, 5609.0, 10996.0, 18263.0, 26401.0, 34522.0, 40830.0, 45065.0, 46281.0, 44828.0, 41521.0, 36152.0, 30777.0, 25390.0, 19950.0, 15835.0, 12205.0, 9475.0, 7265.0, 5738.0, 4342.0, 3494.0, 2751.0, 2070.0, 1648.0, 1340.0, 1025.0, 744.0, 543.0, 430.0, 329.0, 270.0, 174.0, 130.0, 102.0, 54.0, 29.0, 15.0, 4.0, 5.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 20.0, 113.0, 508.0, 1725.0, 4036.0, 8029.0, 13586.0, 20852.0, 28100.0, 34320.0, 39616.0, 41586.0, 42567.0, 40430.0, 37414.0, 33225.0, 28447.0, 23929.0, 19476.0, 15776.0, 12894.0, 10415.0, 8293.0, 6772.0, 5652.0, 4674.0, 3732.0, 3116.0, 2517.0, 1996.0, 1619.0, 1194.0, 957.0, 701.0, 544.0, 410.0, 240.0, 185.0, 102.0, 69.0, 52.0, 31.0, 22.0, 14.0, 18.0, 12.0, 4.0, 4.0, 1.0, 3.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 16.0, 77.0, 301.0, 1081.0, 2675.0, 5527.0, 9606.0, 15535.0, 21933.0, 28011.0, 33293.0, 37153.0, 38708.0, 38513.0, 36812.0, 33862.0, 30320.0, 26391.0, 22409.0, 19340.0, 16374.0, 13468.0, 11225.0, 9540.0, 8076.0, 6960.0, 5936.0, 4960.0, 4317.0, 3679.0, 3005.0, 2444.0, 1953.0, 1618.0, 1288.0, 964.0, 720.0, 577.0, 408.0, 287.0, 199.0, 141.0, 94.0, 91.0, 47.0, 27.0, 20.0, 7.0, 5.0, 5.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 9.0, 37.0, 201.0, 656.0, 1681.0, 3888.0, 7246.0, 11705.0, 17033.0, 22613.0, 27768.0, 31808.0, 34893.0, 35490.0, 35219.0, 33348.0, 30957.0, 27749.0, 24757.0, 21617.0, 18856.0, 16252.0, 14154.0, 12072.0, 10550.0, 9481.0, 8134.0, 7058.0, 6281.0, 5613.0, 4658.0, 3947.0, 3222.0, 2574.0, 2051.0, 1602.0, 1237.0, 956.0, 759.0, 536.0, 388.0, 268.0, 210.0, 124.0, 86.0, 70.0, 54.0, 44.0, 20.0, 20.0, 15.0, 11.0, 11.0, 8.0, 2.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 6.0, 20.0, 124.0, 435.0, 1174.0, 2553.0, 4771.0, 8211.0, 12383.0, 16606.0, 21344.0, 25004.0, 27876.0, 29910.0, 30406.0, 29711.0, 28441.0, 26698.0, 24658.0, 22751.0, 20480.0, 18579.0, 17132.0, 15551.0, 14481.0, 13343.0, 12031.0, 10965.0, 9845.0, 8969.0, 7723.0, 6723.0, 6136.0, 5094.0, 4302.0, 3525.0, 2813.0, 2186.0, 1738.0, 1367.0, 1115.0, 798.0, 624.0, 415.0, 320.0, 225.0, 159.0, 99.0, 75.0, 47.0, 19.0, 13.0, 16.0, 3.0, 1.0, 4.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4.0, 15.0, 68.0, 217.0, 621.0, 1333.0, 2860.0, 5116.0, 7710.0, 11364.0, 14776.0, 18419.0, 21265.0, 23259.0, 25082.0, 25979.0, 25569.0, 25080.0, 23974.0, 22531.0, 21415.0, 19985.0, 18729.0, 17682.0, 16938.0, 15897.0, 15100.0, 13960.0, 13020.0, 12289.0, 11403.0, 10405.0, 9627.0, 8786.0, 7454.0, 6513.0, 5582.0, 4574.0, 3642.0, 2880.0, 2252.0, 1713.0, 1265.0, 1030.0, 707.0, 517.0, 396.0, 328.0, 200.0, 153.0, 99.0, 81.0, 45.0, 39.0, 15.0, 16.0, 12.0, 6.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.0, 31.0, 116.0, 351.0, 832.0, 1729.0, 2975.0, 5084.0, 7405.0, 10186.0, 12948.0, 15487.0, 17495.0, 19334.0, 20669.0, 21254.0, 21188.0, 21372.0, 20490.0, 20270.0, 19575.0, 19209.0, 18539.0, 17972.0, 17975.0, 17727.0, 17070.0, 16653.0, 16044.0, 15319.0, 14310.0, 13517.0, 12050.0, 10965.0, 9701.0, 8561.0, 7210.0, 6171.0, 5055.0, 4133.0, 3317.0, 2588.0, 2046.0, 1493.0, 1095.0, 785.0, 559.0, 398.0, 259.0, 195.0, 102.0, 62.0, 52.0, 24.0, 20.0, 12.0, 6.0, 5.0, 2.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 2.0, 7.0, 65.0, 195.0, 448.0, 969.0, 1700.0, 2839.0, 4209.0, 5867.0, 7949.0, 9874.0, 11897.0, 13386.0, 14540.0, 15810.0, 16207.0, 16546.0, 16759.0, 17186.0, 17053.0, 17470.0, 17697.0, 17682.0, 18426.0, 18647.0, 19107.0, 19172.0, 19185.0, 19195.0, 18796.0, 18229.0, 17285.0, 16085.0, 14355.0, 12934.0, 11567.0, 9987.0, 8490.0, 7145.0, 5798.0, 4674.0, 3692.0, 2974.0, 2182.0, 1602.0, 1236.0, 927.0, 612.0, 461.0, 330.0, 204.0, 138.0, 91.0, 54.0, 29.0, 12.0, 7.0, 4.0, 5.0, 2.0, 0.0, 2.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 11.0, 30.0, 65.0, 206.0, 485.0, 886.0, 1548.0, 2425.0, 3490.0, 4873.0, 6106.0, 7499.0, 8880.0, 10115.0, 10964.0, 11907.0, 12348.0, 12848.0, 13533.0, 13852.0, 14764.0, 15631.0, 16365.0, 17363.0, 18689.0, 19425.0, 20533.0, 21237.0, 21620.0, 21831.0, 21622.0, 20617.0, 19734.0, 18573.0, 17205.0, 15463.0, 13639.0, 11999.0, 10371.0, 8751.0, 7216.0, 5889.0, 4646.0, 3628.0, 2916.0, 2192.0, 1622.0, 1201.0, 877.0, 648.0, 455.0, 400.0, 257.0, 170.0, 131.0, 89.0, 47.0, 42.0, 24.0, 14.0, 12.0, 7.0, 7.0, 2.0, 2.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 15.0, 44.0, 117.0, 231.0, 427.0, 765.0, 1196.0, 1878.0, 2558.0, 3487.0, 4317.0, 5004.0, 5998.0, 6781.0, 7707.0, 8404.0, 8924.0, 9930.0, 10806.0, 11457.0, 12753.0, 13854.0, 15279.0, 16696.0, 18220.0, 19402.0, 20868.0, 22252.0, 23151.0, 23732.0, 23652.0, 23640.0, 22683.0, 21251.0, 19757.0, 18245.0, 16317.0, 14332.0, 12511.0, 10529.0, 8836.0, 7249.0, 5861.0, 4636.0, 3608.0, 2818.0, 2188.0, 1575.0, 1142.0, 848.0, 586.0, 399.0, 269.0, 232.0, 175.0, 123.0, 75.0, 60.0, 35.0, 27.0, 22.0, 17.0, 15.0, 7.0, 10.0, 5.0, 2.0, 2.0, 2.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 6.0, 13.0, 37.0, 85.0, 223.0, 423.0, 663.0, 1008.0, 1403.0, 1963.0, 2548.0, 3181.0, 3817.0, 4434.0, 5130.0, 5657.0, 6178.0, 6981.0, 7792.0, 8647.0, 10009.0, 11411.0, 12806.0, 14525.0, 15760.0, 17938.0, 19605.0, 21565.0, 23052.0, 23586.0, 24613.0, 24666.0, 24620.0, 23549.0, 22767.0, 21578.0, 19930.0, 17866.0, 16079.0, 13983.0, 12093.0, 10195.0, 8273.0, 6804.0, 5487.0, 4493.0, 3430.0, 2647.0, 1933.0, 1375.0, 977.0, 691.0, 491.0, 354.0, 232.0, 172.0, 91.0, 72.0, 39.0, 23.0, 7.0, 11.0, 4.0, 4.0, 0.0, 2.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 7.0, 13.0, 20.0, 42.0, 111.0, 183.0, 321.0, 457.0, 719.0, 989.0, 1353.0, 1687.0, 2008.0, 2440.0, 2983.0, 3490.0, 3953.0, 4738.0, 5451.0, 6265.0, 7079.0, 8310.0, 9613.0, 11090.0, 13086.0, 14651.0, 16661.0, 18389.0, 20618.0, 22119.0, 23427.0, 25037.0, 25574.0, 25863.0, 25207.0, 24308.0, 23020.0, 21604.0, 19439.0, 17566.0, 15592.0, 13629.0, 11618.0, 9908.0, 8206.0, 6811.0, 5591.0, 4409.0, 3543.0, 2777.0, 2071.0, 1538.0, 1223.0, 878.0, 717.0, 479.0, 376.0, 262.0, 181.0, 115.0, 53.0, 60.0, 30.0, 14.0, 15.0, 3.0, 7.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 6.0, 10.0, 15.0, 49.0, 84.0, 160.0, 232.0, 373.0, 549.0, 701.0, 926.0, 1237.0, 1405.0, 1849.0, 2076.0, 2484.0, 3194.0, 3708.0, 4377.0, 5033.0, 6103.0, 7204.0, 8348.0, 9737.0, 11519.0, 13566.0, 15497.0, 17688.0, 20018.0, 21565.0, 23221.0, 24454.0, 25564.0, 25788.0, 25867.0, 25103.0, 24036.0, 22886.0, 21154.0, 19368.0, 17351.0, 15474.0, 13215.0, 11285.0, 9482.0, 7808.0, 6219.0, 5075.0, 4115.0, 3169.0, 2452.0, 1980.0, 1426.0, 1133.0, 784.0, 583.0, 413.0, 291.0, 199.0, 144.0, 106.0, 52.0, 43.0, 17.0, 16.0, 5.0, 3.0, 2.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 4.0, 6.0, 15.0, 36.0, 65.0, 117.0, 178.0, 261.0, 383.0, 576.0, 625.0, 917.0, 1052.0, 1264.0, 1586.0, 1871.0, 2263.0, 2673.0, 3253.0, 4013.0, 4966.0, 5900.0, 7420.0, 8911.0, 10622.0, 12626.0, 14684.0, 17088.0, 18863.0, 21309.0, 22727.0, 24424.0, 25329.0, 26277.0, 26523.0, 25991.0, 25211.0, 24293.0, 22354.0, 20665.0, 18712.0, 16345.0, 14504.0, 12209.0, 10469.0, 8594.0, 7143.0, 5894.0, 4780.0, 3574.0, 2718.0, 2187.0, 1632.0, 1189.0, 881.0, 577.0, 400.0, 306.0, 182.0, 115.0, 70.0, 54.0, 44.0, 32.0, 21.0, 10.0, 6.0, 2.0, 2.0, 2.0, 2.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 6.0, 12.0, 13.0, 52.0, 68.0, 105.0, 177.0, 240.0, 324.0, 421.0, 572.0, 658.0, 785.0, 1006.0, 1296.0, 1735.0, 2121.0, 2625.0, 3326.0, 4166.0, 5245.0, 6473.0, 7929.0, 9814.0, 11558.0, 13771.0, 15761.0, 17646.0, 20410.0, 22139.0, 23894.0, 24728.0, 25860.0, 26098.0, 26235.0, 25715.0, 24842.0, 23349.0, 21511.0, 19760.0, 17754.0, 15975.0, 13744.0, 11639.0, 9936.0, 8377.0, 6948.0, 5510.0, 4321.0, 3489.0, 2635.0, 1942.0, 1490.0, 1150.0, 777.0, 610.0, 382.0, 297.0, 176.0, 150.0, 89.0, 62.0, 42.0, 27.0, 10.0, 13.0, 2.0, 4.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.0, 1.0, 17.0, 23.0, 28.0, 66.0, 79.0, 106.0, 149.0, 224.0, 267.0, 361.0, 501.0, 560.0, 738.0, 1062.0, 1263.0, 1721.0, 2156.0, 2832.0, 3777.0, 4681.0, 5830.0, 7315.0, 9027.0, 10897.0, 12746.0, 14968.0, 17067.0, 19430.0, 21369.0, 22993.0, 24538.0, 25425.0, 26362.0, 26304.0, 25580.0, 25144.0, 23688.0, 22128.0, 20686.0, 18776.0, 16629.0, 14703.0, 12662.0, 10862.0, 8960.0, 7667.0, 6323.0, 4955.0, 3963.0, 3283.0, 2337.0, 1817.0, 1320.0, 982.0, 747.0, 530.0, 362.0, 281.0, 216.0, 155.0, 124.0, 97.0, 54.0, 48.0, 16.0, 7.0, 6.0, 2.0, 3.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 1.0, 7.0, 8.0, 21.0, 43.0, 51.0, 71.0, 102.0, 132.0, 151.0, 234.0, 281.0, 358.0, 481.0, 678.0, 900.0, 1112.0, 1525.0, 1886.0, 2453.0, 3209.0, 4255.0, 5411.0, 6732.0, 8203.0, 9924.0, 11734.0, 13952.0, 16240.0, 18086.0, 20216.0, 21859.0, 23457.0, 24409.0, 25197.0, 25400.0, 25703.0, 24667.0, 24224.0, 22851.0, 21371.0, 19753.0, 17850.0, 16023.0, 13911.0, 12213.0, 10520.0, 8656.0, 7238.0, 6044.0, 4644.0, 3775.0, 3013.0, 2313.0, 1734.0, 1287.0, 1001.0, 695.0, 489.0, 365.0, 244.0, 220.0, 151.0, 95.0, 78.0, 40.0, 18.0, 14.0, 10.0, 2.0, 2.0, 1.0, 2.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0],
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.0, 1.0, 2.0, 13.0, 14.0, 13.0, 30.0, 46.0, 65.0, 88.0, 106.0, 159.0, 208.0, 283.0, 404.0, 519.0, 674.0, 906.0, 1302.0, 1735.0, 2200.0, 2900.0, 3851.0, 4974.0, 6361.0, 7883.0, 9610.0, 11713.0, 13642.0, 16083.0, 17982.0, 20212.0, 21586.0, 23632.0, 24474.0, 25378.0, 25965.0, 25765.0, 24897.0, 23880.0, 22947.0, 21524.0, 19969.0, 17799.0, 16021.0, 14083.0, 12231.0, 10405.0, 8892.0, 7382.0, 6078.0, 5191.0, 4092.0, 3269.0, 2580.0, 1993.0, 1595.0, 1217.0, 856.0, 678.0, 487.0, 312.0, 239.0, 175.0, 123.0, 84.0, 61.0, 57.0, 35.0, 25.0, 19.0, 13.0, 5.0, 3.0, 1.0, 0.0, 0.0, 0.0, 0.0],
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 4.0, 4.0, 5.0, 12.0, 10.0, 21.0, 37.0, 31.0, 59.0, 87.0, 130.0, 164.0, 247.0, 318.0, 419.0, 636.0, 904.0, 1158.0, 1541.0, 2080.0, 2816.0, 3814.0, 4810.0, 6087.0, 7825.0, 9508.0, 11396.0, 13127.0, 15295.0, 17299.0, 19279.0, 21388.0, 23121.0, 24181.0, 25056.0, 25302.0, 25568.0, 25326.0, 24412.0, 23322.0, 21743.0, 20334.0, 18334.0, 16407.0, 14614.0, 12736.0, 11218.0, 9223.0, 7815.0, 6273.0, 5386.0, 4278.0, 3296.0, 2715.0, 2230.0, 1728.0, 1284.0, 961.0, 754.0, 488.0, 389.0, 292.0, 203.0, 161.0, 98.0, 62.0, 55.0, 44.0, 33.0, 14.0, 10.0, 12.0, 6.0, 2.0, 0.0, 1.0, 1.0],
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 2.0, 2.0, 0.0, 3.0, 3.0, 7.0, 11.0, 9.0, 27.0, 33.0, 45.0, 57.0, 79.0, 120.0, 167.0, 232.0, 319.0, 414.0, 581.0, 730.0, 1057.0, 1428.0, 1834.0, 2555.0, 3265.0, 4293.0, 5494.0, 6935.0, 8386.0, 10318.0, 12197.0, 14451.0, 16246.0, 18383.0, 20195.0, 21913.0, 23275.0, 24242.0, 25158.0, 25097.0, 25294.0, 24568.0, 23358.0, 22437.0, 20799.0, 19389.0, 17513.0, 15557.0, 13814.0, 11875.0, 10281.0, 8785.0, 7321.0, 6088.0, 5043.0, 4060.0, 3311.0, 2649.0, 2012.0, 1617.0, 1244.0, 976.0, 725.0, 536.0, 389.0, 268.0, 204.0, 131.0, 77.0, 40.0, 34.0, 19.0, 12.0, 4.0, 5.0, 1.0, 0.0, 0.0, 0.0],
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 8.0, 6.0, 10.0, 21.0, 30.0, 40.0, 69.0, 85.0, 108.0, 175.0, 288.0, 363.0, 502.0, 764.0, 1049.0, 1475.0, 2015.0, 2712.0, 3499.0, 4417.0, 5591.0, 6656.0, 8294.0, 10177.0, 12204.0, 14043.0, 16049.0, 17870.0, 19446.0, 21144.0, 22573.0, 23492.0, 23970.0, 24431.0, 24442.0, 23842.0, 23266.0, 22291.0, 20905.0, 19373.0, 17880.0, 15958.0, 14308.0, 12615.0, 11020.0, 9479.0, 8069.0, 6630.0, 5472.0, 4584.0, 3677.0, 2940.0, 2307.0, 1836.0, 1424.0, 1105.0, 848.0, 586.0, 428.0, 344.0, 233.0, 162.0, 114.0, 100.0, 62.0, 46.0, 29.0, 16.0, 11.0, 7.0, 5.0, 4.0],
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 1.0, 2.0, 5.0, 8.0, 10.0, 6.0, 11.0, 18.0, 29.0, 38.0, 62.0, 72.0, 113.0, 145.0, 220.0, 322.0, 450.0, 635.0, 921.0, 1247.0, 1727.0, 2309.0, 3115.0, 3943.0, 4955.0, 6313.0, 7660.0, 9382.0, 10887.0, 12746.0, 14692.0, 16892.0, 18486.0, 20157.0, 21443.0, 22584.0, 23631.0, 23914.0, 24269.0, 23979.0, 23451.0, 22543.0, 21445.0, 19951.0, 18610.0, 16970.0, 15368.0, 13625.0, 12065.0, 10259.0, 8993.0, 7712.0, 6313.0, 5219.0, 4355.0, 3575.0, 2913.0, 2200.0, 1745.0, 1319.0, 1013.0, 730.0, 577.0, 426.0, 339.0, 268.0, 178.0, 126.0, 110.0, 76.0, 41.0, 22.0, 16.0, 14.0, 14.0],
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 2.0, 5.0, 10.0, 4.0, 9.0, 13.0, 18.0, 22.0, 28.0, 24.0, 35.0, 76.0, 110.0, 179.0, 229.0, 350.0, 530.0, 761.0, 1162.0, 1499.0, 2157.0, 2875.0, 3791.0, 4677.0, 5859.0, 7339.0, 8748.0, 10476.0, 12298.0, 14075.0, 16050.0, 17882.0, 19567.0, 21133.0, 22375.0, 23336.0, 23850.0, 24285.0, 24081.0, 23482.0, 22884.0, 21657.0, 20307.0, 19140.0, 17638.0, 15620.0, 14203.0, 12472.0, 11021.0, 9543.0, 7957.0, 6869.0, 5607.0, 4609.0, 3703.0, 2962.0, 2452.0, 1919.0, 1463.0, 1104.0, 907.0, 656.0, 488.0, 378.0, 290.0, 213.0, 167.0, 113.0, 77.0, 56.0, 53.0, 17.0, 18.0]]


NPoints = 600
function initialise(xdir)
    # Read in hist.data to obtain constants
    #f = open("$(xdir)histE.data", "r+")
    #datafile=readdlm(f)
    #kB = datafile[1]
    #NTraj = datafile[2]
    #T = copy(datafile[3,:])
   # emin = datafile[4,1]
    #emax = datafile[4,2]
    #NBins = datafile[4,3]
    #T = temp.t_grid
    #emin = datafile[4,1]
    #emax = datafile[4,2]
    NTraj = n_traj
    NBins = Ebins
    beta = temp.beta_grid
    #de = (emax-emin)/(NBins-1)
    #Below we initialise the histogram array
    HistArray = Array{Float64}(undef,NTraj,NBins)
    for i=1:NTraj
        for j=1:NBins
            HistArray[i,j]=Ehistogram_0[i][j]
        end
    end
    nsum = zeros(NBins)
    
    #for i in 1:NTraj
        #c = open("$(xdir)histE.$i", "r")
        #hist = readdlm(c)
        #HistArray[i,:] = hist[1:NBins,2] 
    #end

    println("Histograms Read")
    energyvector = [(j-1)*dE + Emin for j=1:NBins] #and the energies
    println(energyvector)
    for i in 1:NTraj
        #NB in Florent's original code this factor of NBins*i normalised everything
        HistArray[i,:] = HistArray[i,:]./(NBins)#*i)
    end
    println()
    println(HistArray[1,:])
    for j = 1:NBins
        nsum[j] = sum(HistArray[:,j])
    end
    
    #as it causes colossal headaches, we will now delete all rows
    #which have exactly 0 histogram counts. Trust me it's needed.
    k=1
    while k <= NBins

        if nsum[k] == 0
            deleteat!(nsum,k)
            deleteat!(energyvector,k)
            HistArray= HistArray[1:end,1:end .!=k]
            NBins -= 1
        else
            k=k+1
        end
    end
    #return HistArray,energyvector,beta,nsum,NTraj,NBins,kB
    return HistArray,energyvector,beta,nsum,NTraj,NBins
end



function nancheck(X :: Vector)
    N = length(X)
    check = 1
    for i=1:N
        if isnan(X[i]) == true
            check = 0
        end
    end
    return check
end
function nancheck(X::Matrix)
    check = 1
    N1 = size(X)[1]
    N2 = size(X)[2]
    for i = 1:N1
        for j = 1:N2
            if isnan(X[i,j]) == true
                check = 0
            end
        end
    end
    return check
end


function bvector(HistArray::Matrix,energyvector::Vector,beta::StaticArrays.SVector,nsum::Vector,NTraj,NBins)
    #Below we find the matrix of values n_{ij}*(ln(n_{ij} + beta_iE_j)
    #which appears frequently
    logmat = Array{Float64}(undef,NTraj,NBins)
    for i in 1:NTraj
        for j in 1:NBins
            logmat[i,j] = log(HistArray[i,j]) + beta[i]*energyvector[j]
        end
    end
    bmat = Array{Float64}(undef, NTraj,NBins)
    B = zeros(NTraj)
    rhvec = zeros(NBins)
    #The loop below guarantees we do not get values of NaN, as -inf*0.0 != -inf*false
    for i = 1:NTraj
        for j = 1:NBins
            if HistArray[i,j] == 0.0
                bmat[i,j] = 0.0
            else
                bmat[i,j] = HistArray[i,j]*logmat[i,j]
            end
        end
    end
    #the penultimate step is the vectors of length j to be summed in the rhterm
    for j=1:NBins
        rhvec[j] = sum(bmat[:,j])
    end
#Now we have our two matrices, the ith element is a sum over the energies for bmat-nij*rhvec
    for i in 1:NTraj 
        B[i] = sum( bmat[i,:] .- HistArray[i,:] .*rhvec./nsum )
    end
    println("B Vector Calculated")
    c = nancheck(B)
    if c == 0
        println("Problem with B")
    end

    return B,bmat
end
# We can now calculate the much simpler A Matrix, this has two terms
#One for all indices and one for diagonals
function amatrix(HistArray :: Matrix,nsum,NTraj,NBins)
    A = Array{Float64}(undef,NTraj,NTraj)

    for i = 1:NTraj
        for ip = 1:NTraj
            
            A[i,ip] = -sum(HistArray[i,:].*HistArray[ip,:]./nsum[:])
            
            if i == ip
                A[i,ip] += sum(HistArray[i,:])
            end
        end
    end
    println("A Matrix Calculated")
    c = nancheck(A) #this function identifies any NaNs now before they cause problems
    if c == 0
        println("Problem with A")
    end

    return A
end
#This function translates a solved vector alpha into Entropy
function Entropycalc(alpha::Vector, bmat:: Matrix, HistArray::Matrix,nsum,NBins,kB)
    S_E = []
    for j = 1:NBins 
        var = (sum(bmat[:,j] .- HistArray[:,j].*alpha))/nsum[j]
        push!(S_E,var)
    end
    


    return S_E
end
function analysis(energyvector:: Vector, S_E :: Vector, beta::StaticArrays.SVector,NPoints)
    println("hi")
    NBins = length(energyvector)
    Tvec = 1 ./ (kB*beta)
    dT = (last(Tvec) - 0.2)/NPoints
    T = [(i-1)*dT + 0.2 for i = 1:NPoints]
    println(T)
    #Initialise all relevant vectors
    y = Array{Float64}(undef,NPoints,NBins)
    XP = Array{Float64}(undef,NPoints,NBins)
    nexp = 0
    for x = [:Z, :U, :U2, :Cv, :dCv, :r2, :r3]
        @eval $x = Array{Float64}(undef,NPoints)
    end
    #below we begin the calculation of thermodynamic quantities
    for i = 1:NPoints
        #y is a matrix of free energy
        y[i,:] = S_E[:] .-energyvector[:]./(T[i]*kB)
        #here we set the zero of free energy
        nexp = maximum(y)
        #below we calculate the partition function
        @label start
        XP[i,:] = exp.(y[i,:].-nexp)
        Z[i] = sum(XP[i,:] )
        #this loop exists to make sure the scale of our partition function is sensible
        if Z[i] < 1.
            nexp -=2
            @goto start
        elseif Z[i] > 100.
            nexp +=2
            @goto start
        end
        U[i] = sum(XP[i,:].*energyvector[:])/Z[i]
        U2[i] = sum(XP[i,:].*energyvector[:].*energyvector[:])/Z[i]
        r2[i] = sum(XP[i,:].*(energyvector[:].-U[i] ).*(energyvector[:].-U[i] ) )/Z[i]
        r3[i] = sum(XP[i,:].*(energyvector[:].-U[i] ).*(energyvector[:].-U[i] ).*(energyvector[:].-U[i] ) )/Z[i]
        Cv[i] = (U2[i] - U[i]*U[i])/kB/(T[i]^2)
        dCv[i] = r3[i]/kB^2/T[i]^4 - 2*r2[i]/kB/T[i]^3
    end
    println(Cv)

    return Z,Cv,dCv,T
end

#Here we put it aaaaaalllll together
function systemsolver(HistArray,energyvector,beta,nsum,NTraj,NBins)
    #initialise the values
    #HistArray,energyvector,beta,nsum,NTraj,NBins,kB = initialise()
    #solve the b vector
    b,bmat = bvector(HistArray,energyvector,beta,nsum,NTraj,NBins)
    #solve the A matrix
    A = amatrix(HistArray,nsum,NTraj,NBins)
    #Check NaN
    c1 = nancheck(A)
    c2 = nancheck(b)
    if c1 == 1 && c2 == 1
        #If there isn't NaN we solve the system and get entropy
        alpha = A \ b
        #alpha = alpha.- alpha[NTraj]
        println("system solved!")
        S = Entropycalc(alpha, bmat, HistArray,nsum,NBins,kB)
        println("Entropy Found")
    else #if NaN is present we return an error
        println("system cannot be solved")
    end
    return alpha, S
    println("entropy is ", S)

end
function histplot(HistArray,energyvector,NTraj)
    histplt = plot(energyvector,HistArray[1,:], legend = false)
    for i = 2:NTraj
        histi = HistArray[i,:]
        histplt = plot!(histplt,energyvector,histi)
    end

    return histplt
end


function multihistogram(xdir::String)
    HistArray,energyvector,beta,nsum,NTraj,NBins = initialise(xdir)
    hist=histplot(HistArray,energyvector,NTraj)
    png(hist,"$(xdir)histo")
    alpha,S = systemsolver(HistArray,energyvector,beta,nsum,NTraj,NBins)
    Z,C,dC,T = analysis(energyvector,S,beta,NPoints)
    println(C)
    println("Quantities found")
    cvplot = plot(T,C,xlabel="Temperature (K)",ylabel="Heat Capacity")
    png(cvplot,"$(xdir)Cv")
    dcvplot = plot(T,dC,xlabel="Temperature(K)",ylabel="dCv")
    png(dcvplot,"$(xdir)dC")
    println("analysis complete")
    cvfile = open("$(xdir)analysis.NVT", "w")
    writedlm(cvfile, ["T" "Cv" "dCv"])
    writedlm(cvfile, [T C dC])
    close(cvfile)
        
end

multihistogram("/Users/tiantianyu/Downloads/ParallelTemperingMonteCarlo.jl-main/")

end