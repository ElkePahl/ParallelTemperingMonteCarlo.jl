using ParallelTemperingMonteCarlo

using Random


#set random seed - for reproducibility
Random.seed!(1234)

# number of atoms
n_atoms = 51

# temperature grid
ti = 5.
tf = 20.
n_traj = 32

temp = TempGrid{n_traj}(ti,tf) 

# MC simulation details

mc_cycles = 100000 #default 20% equilibration cycles on top


mc_sample = 1  #sample every mc_sample MC cycles

#move_atom=AtomMove(n_atoms) #move strategy (here only atom moves, n_atoms per MC cycle)
displ_atom = 0.1 # Angstrom
n_adjust = 100

max_displ_atom = [0.1*sqrt(displ_atom*temp.t_grid[i]) for i in 1:n_traj]

mc_params = MCParams(mc_cycles, n_traj, n_atoms, mc_sample = mc_sample, n_adjust = n_adjust)

#moves - allowed at present: atom, volume and rotation moves (volume,rotation not yet implemented)
move_strat = MoveStrategy(atom_moves = n_atoms)  

#ensemble
ensemble = NVT(n_atoms)

#c=[-10.5097942564988, 989.725135614556, -101383.865938807, 3918846.12841668, -56234083.4334278, 288738837.441765]
#pot = ELJPotentialEven{6}(c)

a=[0.0005742,-0.4032,-0.2101,-0.0595,0.0606,0.1608]
b=[-0.01336,-0.02005,-0.1051,-0.1268,-0.1405,-0.1751]
c=[-0.1132,-1.5012,35.6955,-268.7494,729.7605,-583.4203]
pot = ELJPotentialB{6}(a,b,c)

#starting configurations
#icosahedral ground state of Ne13 (from Cambridge cluster database) in Angstrom
pos_ne51 = [[0.11963124124837446, 2.5737827760048217, 3.4659011797934998],
[0.3159176657982616, -4.002265241213236, 2.6599766499984114],
[-0.9464811119283253, 2.197622489077975, 0.5697138621272033],
[-2.30691029172731, -0.7870779717711526, -3.533246818167173],
[1.7861870993048703, 4.903162237201827, 3.468797216875372],
[0.8608967134176572, -2.0671019623151303, 0.43539352954290617],
[3.472629906782415, -0.9774450385933967, 0.7784150835732235],
[0.9151060289265065, 5.588274338314975, -0.754996284358213],
[4.558539596854412, -3.0385898091837187, -1.0241443617914172],
[-2.946635065596428, 0.38114866478583204, 1.7022383006369493],
[-4.014246711897686, 0.011073359162923365, -1.1682602897796808],
[1.9192387731642218, -4.139216414298248, -1.3801183563396557],
[3.357459155807177, 5.631862542452346, 0.9466510204587528],
[5.027487489135709, -0.2731303363366741, -1.762510134534689],
[5.644388916826328, 4.044226989884292, 0.13923985234933817],
[-4.5953955047256505, -1.9231554746135633, 1.0899662205468024],
[-1.2440028769524862, -0.4081646009237528, -0.6187047940302818],
[-0.7448003061492504, -1.9236360273623998, 4.496708240554303],
[0.2884049661524222, 0.2967717063462114, -3.1009340339237697],
[4.090390593864853, 3.3169623929481724, 2.6480957045810083],
[-0.17930124634794625, -0.03382775277082335, 2.262428356584771],
[5.489166905372726, 2.4770400536827353, -2.4936700530218268],
[2.982777042425668, -3.749709409932528, 1.5068079587675476],
[1.922384743347118, -1.6989604264553513, 3.3245908484064324],
[5.209468975222988, 0.6614482937779036, 2.569959849809346],
[2.56502958500374, 2.605458119730473, 5.166029173655811],
[6.32914397922885, -1.3960737868299047, 0.7273412742347507],
[1.666403336458297, 3.293577317429978, 0.9125657288414812],
[-3.738776866531759, 2.6776321434352766, -0.007034288290087142],
[3.6824291470557613, -0.05343764617882656, 5.086520430655676],
[-3.389585941848843, -4.548458765873036, 1.0916675393374082],
[0.587300890013926, 2.947834953044656, -1.951370191094413],
[-1.7212392878346865, 4.480150315113006, -1.1110870459999074],
[2.4197097909566354, -1.382928544562948, -2.0882981765263593],
[-1.88734398355273, 0.7433693505922176, 4.573576984438924],
[4.7559643498349855, -2.132219602322111, 3.24586524070122],
[-2.650774994406987, 3.052888355547365, 2.889773590071312],
[-2.858719743033746, -2.668542266520845, -1.2591998245259046],
[2.8746207984797034, 1.3798637400761478, -2.7566620090624405],
[-0.7554415858790043, -4.384469961618528, -0.2165582048807049],
[3.208673279795, 4.029561619979965, -1.6288576728607655],
[-2.015987600516039, 1.8376988414550524, -2.3185349807976317],
[-1.7841457172199031, -2.2710965460365693, 1.614377930157008],
[1.3413323718794594, 0.6681296007026184, -0.24089866866821064],
[3.9362701146908425, 1.7555359390179301, 0.06749985020354986],
[-3.5275264038533, -1.5413534248261733, 3.988895914055395],
[-0.6413945799836995, 4.842104357753679, 1.7772819079086088],
[2.390278546375608, 1.03599617506404, 2.595929424960603],
[-0.19662595504489241, -2.456645643764361, -2.4455557254004354],
[6.767320784802061, 1.3829563806225915, 0.060808945126515974],
[0.8680046947827813, 0.3262396833023694, 5.1820514391231285]]


#convert to Bohr
#AtoBohr = 1.8897259886
#pos_ne13 = pos_ne13 * AtoBohr

length(pos_ne51) == n_atoms || error("number of atoms and positions not the same - check starting config")

#boundary conditions 
bc_ne51 = SphericalBC(radius=8.0)   

#starting configuration
start_config = Config(pos_ne51, bc_ne51)

#histogram information
n_bin = 100
#en_min = -0.006    #might want to update after equilibration run if generated on the fly
#en_max = -0.001    #otherwise will be determined after run as min/max of sampled energies (ham vector)

#construct array of MCState (for each temperature)
mc_states = [MCState(temp.t_grid[i], temp.beta_grid[i], start_config, pot) for i in 1:n_traj]

println("initial total energy= ",mc_states[1].en_tot)

#results = Output(n_bin, max_displ_vec)
results = Output{Float64}(n_bin; en_min = mc_states[1].en_tot)

@time ptmc_run!((mc_states, move_strat, mc_params, pot, ensemble, results); save=true)





# plot(temp.t_grid,results.heat_cap)

# data = [results.en_histogram[i] for i in 1:n_traj]
# plot(data)