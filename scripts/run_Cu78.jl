using ParallelTemperingMonteCarlo#EmbeddedAtomPotential
using Random,DelimitedFiles

#cd("$(pwd())/scripts")
#set random seed - for reproducibility
Random.seed!(1234)

# number of atoms

n_atoms = 78


# temperature grid
ti = 550
tf = 900

n_traj = 20


temp = TempGrid{n_traj}(ti,tf) 

# MC simulation details

mc_cycles = 10000 #default 20% equilibration cycles on top


mc_sample = 1  #sample every mc_sample MC cycles

#move_atom=AtomMove(n_atoms) #move strategy (here only atom moves, n_atoms per MC cycle)
displ_atom = 0.1 # Angstrom
n_adjust = 100

max_displ_atom = [0.1*sqrt(displ_atom*temp.t_grid[i]) for i in 1:n_traj]

mc_params = MCParams(mc_cycles, n_traj, n_atoms, mc_sample = mc_sample, n_adjust = n_adjust)

#moves - allowed at present: atom, volume and rotation moves (volume,rotation not yet implemented)
move_strat = MoveStrategy(atom_moves = n_atoms)  

#ensemble
ensemble = NVT(n_atoms)




#starting configurations
#icosahedral ground state of Cu55 (from Cambridge cluster database) converted to angstrom

pos_cu78 = [[0.20361899537042225, 4.542100154165376, 5.617654564079952], [-1.3356021834697875, 1.250317174442538, 7.604885773884753], [0.9492938368974458, -1.0333910462538514, 8.88470600986176], [-4.312074077482357, -0.06989227737649839, 4.986504523809336], [2.3165374619070285, 2.004314477581432, 7.622707509443731], [3.8490718632078122, -1.3205411122507233, 7.121618930987872], [2.4294751962350265, 5.558218438137726, 2.238263184046558], [-1.9762128719377627, -2.1287760304208003, 6.3068522584589], [4.224987325212419, -4.362079165236784, 5.162209588466778], [2.4195550918916573, 2.316216346886851, 3.965210925201691], [-6.854880513381072, 1.652146094236646, 3.3025083991481115], [-1.196104073225843, 5.178764628542455, 2.267578051475691], [5.36470071203256, 1.4586076519246343, 5.552803596556601], [0.8699565844140306, -0.780526420285719, 5.44031396113973], [0.933718158349826, -3.925726867523242, 6.755070351850022], [-1.0418891155144954, 1.6543495038935, 3.8717823851288737], [3.907105424830111, 5.126446818134343, 5.381527034726192], [-1.8741098947248835, -1.8196013926092502, 2.9635301764820885], [-3.23435781980919, 3.5509149410541507, 5.503485254811471], [6.845766166633069, -2.581841697593223, 5.557180009923181], [1.7117449639232898, 0.9002262750882373, -8.391500413810869], [0.2978924011426963, -1.9261257229070952, -6.801325862157064], [3.6825602711385885, -1.4778315568381437, -6.825562550442196], [-1.2666404036636134, -4.835858192809944, -5.472566031890261], [-1.4517287255401878, 1.454842586242733, -7.103170761842438], [2.6574680548866807, -4.557393913471735, -5.348806522472167], [4.687572913023054, 1.9051998792042242, -6.557965942800363], [-3.2287042245666466, -1.5889423608095918, -5.584673109475102], [1.3310784183796007, 3.6103392578877576, -6.348411826880653], [1.813661613798972, 0.33085676919447277, -4.800650170667867], [-4.643965389279703, -4.362483565657354, -3.609876199275363], [-4.500163005964806, 1.7357721075333998, -5.1388050428971015], [0.2007779982966608, -2.492654124237164, -3.161230030847531], [3.972142005825496, -2.0527731738602895, -3.1932740787654668], [-1.7112845646509185, 4.197586606827824, -4.6425820282152905], [-6.189178100815313, -0.9501798385838809, -3.3913108905323424], [4.297370168299781, 4.666419465369062, -4.324655995588406], [-1.6246968986051837, -5.355041816472566, -2.0701970439911683], [-1.4091717767159238, 0.6417842710621458, -3.678479970817406], [2.469222016063359, -5.151016774204949, -1.729476943616279], [4.764881178263632, 1.5106767150173368, -3.0270577348357453], [5.707861241261182, -4.605984915290293, -1.0656347227873109], [1.054894515709688, 6.489320045689877, -3.661855201172458], [-7.404459133641707, 2.4372223300073452, -2.7501694824539116], [-3.244934000049804, -1.9582184820287027, -1.9575586682714678], [0.9918855627457349, 3.1910872764592426, -2.97480058753634], [-4.812559029864525, 4.676737364216824, -2.964713518183104], [1.7327826998655402, 0.08777157221360649, -1.3676214274912268], [6.411007006289463, -0.9905250717419412, -0.9976489172864029], [-6.4306768635122005, -3.6986486204443763, -0.6821283104594505], [-4.329055398242434, 1.4497472898418446, -1.5104891586940985], [-2.146260309400144, 6.930182609032009, -2.138099026373036], [0.044072401288630145, -2.891612800866518, 0.2947553614158851], [3.368101828336046, -2.4277513809009488, 0.41116798187185805], [6.9101534417397765, 2.430611814161493, -0.207635686373652], [0.34751627828487447, -6.274605652526322, 0.8421639302067926], [-7.606835529970346, 0.05019604362808826, 0.002154032765599917], [-1.9634124331147949, 3.8333928003075495, -1.1936679194817477], [3.7584635724953555, -5.781819457666975, 1.7436518867712998], [3.961710818004846, 4.202621300823604, -0.8690129523454934], [-3.5448059022225356, -4.729812076374005, 1.0137808155999943], [-1.4816139884738888, 0.42673919227552604, 0.03372958725497531], [3.9106661016475357, 1.2148727723000203, 0.9735376329993357], [0.7866731413508473, 6.208017523017985, -0.5278288192873787], [6.612753685163757, -3.2320351466412016, 2.175925069604813], [-6.732483958320244, 3.448342062429919, 0.3006464508864198], [-4.784799084082625, -1.1071937923005861, 1.2230829002928951], [0.8096759208625114, 2.9716243408967307, 0.5807634564214615], [1.046695645456528, -0.27566449364582396, 2.0761797879671233], [-4.183260218232479, 5.812195649821056, 0.40115057826140993], [6.7375056493218, 0.11190737623829955, 2.683500238707654], [-4.768392584389185, -3.394191631201258, 4.132683339551884], [1.0150042990060903, -3.463665281451185, 3.3992626877876426], [-3.883000881530432, 2.7386672471206204, 1.8267037426950432], [-1.9567370873656813, -5.206668812541319, 4.380424522582969], [1.6553690269010994, -6.5551589348226, 4.457563601069877], [3.8703572745021058, -1.3712786173022675, 3.6648980811903913], [5.617398215757931, 3.64405271490336, 3.1355499041881405]]


#convert to Bohr
nmtobohr = 18.8973
copperconstant = 0.36258*nmtobohr
# pos_cu55 = copperconstant*ico_55
AtoBohr = 1.8897259886

length(pos_cu78) == n_atoms || error("number of atoms and positions not the same - check starting config")


#boundary conditions 
bc_cu55 = SphericalBC(radius=14*AtoBohr)   #5.32 Angstrom

#starting configuration

start_config = Config(pos_cu78, bc_cu55)

#histogram information
n_bin = 100
#----------------------------------------------------------------------------#
evtohartree = 0.0367493

n = 8.482
m = 4.692
ϵ = evtohartree*0.0370
a = 0.25*nmtobohr
C = 27.561

pot = EmbeddedAtomPotential(n,m,ϵ,C,a)

suttonchenpot = EmbeddedAtomPotential(9.0,6.0,0.0126*evtohartree,39.432,0.3612*nmtobohr)
#----------------------------------------------------------------------------#


#-------------------------------------------#
#--------Vector of radial symm values-------#
#-------------------------------------------#
X = [ 1    1              0.001   0.000  11.338
 1    0              0.001   0.000  11.338
 1    1              0.020   0.000  11.338
 1    0              0.020   0.000  11.338
 1    1              0.035   0.000  11.338
 1    0              0.035   0.000  11.338
 1    1              0.100   0.000  11.338
 1    0              0.100   0.000  11.338
 1    1              0.400   0.000  11.338
 1    0              0.400   0.000  11.338]

radsymmvec = []


#--------------------------------------------#
#--------Vector of angular symm values-------#
#--------------------------------------------#
V = [[0.0001,1,1,11.338],[0.0001,-1,2,11.338],[0.003,-1,1,11.338],[0.003,-1,2,11.338],[0.008,-1,1,11.338],[0.008,-1,2,11.338],[0.008,1,2,11.338],[0.015,1,1,11.338],[0.015,-1,2,11.338],[0.015,-1,4,11.338],[0.015,-1,16,11.338],[0.025,-1,1,11.338],[0.025,1,1,11.338],[0.025,1,2,11.338],[0.025,-1,4,11.338],[0.025,-1,16,11.338],[0.025,1,16,11.338],[0.045,1,1,11.338],[0.045,-1,2,11.338],[0.045,-1,4,11.338],[0.045,1,4,11.338],[0.045,1,16,11.338],[0.08,1,1,11.338],[0.08,-1,2,11.338],[0.08,-1,4,11.338],[0.08,1,4,11.338]]

T = [[1.,1.,1.],[1.,1.,0.],[1.,0.,0.]]

angularsymmvec = []
#-------------------------------------------#
#-----------Including scaling data----------#
#-------------------------------------------#
file = open("$(pwd())/scaling.data")
scalingvalues = readdlm(file)
close(file)
G_value_vec = []
for row in eachrow(scalingvalues[1:88,:])
    max_min = [row[4],row[3]]
    push!(G_value_vec,max_min)
end


for symmindex in eachindex(eachrow(X))
    row = X[symmindex,:]
    radsymm = RadialType2{Float64}(row[3],row[5],[row[1],row[2]],G_value_vec[symmindex])
    push!(radsymmvec,radsymm)
end


let n_index = 10

for element in V
    for types in T 

        n_index += 1

        symmfunc = AngularType3{Float64}(element[1],element[2],element[3],11.338,types,G_value_vec[n_index])

        push!(angularsymmvec,symmfunc)
    end
end
end
#---------------------------------------------------#
#------concatenating radial and angular values------#
#---------------------------------------------------#

totalsymmvec = vcat(radsymmvec,angularsymmvec)


#--------------------------------------------------#
#-----------Initialising the nnp weights-----------#
#--------------------------------------------------#
num_nodes::Vector{Int32} = [88, 20, 20, 1]
activation_functions::Vector{Int32} = [1, 2, 2, 1]
file = open("weights.029.data","r+")
weights=readdlm(file)
close(file)
weights = vec(weights)
nnp = NeuralNetworkPotential(num_nodes,activation_functions,weights)

runnerpotential = RuNNerPotential(nnp,totalsymmvec)
#------------------------------------------------------------#
#============================================================#
#------------------------------------------------------------#

nnp_states = [NNPState(temp.t_grid[i], temp.beta_grid[i], start_config, runnerpotential; max_displ=[max_displ_atom[i],0.01,1.]) for i in 1:n_traj]

mc_states = [MCState(temp.t_grid[i], temp.beta_grid[i], start_config, pot) for i in 1:n_traj]


#results = Output(n_bin, max_displ_vec)
results = Output{Float64}(n_bin; en_min = mc_states[1].en_tot)

@time ptmc_run!((mc_states, move_strat, mc_params, pot, ensemble, results));