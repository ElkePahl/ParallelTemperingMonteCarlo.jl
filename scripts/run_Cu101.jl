using ParallelTemperingMonteCarlo
using Random,DelimitedFiles

#cd("$(pwd())/scripts")
#set random seed - for reproducibility
Random.seed!(1234)

# number of atoms

n_atoms = 101


# temperature grid
ti = 550
tf = 900

n_traj = 20


temp = TempGrid{n_traj}(ti,tf) 

# MC simulation details

mc_cycles = 100 #default 20% equilibration cycles on top


mc_sample = 1  #sample every mc_sample MC cycles

#move_atom=AtomMove(n_atoms) #move strategy (here only atom moves, n_atoms per MC cycle)
displ_atom = 0.1 # Angstrom
n_adjust = 100

max_displ_atom = [0.1*sqrt(displ_atom*temp.t_grid[i]) for i in 1:n_traj]

mc_params = MCParams(mc_cycles, n_traj, n_atoms, mc_sample = mc_sample, n_adjust = n_adjust)

#moves - allowed at present: atom, volume and rotation moves (volume,rotation not yet implemented)
move_strat = MoveStrategy(atom_moves = n_atoms)  

#ensemble
ensemble = NVT(n_atoms)




#starting configurations
#icosahedral ground state of Cu55 (from Cambridge cluster database) converted to angstrom

pos_cu101 = [[10.37837124, 10.34436535, 14.44486097],
[7.94202653, 10.16670763, 13.80890268],
[9.47226682, 8.11396667, 13.66196437],
[5.48624304, 9.98269714, 13.08598569],
[6.99878827, 7.91233039, 13.00679224],
[9.32068459, 12.23958719, 13.14613649],
[8.54576483, 5.87484691, 12.79703852],
[11.80988512, 8.89634069, 12.9523559],
[3.09404123, 9.80073713, 12.29943107],
[4.56158385, 7.74830086, 12.22279336],
[6.85460477, 12.07916762, 12.49186036],
[11.72744397, 11.44952298, 12.61279373],
[6.09013845, 5.69190023, 12.08015276],
[7.62869879, 3.70126652, 11.87726066],
[10.91006211, 6.62883066, 12.14023344],
[9.75280876, 10.04088391, 12.06984145],
[4.42736798, 11.87183105, 11.71329285],
[8.24387536, 14.08620137, 11.76953933],
[7.32528033, 9.86235363, 11.41493464],
[9.95763567, 4.42293994, 11.22334763],
[8.84581494, 7.8190103, 11.27089133],
[13.21828264, 7.44412281, 11.37263354],
[10.66906252, 13.35301757, 11.2990577],
[5.81563779, 13.9029655, 11.06554003],
[13.18354832, 10.00155265, 11.09052109],
[4.9351008, 9.67785557, 10.64665899],
[6.40389684, 7.63613097, 10.5550296],
[8.69559169, 11.93508577, 10.72749644],
[2.92567402, 8.24257014, 10.31110904],
[7.93062516, 5.64018209, 10.36900217],
[12.29273014, 5.21047097, 10.50934153],
[4.40623328, 6.15978041, 10.20468368],
[11.16985352, 8.60046502, 10.56338027],
[13.03240057, 12.51489948, 10.70887709],
[5.97247414, 4.1493554, 10.01923569],
[2.81765977, 10.80185215, 10.00368351],
[11.08439125, 11.15062426, 10.19816114],
[6.28468589, 11.74943697, 10.02302984],
[10.24729668, 6.3748246, 9.70294032],
[8.37789659, 3.36035483, 9.48604912],
[14.55680325, 6.03660954, 9.75954576],
[9.13315923, 9.75260437, 9.69992179],
[4.15575951, 12.87803203, 9.39518225],
[14.5367743, 8.55250181, 9.47359002],
[7.63534548, 13.85132166, 9.35331558],
[6.75830192, 9.56287709, 8.9941946],
[10.73171687, 4.08399547, 8.80268902],
[8.22670734, 7.5643173, 8.85397293],
[12.51222488, 7.19042369, 8.96780767],
[14.42906266, 11.07501152, 9.15938684],
[4.78749459, 8.13225831, 8.62570423],
[6.28623094, 6.11412747, 8.47731081],
[4.35218116, 4.67969368, 8.13346804],
[10.05606555, 13.1330617, 8.85495105],
[6.71980788, 3.81328465, 7.61056728],
[12.46640629, 9.71962391, 8.65355234],
[4.6978056, 10.67538015, 8.32127802],
[4.63231309, 6.59839343, 6.54946101],
[8.09210768, 11.64935924, 8.32914283],
[10.48536403, 8.33930158, 8.16798897],
[8.67359501, 5.33040176, 7.94792362],
[13.03341724, 4.92456961, 8.07072807],
[12.41849404, 12.28014843, 8.29363925],
[9.13803738, 3.10881437, 7.07251205],
[2.65613042, 9.25066845, 7.99361617],
[10.44364903, 10.87676778, 7.80798586],
[5.98804559, 12.83360304, 7.65819364],
[8.52096264, 9.46053861, 7.37260334],
[11.44892745, 3.87978546, 6.377027],
[10.96763642, 6.10344968, 7.25493171],
[14.44791961, 6.98367265, 7.42719844],
[6.59823035, 8.04466521, 6.93595398],
[9.76608875, 8.97851676, 3.42731642],
[10.70203909, 11.23801749, 4.30258917],
[7.29071299, 8.83002359, 2.75015477],
[12.22881547, 9.13227785, 4.24918797],
[8.20349176, 11.07273892, 3.54629606],
[9.41404962, 5.02812102, 5.48901587],
[9.1262315, 13.26326076, 4.46575675],
[5.8306737, 10.27060545, 4.2997193],
[8.34321944, 6.90185802, 4.05778202],
[6.76619801, 12.53133978, 5.17395658],
[10.34527499, 9.31051734, 5.80570606],
[4.46205805, 9.14776704, 6.23190423],
[14.24216033, 7.96175083, 5.11636997],
[12.39177408, 10.72983305, 6.23875544],
[4.43868096, 11.6920802, 5.97492629],
[7.9076611, 9.14451956, 5.07033013],
[14.41805393, 9.50931212, 7.12270115],
[8.94977078, 7.2720974, 6.41397147],
[6.99510952, 5.74233946, 5.9970634],
[8.82343906, 11.35571261, 5.92571441],
[12.91498973, 5.88305897, 5.71995883],
[12.36153718, 8.15888861, 6.62322552],
[2.63821249, 11.77027191, 7.68621243],
[5.93042785, 7.69398904, 4.5922026],
[10.79731928, 12.82766405, 6.35050701],
[6.50749528, 10.57206201, 6.65600365],
[10.86471684, 7.04438815, 4.81287309],
[8.38265424, 13.62044367, 6.88514476],
[2.83880427, 6.70606892, 8.28598331]]


#convert to Bohr
# nmtobohr = 18.8973
# copperconstant = 0.36258*nmtobohr
# pos_cu55 = copperconstant*ico_55
AtoBohr = 1.8897259886

length(pos_cu101) == n_atoms || error("number of atoms and positions not the same - check starting config")


#boundary conditions 
bc_cu55 = SphericalBC(radius=16*AtoBohr)   #5.32 Angstrom

#starting configuration

start_config = Config(pos_cu101, bc_cu55)

#histogram information
n_bin = 100
#-------------------------------------------#
#--------Vector of radial symm values-------#
#-------------------------------------------#
X = [ 1    1              0.001   0.000  11.338
 1    0              0.001   0.000  11.338
 1    1              0.020   0.000  11.338
 1    0              0.020   0.000  11.338
 1    1              0.035   0.000  11.338
 1    0              0.035   0.000  11.338
 1    1              0.100   0.000  11.338
 1    0              0.100   0.000  11.338
 1    1              0.400   0.000  11.338
 1    0              0.400   0.000  11.338]

radsymmvec = []


#--------------------------------------------#
#--------Vector of angular symm values-------#
#--------------------------------------------#
V = [[0.0001,1,1,11.338],[0.0001,-1,2,11.338],[0.003,-1,1,11.338],[0.003,-1,2,11.338],[0.008,-1,1,11.338],[0.008,-1,2,11.338],[0.008,1,2,11.338],[0.015,1,1,11.338],[0.015,-1,2,11.338],[0.015,-1,4,11.338],[0.015,-1,16,11.338],[0.025,-1,1,11.338],[0.025,1,1,11.338],[0.025,1,2,11.338],[0.025,-1,4,11.338],[0.025,-1,16,11.338],[0.025,1,16,11.338],[0.045,1,1,11.338],[0.045,-1,2,11.338],[0.045,-1,4,11.338],[0.045,1,4,11.338],[0.045,1,16,11.338],[0.08,1,1,11.338],[0.08,-1,2,11.338],[0.08,-1,4,11.338],[0.08,1,4,11.338]]

T = [[1.,1.,1.],[1.,1.,0.],[1.,0.,0.]]

angularsymmvec = []
#-------------------------------------------#
#-----------Including scaling data----------#
#-------------------------------------------#
file = open("$(pwd())/scaling.data")
scalingvalues = readdlm(file)
close(file)
G_value_vec = []
for row in eachrow(scalingvalues[1:88,:])
    max_min = [row[4],row[3]]
    push!(G_value_vec,max_min)
end


for symmindex in eachindex(eachrow(X))
    row = X[symmindex,:]
    radsymm = RadialType2{Float64}(row[3],row[5],[row[1],row[2]],G_value_vec[symmindex])
    push!(radsymmvec,radsymm)
end


let n_index = 10

for element in V
    for types in T 

        n_index += 1

        symmfunc = AngularType3{Float64}(element[1],element[2],element[3],11.338,types,G_value_vec[n_index])

        push!(angularsymmvec,symmfunc)
    end
end
end
#---------------------------------------------------#
#------concatenating radial and angular values------#
#---------------------------------------------------#

totalsymmvec = vcat(radsymmvec,angularsymmvec)


#--------------------------------------------------#
#-----------Initialising the nnp weights-----------#
#--------------------------------------------------#
num_nodes::Vector{Int32} = [88, 20, 20, 1]
activation_functions::Vector{Int32} = [1, 2, 2, 1]
file = open("weights.029.data","r+")
weights=readdlm(file)
close(file)
weights = vec(weights)
nnp = NeuralNetworkPotential(num_nodes,activation_functions,weights)

runnerpotential = RuNNerPotential(nnp,totalsymmvec)
#------------------------------------------------------------#
#============================================================#
#------------------------------------------------------------#

mc_states = [NNPState(temp.t_grid[i], temp.beta_grid[i], start_config, runnerpotential; max_displ=[max_displ_atom[i],0.01,1.]) for i in 1:n_traj]



#results = Output(n_bin, max_displ_vec)
results = Output{Float64}(n_bin; en_min = mc_states[1].en_tot)

@time ptmc_run!((mc_states, move_strat, mc_params, runnerpotential, ensemble, results));