var documenterSearchIndex = {"docs":
[{"location":"CustomTypes/#CustomTypes","page":"CustomTypes","title":"CustomTypes","text":"","category":"section"},{"location":"CustomTypes/","page":"CustomTypes","title":"CustomTypes","text":"Modules = [ParallelTemperingMonteCarlo.CustomTypes]","category":"page"},{"location":"CustomTypes/#ParallelTemperingMonteCarlo.CustomTypes.PositionArray","page":"CustomTypes","title":"ParallelTemperingMonteCarlo.CustomTypes.PositionArray","text":"PositionArray = Union{Vector{Vector{T}}, Vector{SVector{3, T}}} where T <: Number\n\nType alias for a list of positions.\n\n\n\n\n\n","category":"type"},{"location":"CustomTypes/#ParallelTemperingMonteCarlo.CustomTypes.PositionVector","page":"CustomTypes","title":"ParallelTemperingMonteCarlo.CustomTypes.PositionVector","text":"PositionVector = Union{SVector{3, T}, Vector{T}} where T <: Number\n\nType alias for all kinds of acceptable position vectors.\n\n\n\n\n\n","category":"type"},{"location":"CustomTypes/#ParallelTemperingMonteCarlo.CustomTypes.VorS","page":"CustomTypes","title":"ParallelTemperingMonteCarlo.CustomTypes.VorS","text":"VorS = T where T <: AbstractArray{Z, 1} where Z <: Number\n\nType alias for a collection of numbers. The name derives from most collections being a Vector or StaticVector of numbers.\n\n\n\n\n\n","category":"type"},{"location":"Cutoff/#Cutoff","page":"Cutoff","title":"Cutoff","text":"","category":"section"},{"location":"Cutoff/","page":"Cutoff","title":"Cutoff","text":"Modules = [ParallelTemperingMonteCarlo.MachineLearningPotential.Cutoff]","category":"page"},{"location":"Cutoff/#ParallelTemperingMonteCarlo.MachineLearningPotential.Cutoff.angular_measure-NTuple{5, Any}","page":"Cutoff","title":"ParallelTemperingMonteCarlo.MachineLearningPotential.Cutoff.angular_measure","text":"angular_measure(a,b,c,r2ij,r2ik)\nangular_measure(a,b,c)\n\nAccepts three vectors a,b,c and can either accept or calculate the squared distances between them r2_ab,r2_bc, centred on vector a. Returns cos(θ) labelled as θ: the angular measure.\n\n\n\n\n\n","category":"method"},{"location":"Cutoff/#ParallelTemperingMonteCarlo.MachineLearningPotential.Cutoff.cutoff_function-Tuple{Any}","page":"Cutoff","title":"ParallelTemperingMonteCarlo.MachineLearningPotential.Cutoff.cutoff_function","text":"cutoff_function(r_scaled)\ncutoff_function(r_ij,r_cut)\ncutoff_function(dist_vec::T,r_cut) where {T<:Array}\n\nImplementation of the type 2 cutoff function. Either accepts scaled radius r_scaled or the interatomiic distance r_ij and the cutoff radius r_cut. Calculation is described in the RuNNer documentation, given as 1/2 (cos(πx) + 1) where x is (r_ij - r_i,c)/(rc - r_i,c). As an inner cutoff is not used by the potentials we are interested in, we have not included a method. A third method is included for creating a matrix or vector to match the distances provided. \n\n\n\n\n\n","category":"method"},{"location":"Cutoff/#ParallelTemperingMonteCarlo.MachineLearningPotential.Cutoff.dist2-Tuple{Any, Any}","page":"Cutoff","title":"ParallelTemperingMonteCarlo.MachineLearningPotential.Cutoff.dist2","text":"dist2(a,b)\n\nSquared distance of two vectors a,b \n\n\n\n\n\n","category":"method"},{"location":"Cutoff/#ParallelTemperingMonteCarlo.MachineLearningPotential.Cutoff.find_distance2_mat-Tuple{Any}","page":"Cutoff","title":"ParallelTemperingMonteCarlo.MachineLearningPotential.Cutoff.find_distance2_mat","text":"find_distance2_mat(pos)\n\nGiven a vector called pos comprised of (ideally) static vectors we return a lengthXlength symmetric matrix of the squared distance\n\n\n\n\n\n","category":"method"},{"location":"Cutoff/#ParallelTemperingMonteCarlo.MachineLearningPotential.Cutoff.thetacalc-NTuple{4, Any}","page":"Cutoff","title":"ParallelTemperingMonteCarlo.MachineLearningPotential.Cutoff.thetacalc","text":"thetacalc(xy,xz,disxy,disxz)\n\nCalculates cosine theta of two vectors xy,xz with their sqared-distances disxy,disxz. \n\n\n\n\n\n","category":"method"},{"location":"Initialization/#Initialization","page":"Initialization","title":"Initialization","text":"","category":"section"},{"location":"Initialization/","page":"Initialization","title":"Initialization","text":"Modules = [ParallelTemperingMonteCarlo.Initialization]","category":"page"},{"location":"Initialization/#ParallelTemperingMonteCarlo.Initialization.initialisation-Union{Tuple{Ptype}, Tuple{Etype}, Tuple{MCParams, TempGrid, Config, Ptype, Etype}} where {Etype<:AbstractEnsemble, Ptype<:AbstractPotential}","page":"Initialization","title":"ParallelTemperingMonteCarlo.Initialization.initialisation","text":"initialisation(mc_params::MCParams,temp::TempGrid,start_config::Config,potential::Ptype,ensemble::NVT)\ninitialisation(restart::Bool;eq_cycles::Number)\n\nBasic function for establishing the structs and parameters required for the simulation. Inputs for method one are:\n\nmc_params: the basic values and parameters concerning how long our simulation runs.\ntemp: a grid of temp and beta values passed to the mc_states struct.\nstart_config: the initial configuration used to populate each starting state with.\npotential: the potential energy used for the simulation.\nensemble: the ensemble used for the simulation, contains the move strat inherently.\n\nInputs for method two are:\n\nrestart: A boolean determining whether the simulation is restarting or being read-in from a file. \neq_cycles: the proportion of n_cycles to be run in equilibration.\n\nMethod one and two return the following structs:\n\nmc_states: a vector of MCState structs each at a different temperature\nmove_strategy: struct containing a vector of MoveType\nresults: struct countaining the output such as Cv and histograms\nstart_counter: where to begin the sims\nn_steps: total moves per mc_cycle \n\nMethod two also returns:\n\nmc_params: the static parameters determining the scope of the simulation\nensemble: determines the ensemble and move_strategy followed by the simulation\npotential: the potential energy surface explored by trajectories\n\n***NOTES FOR FUTURE IMPLEMENTATION***\n\nconsider shuffling mc_params to include the tempgrid and cut down the number of inputs.\n\n\n\n\n\n","category":"method"},{"location":"MachineLearningPotential/#MachineLearningPotential","page":"MachineLearningPotential","title":"MachineLearningPotential","text":"","category":"section"},{"location":"MachineLearningPotential/","page":"MachineLearningPotential","title":"MachineLearningPotential","text":"Modules = [ParallelTemperingMonteCarlo.MachineLearningPotential.MachineLearningPotential]","category":"page"},{"location":"SymmetryFunctions/#SymmetryFunctions","page":"SymmetryFunctions","title":"SymmetryFunctions","text":"","category":"section"},{"location":"SymmetryFunctions/","page":"SymmetryFunctions","title":"SymmetryFunctions","text":"Modules = [ParallelTemperingMonteCarlo.MachineLearningPotential.SymmetryFunctions]","category":"page"},{"location":"SymmetryFunctions/#ParallelTemperingMonteCarlo.MachineLearningPotential.SymmetryFunctions.AngularType3-Union{Tuple{T}, NTuple{5, Any}} where T","page":"SymmetryFunctions","title":"ParallelTemperingMonteCarlo.MachineLearningPotential.SymmetryFunctions.AngularType3","text":"AngularType3{T}(eta,lambda,zeta,r_cut,type_vec::Vector) where {T}\nAngularType3{T}(eta,lambda,zeta,r_cut,type_vector::Vector,G_vals::Vector) where {T}\n\nFunctions to initialise the AngularType3 structs based on various different definitions. If we don't include the offset and normalisation factors the two power of (one minus) zeta factor inlcudes no normalisation, and the offset is zero.  Second definition includes a vector containing G_max and G_min in a vector, it sets the offset and renormalises tpz to include G_norm. \n\n\n\n\n\n","category":"method"},{"location":"SymmetryFunctions/#ParallelTemperingMonteCarlo.MachineLearningPotential.SymmetryFunctions.AngularType3a-Union{Tuple{T}, NTuple{5, Any}} where T","page":"SymmetryFunctions","title":"ParallelTemperingMonteCarlo.MachineLearningPotential.SymmetryFunctions.AngularType3a","text":"AngularType3a{T}(eta,lambda,zeta,r_cut,type_vec) where {T}\nAngularType3a{T}(eta,lambda,zeta,r_cut,type_vector,G_valsa::Vector,G_valsb::Vector) where {T}\n\nFunctions to initialise the AngularType3a structs based on various different definitions. If we don't include the offset and normalisation factors the two power of (one minus) zeta factor inlcudes no normalisation, and the offset is zero.  Second definition includes a vector containing Gmax and Gmin in a vector, it sets the offset and renormalises tpz to include G_norm. \n\nThis version is for a diatomic potential where there are two sets of parameters one for each atom type. \n\n\n\n\n\n","category":"method"},{"location":"SymmetryFunctions/#ParallelTemperingMonteCarlo.MachineLearningPotential.SymmetryFunctions.RadialType2-Union{Tuple{T}, Tuple{Any, Any, Any}} where T","page":"SymmetryFunctions","title":"ParallelTemperingMonteCarlo.MachineLearningPotential.SymmetryFunctions.RadialType2","text":"RadialType2{T}(eta,r_cut,type_vector) \nRadialType2{T}(eta,r_cut,type_vector::Vector,G_vals::Vector)\n\nVarious definitions of the RadialType2 struct to account for new normalisation factors required by the neural network to simplify the math. One only accepts the standard hyperparameters trained by the neural network and sets the offset and normalisation factors to zero and one respectively. The other accepts G_min,G_max and calculates the normalisation and offset manually\n\n\n\n\n\n","category":"method"},{"location":"SymmetryFunctions/#ParallelTemperingMonteCarlo.MachineLearningPotential.SymmetryFunctions.RadialType2a","page":"SymmetryFunctions","title":"ParallelTemperingMonteCarlo.MachineLearningPotential.SymmetryFunctions.RadialType2a","text":"RadialType2a{T}(eta,r_cut,type_vector) where {T}\nRadialType2a{T}(eta,r_cut,type_vector,G_vals_a::Vector,G_vals_b) where {T}\n\nVarious definitions of the RadialType2a struct to account for new normalisation factors required by the neural network to simplify the math. One only accepts the standard hyperparameters trained by the neural network and sets the offset and normalisation factors to zero and one respectively. This is for a diatomic RuNNer potential with two sets of parameters required to populate two vectors of symmetry functions\n\n\n\n\n\n","category":"type"},{"location":"SymmetryFunctions/#ParallelTemperingMonteCarlo.MachineLearningPotential.SymmetryFunctions.calc_one_symm_val-NTuple{4, Any}","page":"SymmetryFunctions","title":"ParallelTemperingMonteCarlo.MachineLearningPotential.SymmetryFunctions.calc_one_symm_val","text":"calc_one_symm_val(r2_ij,fc_ij,η)\n\nAccepts interatomic distance squared r2_ij, the cutoff function 'fcij' and a gaussian parameter η  it then calculates the radial symmetry function value for a single pair of atoms.     calconesymmval(θ,r2ij,r2ik,r2jk,fij,fik,fjk,η,λ,ζ)     (position1,position2,position3,r2ij,r2ik,r2jk,fij,fik,fjk,η,λ,ζ)\n\nReturns a single symmetry function value from the double-sum. accepts θ the angle between ijk centred on i, and the squared distances r2_ij,r2_ik, r2_jk, the cutoff function values f_ij,f_ik,f_jk along with the symmetry function parameters η,λ,ζ, and the cutoff radius r_cut.\n\nThe version with position_i calculates the angle between positions before calculating the symmetry functions according to the previous method.  \n\n\n\n\n\n","category":"method"},{"location":"SymmetryFunctions/#ParallelTemperingMonteCarlo.MachineLearningPotential.SymmetryFunctions.calc_symm_vals!-NTuple{9, Any}","page":"SymmetryFunctions","title":"ParallelTemperingMonteCarlo.MachineLearningPotential.SymmetryFunctions.calc_symm_vals!","text":"calc_symm_vals!(position,dist2_mat,f_mat,g_vec,n1,n2,η,g_norm,G_offset)\ncalc_symm_vals!(positions,dist2_mat,f_mat,g_vec,n1,n2,η,λ,ζ,tpz,G_offset)\n\nMethods for the calculation of a symmetry function vector for a diatomic RuNNer potential with n1 atoms of type 1 and n2 atoms of type 2. First method is for angular symmetry functions and populates two vectors of symmetry values, one for X-Cu the other for X-Zn. The second method is for angular symmetry functions and returns three vectors: X-CuCu, X-CuZn and X-ZnZn. \n\n\n\n\n\n","category":"method"},{"location":"SymmetryFunctions/#ParallelTemperingMonteCarlo.MachineLearningPotential.SymmetryFunctions.calc_symm_vals!-Tuple{Any, Any, Any, Any, RadialType2}","page":"SymmetryFunctions","title":"ParallelTemperingMonteCarlo.MachineLearningPotential.SymmetryFunctions.calc_symm_vals!","text":"calc_symm_vals!(positions,dist2_mat,f_mat,g_vec,symm_func::RadialType2)\ncalc_symm_vals!(positions,dist2_mat,f_mat,g_vec,symm_func::AngularType3)\n\nAccepts positions for consistency with angular calculation, dist2_mat and f_mat containing the distances and cutoff functions relevant to the symmetry values, lastly accepts the symmetry function over which to iterate. g_vec is an N_atom vector into which the total contributions of each atom are input. Returns the same vector.  Second method is for the calculation of angular symmetry functions.\n\n\n\n\n\n","category":"method"},{"location":"SymmetryFunctions/#ParallelTemperingMonteCarlo.MachineLearningPotential.SymmetryFunctions.exponential_part-NTuple{7, Any}","page":"SymmetryFunctions","title":"ParallelTemperingMonteCarlo.MachineLearningPotential.SymmetryFunctions.exponential_part","text":"exponential_part(η,r2_ij,r2_ik,r2_jk,f_ij,f_ik,f_jk)\nexponential_part(η,rsum,f_prod)\n\nCalculates the exponential portion of the symmetry function for the angular symmetry function. Preserves the values we can maintain throughout iterating over theta. Second method simply reduces the inputs to what is actually required. \n\n\n\n\n\n","category":"method"},{"location":"SymmetryFunctions/#ParallelTemperingMonteCarlo.MachineLearningPotential.SymmetryFunctions.init_symm_vecs-Tuple{Any, Any}","page":"SymmetryFunctions","title":"ParallelTemperingMonteCarlo.MachineLearningPotential.SymmetryFunctions.init_symm_vecs","text":"init_symm_vecs(dist2_mat,total_symm_vec)\n\nPrepares the symmetry matrix g_mat by taking the dimensions of the dist2_mat containing the squared distance of each atom with its pair, and total_symm_vec with all of the symmetry functions. \n\n\n\n\n\n","category":"method"},{"location":"SymmetryFunctions/#ParallelTemperingMonteCarlo.MachineLearningPotential.SymmetryFunctions.symmfunc_calc-NTuple{10, Any}","page":"SymmetryFunctions","title":"ParallelTemperingMonteCarlo.MachineLearningPotential.SymmetryFunctions.symmfunc_calc","text":"symmfunc_calc(θ_vec,r2_ij,r2_ik,r2_jk,f_ij,f_ik,f_jk,η,λ,ζ)\n\nCalculates the three g_values corresponding to the three atoms iterated over, builds the foundation of the total symm function as calculated below.\n\n\n\n\n\n","category":"method"},{"location":"SymmetryFunctions/#ParallelTemperingMonteCarlo.MachineLearningPotential.SymmetryFunctions.theta_part-Tuple{Any, Any, Any}","page":"SymmetryFunctions","title":"ParallelTemperingMonteCarlo.MachineLearningPotential.SymmetryFunctions.theta_part","text":"theta_part(θ,λ,ζ)\n\nCalculates the angular portion of a single symmetry function, this requires iteration over each of the three angles.\n\n\n\n\n\n","category":"method"},{"location":"SymmetryFunctions/#ParallelTemperingMonteCarlo.MachineLearningPotential.SymmetryFunctions.total_symm_calc-NTuple{7, Any}","page":"SymmetryFunctions","title":"ParallelTemperingMonteCarlo.MachineLearningPotential.SymmetryFunctions.total_symm_calc","text":"total_symm_calc(positions,dist2_mat,f_mat,total_symm_vec)\ntotal_symm_calc(positions,dist2_mat,f_mat,radsymmfunctions,angsymmfunctions,nrad,nang,n1,n2)\n\nFunction to run over a vector of symmetry functions total_symm_vec and determining the value for each symmetry function for each atom at position positions with distances dist2_mat and a matrix of cutoff functions f_mat between each atom pair.\n\nSecond method is the same, but for n1 atoms of type 1 and n2 atoms of type 2\n\n\n\n\n\n","category":"method"},{"location":"SymmetryFunctions/#ParallelTemperingMonteCarlo.MachineLearningPotential.SymmetryFunctions.total_thr_symm_calc-NTuple{4, Any}","page":"SymmetryFunctions","title":"ParallelTemperingMonteCarlo.MachineLearningPotential.SymmetryFunctions.total_thr_symm_calc","text":"total_thr_symm_calc(positions,dist2_mat,f_mat,total_symm_vec)\n\nThis operates as the total_symm_calc function only threaded over the symmetry functions. \n\n\n\n\n\n","category":"method"},{"location":"SymmetryFunctions/#ParallelTemperingMonteCarlo.MachineLearningPotential.SymmetryFunctions.update_g_vals!-NTuple{5, Any}","page":"SymmetryFunctions","title":"ParallelTemperingMonteCarlo.MachineLearningPotential.SymmetryFunctions.update_g_vals!","text":"update_g_vals!(g_vec,g_vals,atomindex,index2,index3)\n\nFunction to correctly update the symmvalues g_vals at the indices in g_vec\n\n\n\n\n\n","category":"method"},{"location":"MCMoves/#MCMoves","page":"MCMoves","title":"MCMoves","text":"","category":"section"},{"location":"MCMoves/","page":"MCMoves","title":"MCMoves","text":"Modules = [ParallelTemperingMonteCarlo.MCMoves]","category":"page"},{"location":"MCMoves/#ParallelTemperingMonteCarlo.MCMoves.atom_displacement-Tuple{Union{Vector{T}, StaticArraysCore.SVector{3, T}} where T<:Number, Number, SphericalBC}","page":"MCMoves","title":"ParallelTemperingMonteCarlo.MCMoves.atom_displacement","text":"atom_displacement(pos::PositionVector, max_displacement::Number, bc::SphericalBC)\natom_displacement(pos::PositionVector, max_displacement::Number, bc::CubicBC)\natom_displacement(pos::PositionVector, max_displacement::Number, bc::RhombicBC)\natom_displacement(mc_state::MCState{T, N, BC}) where {T, N, BC <: PeriodicBC}\natom_displacement(mc_state::MCState{T, N, BC}) where {T, N, BC <: SphericalBC}\n\nGenerates trial position for atom, moving it from pos by some random displacement. Random displacement determined by max_displacement. These variables are additionally contained in mc_state where the pos is determined by index. Implemented for:\n\nSphericalBC: trial move is repeated until moved atom is within binding sphere\nCubicBC; RhombicBC: periodic boundary condition enforced, an atom is moved into the box from the other side when it tries to get out.\n\nThe final method is a wrapper function which unpacks mc_states, which contains all the necessary arguments for the two methods above. When we have correctly implemented move_strat this wrapper will be expanded to include other methods.\n\n\n\n\n\n","category":"method"},{"location":"MCMoves/#ParallelTemperingMonteCarlo.MCMoves.generate_move!-Tuple{MCState, String}","page":"MCMoves","title":"ParallelTemperingMonteCarlo.MCMoves.generate_move!","text":"generate_move!(mc_state::MCState,movetype::String)\n\ngenerate_move! is the currying function that takes mc_state and a movetype  and generates the variables required inside of the ensemblevariables struct within mc_state. \n\n\n\n\n\n","category":"method"},{"location":"MCMoves/#ParallelTemperingMonteCarlo.MCMoves.swap_atoms-Union{Tuple{MCState{T, N, BC, PV, EV}}, Tuple{EV}, Tuple{PV}, Tuple{BC}, Tuple{N}, Tuple{T}, Tuple{N2}, Tuple{N1}, Tuple{n}, Tuple{tee}} where {tee, n, N1, N2, T, N, BC, PV, EV<:NNVTVariables{tee, n, N1, N2}}","page":"MCMoves","title":"ParallelTemperingMonteCarlo.MCMoves.swap_atoms","text":"(swap_atoms(mc_state::MCState{T, N, BC, PV, EV}) where {T, N, BC, PV, EV <: NNVTVariables{tee, n, N1, N2}}) where {tee, n, N1, N2}\n\nSwaps two atoms in the configuration.\n\n\n\n\n\n","category":"method"},{"location":"MCMoves/#ParallelTemperingMonteCarlo.MCMoves.volume_change-Tuple{Config, CubicBC, Number, Number}","page":"MCMoves","title":"ParallelTemperingMonteCarlo.MCMoves.volume_change","text":"volume_change(conf::Config, bc::CubicBC, max_vchange::Number, max_length::Number)\nvolume_change(conf::Config, bc::RhombicBC, max_vchange::Number, max_length::Number)\nvolume_change(mc_state::MCState)\n\nScale the whole configuration, including positions and the box length. Returns the trial configuration as a struct. \n\n\n\n\n\n","category":"method"},{"location":"BoundaryConditions/#BoundaryConditions","page":"BoundaryConditions","title":"BoundaryConditions","text":"","category":"section"},{"location":"BoundaryConditions/","page":"BoundaryConditions","title":"BoundaryConditions","text":"Modules = [ParallelTemperingMonteCarlo.BoundaryConditions]","category":"page"},{"location":"BoundaryConditions/#ParallelTemperingMonteCarlo.BoundaryConditions","page":"BoundaryConditions","title":"ParallelTemperingMonteCarlo.BoundaryConditions","text":"module BoundaryConditions\n\nThis module provides structs and methods for different kinds of boundary conditions.\n\n\n\n\n\n","category":"module"},{"location":"BoundaryConditions/#ParallelTemperingMonteCarlo.BoundaryConditions.AbstractBC","page":"BoundaryConditions","title":"ParallelTemperingMonteCarlo.BoundaryConditions.AbstractBC","text":"AbstractBC{T}\n\nEncompasses possible boundary conditions; implemented: \n\nSphericalBC\nPeriodicBC\n\nNeeds methods implemented for\n\natom_displacement\n\n\n\n\n\n","category":"type"},{"location":"BoundaryConditions/#ParallelTemperingMonteCarlo.BoundaryConditions.CubicBC","page":"BoundaryConditions","title":"ParallelTemperingMonteCarlo.BoundaryConditions.CubicBC","text":"CubicBC{T}(; side_length::Number)\n\nSubtype of periodic boundary conditions where the box_length is isotropic.\n\n\n\n\n\n","category":"type"},{"location":"BoundaryConditions/#ParallelTemperingMonteCarlo.BoundaryConditions.PeriodicBC","page":"BoundaryConditions","title":"ParallelTemperingMonteCarlo.BoundaryConditions.PeriodicBC","text":"PeriodicBC{T}\n\nOverarching type of boundary condition for simulating the infinite bulk\n\nImplemented types:\nCubicBC\nRhombicBC\n\n\n\n\n\n","category":"type"},{"location":"BoundaryConditions/#ParallelTemperingMonteCarlo.BoundaryConditions.RhombicBC","page":"BoundaryConditions","title":"ParallelTemperingMonteCarlo.BoundaryConditions.RhombicBC","text":"RhombicBC{T}(; length::Number, height::Number)\n\nSubtype of periodic boundary condition where the box_length and box_height are not the same. The projection of the box on the xy-plane is a rhombus, box_length applies to all four sides.\n\n\n\n\n\n","category":"type"},{"location":"BoundaryConditions/#ParallelTemperingMonteCarlo.BoundaryConditions.SphericalBC","page":"BoundaryConditions","title":"ParallelTemperingMonteCarlo.BoundaryConditions.SphericalBC","text":"SphericalBC{T}(;radius::Number)\n\nImplements type for spherical boundary conditions; subtype of AbstractBC. Needs radius of binding sphere as keyword argument. Fieldname: radius2: squared radius of binding sphere\n\n\n\n\n\n","category":"type"},{"location":"BoundaryConditions/#ParallelTemperingMonteCarlo.BoundaryConditions.check_boundary-Tuple{SphericalBC, Union{Vector{T}, StaticArraysCore.SVector{3, T}} where T<:Number}","page":"BoundaryConditions","title":"ParallelTemperingMonteCarlo.BoundaryConditions.check_boundary","text":"check_boundary(bc::SpericalBC,pos::PositionVector) where T <: Number\n\nReturns true when atom outside of spherical boundary (squared norm of position vector < radius^2 of binding sphere).\n\n\n\n\n\n","category":"method"},{"location":"BoundaryConditions/#ParallelTemperingMonteCarlo.BoundaryConditions.test_cluster_inside-Union{Tuple{T}, Tuple{Array{StaticArraysCore.SVector{3, T}, 1}, SphericalBC}} where T<:Number","page":"BoundaryConditions","title":"ParallelTemperingMonteCarlo.BoundaryConditions.test_cluster_inside","text":"test_cluster_inside(pos::Vector{SVector{3,T}},bc::SphericalBC) where T <: Number\n\nTests if whole cluster lies in the binding sphere.\n\n\n\n\n\n","category":"method"},{"location":"Exchange/#Exchange","page":"Exchange","title":"Exchange","text":"","category":"section"},{"location":"Exchange/","page":"Exchange","title":"Exchange","text":"Modules = [ParallelTemperingMonteCarlo.Exchange]","category":"page"},{"location":"Exchange/#ParallelTemperingMonteCarlo.Exchange","page":"Exchange","title":"ParallelTemperingMonteCarlo.Exchange","text":"module Exchange\n\nHere we include methods for calculating the metropolis condition and other exchange criteria required for Monte Carlo steps. This further declutters the MCRun module and allows us to split the cycle. Includes update_max_stepsize! which controls the frequency of\n\n\n\n\n\n","category":"module"},{"location":"Exchange/#ParallelTemperingMonteCarlo.Exchange.exc_acceptance-NTuple{4, Number}","page":"Exchange","title":"ParallelTemperingMonteCarlo.Exchange.exc_acceptance","text":"exc_acceptance(beta_1::Number, beta_2::Number, en_1::Number, en_2::Number)\n\nReturns probability to exchange configurations of two trajectories with energies en_1 and en_2  at inverse temperatures beta_1 and beta_2. \n\n\n\n\n\n","category":"method"},{"location":"Exchange/#ParallelTemperingMonteCarlo.Exchange.exc_trajectories!-Tuple{MCState, MCState}","page":"Exchange","title":"ParallelTemperingMonteCarlo.Exchange.exc_trajectories!","text":"exc_trajectories!(state_1::MCState, state_2::MCState)\n\nExchanges configurations and distance and energy information between two trajectories; information contained in state_1 and state_2, see MCState   \n\n\n\n\n\n","category":"method"},{"location":"Exchange/#ParallelTemperingMonteCarlo.Exchange.metropolis_condition-Tuple{Number, Number}","page":"Exchange","title":"ParallelTemperingMonteCarlo.Exchange.metropolis_condition","text":"metropolis_condition(delta_energy::Number, beta::Number)\nmetropolis_condition(ensemble::Etype, delta_energy::Float64, volume_changed::Float64, volume_unchanged::Float64, beta::Float64) where Etype <: NPT\nmetropolis_condition(movetype::String, mc_state::MCState, ensemble::Etype) where Etype <: AbstractEnsemble\n\nFunction returning the probability value associated with a trial move. Four methods included. The last two methods are separatig functions taking a movetype, mc_state and ensemble and separating them into volume and atom moves defined in the first two functions, namely:\n\naccepts delta_energy and beta and determines the thermodynamic probability of the single-atom move\naccepts pressure by way of ensemble, delta_energy, delta_volume by way of volume_changed and volume_unchanged and beta and calculates the thermodynamic probability of the volume move.\n\n\n\n\n\n","category":"method"},{"location":"Exchange/#ParallelTemperingMonteCarlo.Exchange.parallel_tempering_exchange!-Tuple{Vector{T} where T<:MCState, MCParams, AbstractEnsemble}","page":"Exchange","title":"ParallelTemperingMonteCarlo.Exchange.parallel_tempering_exchange!","text":"parallel_tempering_exchange!(mc_states::Vector{T},mc_params::MCParams,ensemble::NVT) where T <: MCState\nparallel_tempering_exchange!(mc_states::Vector{T},mc_params::MCParams,ensemble::NPT) where T <: MCState\n\nThese functions take a vector mc_states as well as the parameters of the simulation and attempts to swap two trajectories according to the parallel tempering method.  The second method uses enthalpy instead of energy to determine acceptance. \n\n\n\n\n\n","category":"method"},{"location":"Exchange/#ParallelTemperingMonteCarlo.Exchange.update_max_stepsize!-Tuple{MCState, Int64, NPT, Number, Number}","page":"Exchange","title":"ParallelTemperingMonteCarlo.Exchange.update_max_stepsize!","text":"update_max_stepsize!(mc_state::MCState, n_update::Int, ensemble::NPT, min_acc::Number, max_acc::Number)\nupdate_max_stepsize!(mc_state::MCState, n_update::Int, ensemble::Etype, min_acc::Number, max_acc::Number) where Etype <: AbstractEnsemble\n\nIncreases/decreases the max. displacement of atom, volume, and rotation moves to 110%/90% of old values if acceptance rate is >60%/<40%. Acceptance rate is calculated after n_update MC cycles;  each cycle consists of a atom, v volume moves. Information on actual max. displacement and accepted moves between updates is contained in mc_state, see MCState.  \n\nMethods split for NVT/NPT ensemble to ensure we don't consider volume moves when dealing with the NVT ensemble.\n\n\n\n\n\n","category":"method"},{"location":"ForwardPass/#ForwardPass","page":"ForwardPass","title":"ForwardPass","text":"","category":"section"},{"location":"ForwardPass/","page":"ForwardPass","title":"ForwardPass","text":"Modules = [ParallelTemperingMonteCarlo.MachineLearningPotential.ForwardPass]","category":"page"},{"location":"ForwardPass/#ParallelTemperingMonteCarlo.MachineLearningPotential.ForwardPass.NeuralNetworkPotential","page":"ForwardPass","title":"ParallelTemperingMonteCarlo.MachineLearningPotential.ForwardPass.NeuralNetworkPotential","text":"NeuralNetworkPotential\n\nThe basic struct containing the parameters of the neural network itself. n_layers and n_params define the length of the vectors, these are required by the Fortran program. num_nodes is a vector containing the number of nodes per layer, also required to appropriately assign the parameters to the correct node. activation_functions should usually be [1 2 2 1] meaning \"linear, tanh, tanh, linear\" last is the vector of parameters assigned to each connexion.\n\n\n\n\n\n","category":"type"},{"location":"ForwardPass/#ParallelTemperingMonteCarlo.MachineLearningPotential.ForwardPass.NeuralNetworkPotential-Tuple{Vector, Vector, Any}","page":"ForwardPass","title":"ParallelTemperingMonteCarlo.MachineLearningPotential.ForwardPass.NeuralNetworkPotential","text":"NeuralNetworkPotential(num_nodes::Vector,activation_functions::Vector, parameters)\n\nUnpacks the num_nodes vector and parameters and assigns their lengths to the missing struct parameters.\n\n\n\n\n\n","category":"method"},{"location":"ForwardPass/#ParallelTemperingMonteCarlo.MachineLearningPotential.ForwardPass.forward_pass-Tuple{AbstractArray, Vararg{Any, 6}}","page":"ForwardPass","title":"ParallelTemperingMonteCarlo.MachineLearningPotential.ForwardPass.forward_pass","text":"forward_pass( input::AbstractArray, batchsize, num_layers, num_nodes, activation_functions, num_parameters, parameters)\nforward_pass(input::AbstractArray,batchsize,nnparams::NeuralNetworkPotential)\nforward_pass(eatom,input::AbstractArray,batchsize,nnparams::NeuralNetworkPotential; directory = pwd())\nforward_pass( eatom,input::AbstractArray, batchsize, num_layers, num_nodes, activation_functions, num_parameters, parameters,dir)\n\nCalls the RuNNer forward pass module written by A. Knoll located in directory. This self-defines the eatoms output, a vector of the atomic energies. batchsize is based on the number of atoms whose energies we want to determine. The remaining inputs are contained in nnparams. Details of this struct can be found in the definition of the NeuralNetworkPotential struct. The last two definitions are identical except eatoms is an input rather than a vector determined during the calculation. This can save memory in the long run.\n\n\n\n\n\n","category":"method"},{"location":"ForwardPass/#ParallelTemperingMonteCarlo.MachineLearningPotential.ForwardPass.lib_path-Tuple{}","page":"ForwardPass","title":"ParallelTemperingMonteCarlo.MachineLearningPotential.ForwardPass.lib_path","text":"lib_path()\n\nReturns path to binary library. E.g. this is where to find \"librunnerjulia.so\" for computing a runner forward pass. Redefine this function if locally compiled library is needed.\n\nExample\n\nParallelTemperingMonteCarlo.MachineLearningPotential.ForwardPass.lib_path() = \"my/path/\"\n\n\n\n\n\n","category":"method"},{"location":"MCStates/#MCStates","page":"MCStates","title":"MCStates","text":"","category":"section"},{"location":"MCStates/","page":"MCStates","title":"MCStates","text":"Modules = [ParallelTemperingMonteCarlo.MCStates]","category":"page"},{"location":"MCStates/#ParallelTemperingMonteCarlo.MCStates.MCState","page":"MCStates","title":"ParallelTemperingMonteCarlo.MCStates.MCState","text":"MCState(temp::Number, beta::Number, config::Config{N, BC, T}, dist2_mat::Matrix{Number}, new_dist2_vec::VorS, new_en::Number, en_tot::Number, potentialvariables::AbstractPotentialVariables, ensemble_variables::AbstractEnsembleVariables; max_displ = [0.1, 0.1, 1.0], max_boxlength = max_length(config.bc), count_atom = [0, 0], count_vol = [0, 0], count_exc = [0, 0]) where {T, N, BC}\nMCState(temp::Number, beta::Number, config::Config, ensemble::Etype, pot::Ptype; kwargs...)\n\nCreates an MC state vector at a given temperature temp containing temperature-dependent information\n\nFieldnames:\ntemp: temperature\nbeta: inverse temperature\nconfig: actual configuration in Markov chain Config  \ndist_2mat: matrix of squared distances d_ij between atoms i and j; generated automatically when potential pot given\nnew_dist2_vec: calculates the new r2 between atoms based on a trial move\nnew_en : new energy value for trial configuraiton\nen_tot: total energy of config; generated automatically when pot given\npotential_variables : mutable struct containing energy-related variables for the current configuration\nensemble_variables : mutable struct containing ensemble-related variables for the current configuraiton\nham: vector containing sampled energies - generated in MC run\ncount_atom: number of accepted atom moves - total and between adjustment of step sizes; key-word argument\ncount_vol: number of accepted volume moves - total and between adjustment of step sizes; key-word argument\ncount_exc: number of attempted (10%) and accepted exchanges with neighbouring trajectories; key-word argument\n\n\n\n\n\n","category":"type"},{"location":"MCStates/#ParallelTemperingMonteCarlo.MCStates.MCState-Union{Tuple{BC}, Tuple{N}, Tuple{T}, Tuple{Z}, Tuple{Number, Number, Config{N, BC, T}, Matrix{Z}, AbstractVector{Z} where Z<:Number, Number, Number, AbstractPotentialVariables, AbstractEnsembleVariables}} where {Z<:Number, T, N, BC}","page":"MCStates","title":"ParallelTemperingMonteCarlo.MCStates.MCState","text":"(MCState(temp::Number, beta::Number, config::Config{N, BC, T}, dist2_mat::Matrix{Z}, new_dist2_vec::VorS, new_en::Number, en_tot::Number, potentialvariables::AbstractPotentialVariables, ensemble_variables::AbstractEnsembleVariables; max_displ = [0.1, 0.1, 1.0], max_boxlength = max_length(config.bc), count_atom = [0, 0], count_vol = [0, 0], count_exc = [0, 0]) where {T, N, BC}) where Z <: Number\nMCState(temp::Number, beta::Number, config::Config, ensemble::Etype, pot::Ptype; kwargs...)\n\nConstructor for the MCState struct.\n\n\n\n\n\n","category":"method"},{"location":"MCStates/#ParallelTemperingMonteCarlo.MCStates.max_length-Tuple{SphericalBC}","page":"MCStates","title":"ParallelTemperingMonteCarlo.MCStates.max_length","text":"max_length(bc::SphericalBC)\nmax_length(bc::CubicBC)\nmax_length(bc::RhombicBC)\n\nReturns the max box_length allowed when a volume change step is performed. For spherical boundary, it is not used during the MC steps.\n\n\n\n\n\n","category":"method"},{"location":"Multihistogram/#Multihistogram","page":"Multihistogram","title":"Multihistogram","text":"","category":"section"},{"location":"Multihistogram/","page":"Multihistogram","title":"Multihistogram","text":"Modules = [ParallelTemperingMonteCarlo.Multihistogram]","category":"page"},{"location":"Multihistogram/#ParallelTemperingMonteCarlo.Multihistogram.Entropycalc-Tuple{Vector, Matrix, Matrix, AbstractVector{Z} where Z<:Number, Int64}","page":"Multihistogram","title":"ParallelTemperingMonteCarlo.Multihistogram.Entropycalc","text":"Entropycalc(alpha::Vector, bmat::Matrix, HistArray::Matrix, nsum::VorS, NBins::Int)\n\nHaving determined the vector solution to Ax=b, we input alpha and the \"b-matrix\" the term n_{ij}*(ln(n_{ij} + beta_iE_j) we can find the entropy as a function of energy.\n\n\n\n\n\n","category":"method"},{"location":"Multihistogram/#ParallelTemperingMonteCarlo.Multihistogram.amatrix-Tuple{Matrix, AbstractVector{Z} where Z<:Number, Int64}","page":"Multihistogram","title":"ParallelTemperingMonteCarlo.Multihistogram.amatrix","text":"amatrix(HistArray::Matrix, nsum::VorS, NTraj::Int; debug = false)\n\nThis function calculates the LHS of the multihistogram equation, the A matrix.\n\n\n\n\n\n","category":"method"},{"location":"Multihistogram/#ParallelTemperingMonteCarlo.Multihistogram.analysis-Tuple{AbstractVector{Z} where Z<:Number, Vector, AbstractVector{Z} where Z<:Number, Float64, Int64}","page":"Multihistogram","title":"ParallelTemperingMonteCarlo.Multihistogram.analysis","text":"analysis(energyvector::VorS, S_E::Vector, beta::VorS, kB::Float64, NPoints::Int; debug = false)\n\nNPoints determines how densely the points are populated.\n\nAnalysis takes in the energy bin values, entropy per energy and inverse temperatures beta. It calculates the temperatures T, and then finds the partition function – note that the boltzmann factors XP are self-scaling so they vary from 1 to 100, this is not necessary but prevents numerical errors in regions where the partition function would otherwise explode in value. \n\nOutput is the partition function, heat capacity and its first derivative as a function of temperature.\n\n\n\n\n\n","category":"method"},{"location":"Multihistogram/#ParallelTemperingMonteCarlo.Multihistogram.bvector-Union{Tuple{N}, Tuple{Matrix{N}, AbstractVector{Z} where Z<:Number, AbstractVector{Z} where Z<:Number, AbstractVector{Z} where Z<:Number, Int64, Int64}} where N<:Number","page":"Multihistogram","title":"ParallelTemperingMonteCarlo.Multihistogram.bvector","text":"bvector(HistArray::Matrix{N}, energyvector::VorS, beta::VorS, nsum::VorS, NTraj::Int, NBins::Int; debug = false) where N <: Number\n\nFunction to calculate the b vector relevant to solving the RHS of the multihistogram equation. \n\n\n\n\n\n","category":"method"},{"location":"Multihistogram/#ParallelTemperingMonteCarlo.Multihistogram.initialise-Tuple{String}","page":"Multihistogram","title":"ParallelTemperingMonteCarlo.Multihistogram.initialise","text":"initialise(xdir::String)\ninitialise(Output::Output,Tvec::TempGrid)\n\nFunction to retrieve all histogram information from the histogram directory outputted by Edison's PTMC code for method one, or directly from the output data given from the Julia PTMC code.\n\nWe read the files with readfile, process the file with processhist! and output all relevant arrays and constants as defined in the constituent functions.\n\n\n\n\n\n","category":"method"},{"location":"Multihistogram/#ParallelTemperingMonteCarlo.Multihistogram.multihistogram-Tuple{String}","page":"Multihistogram","title":"ParallelTemperingMonteCarlo.Multihistogram.multihistogram","text":"multihistogram(xdir::String; NPoints = 1000)\nmultihistogram(output::Output, Tvec::TempGrid; outdir = pwd(), NPoints = 1000)\n\nFunction has two methods which vary only in how the initialise function is called: one takes a directory and writes the output of the multihistogram analysis to that directory, the other takes the output and temperature grid and writes to the current directory unless specified otherwise. The output of this function are the four files defined in run_multihistogram.\n\n\n\n\n\n","category":"method"},{"location":"Multihistogram/#ParallelTemperingMonteCarlo.Multihistogram.nancheck-Tuple{Vector}","page":"Multihistogram","title":"ParallelTemperingMonteCarlo.Multihistogram.nancheck","text":"nancheck(X::Vector)\nnancheck(X::Matrix)\n\nFunction to ensure no vector or matrix contains NaN as this ruins the linear algebra.\n\n\n\n\n\n","category":"method"},{"location":"Multihistogram/#ParallelTemperingMonteCarlo.Multihistogram.processhist!-Union{Tuple{N}, Tuple{Matrix{N}, AbstractVector{Z} where Z<:Number, Int64, Int64}} where N<:Number","page":"Multihistogram","title":"ParallelTemperingMonteCarlo.Multihistogram.processhist!","text":"processhist!(HistArray::Matrix{N}, energyvector::VorS, NBins::Int, NTraj::Int) where N <: Number\n\nThis function normalises the histograms, collates the bins into their total counts and then deletes any energy bin containing no counts – this step is required to prevent NaN errors when doing the required calculations.\n\nHistArray,energyvector are the total histograms and values of the energy bins respectively, they are only changed by normalisation and removal of unnecessary rows nsum is merely the total histogram count for each energy bin\n\n\n\n\n\n","category":"method"},{"location":"Multihistogram/#ParallelTemperingMonteCarlo.Multihistogram.readfile-Tuple{String}","page":"Multihistogram","title":"ParallelTemperingMonteCarlo.Multihistogram.readfile","text":"readfile(xdir::String; debug = false)\nreadfile(output::Output, Tvals::TempGrid)\n\nMethod 1: xdir::String -reads output files for the FORTRAN PTMC code written by Edison Florez. Method 2: output::Output, Tvals::TempGrid - designed to receive output data from the Julia PTMC program: as the beta vector and NBins are defined in the structs they can be directly unpacked as output.\n\nxdir is the directory containing the histogram information usually /path/to/output/histograms\n\nHistArray is the NTrajxNBins array containing all histogram counts energyvector is an NBins length vector containing the energy value of each bin beta is an NTraj length vector of 1/(kBT) NBins,NTraj,kB are constant values required throughout\n\n\n\n\n\n","category":"method"},{"location":"Multihistogram/#ParallelTemperingMonteCarlo.Multihistogram.run_multihistogram-Union{Tuple{N}, Tuple{Matrix{N}, AbstractVector{Z} where Z<:Number, AbstractVector{Z} where Z<:Number, AbstractVector{Z} where Z<:Number, Int64, Int64, Float64, String, Int64}} where N<:Number","page":"Multihistogram","title":"ParallelTemperingMonteCarlo.Multihistogram.run_multihistogram","text":"run_multihistogram(HistArray::Matrix{N}, energyvector::VorS, beta::VorS, nsum::VorS, NTraj::Int, NBins::Int, kB::Float64, outdir::String, NPoints::Int; debug = false) where N <: Number\n\nThis function completely determines the properties of a system given by the output of the initialise function and a specified directory to write to. It outputs four files with the following information:\n\nhistograms.data The top line are the corresponding energy values and the next NTraj lines are the raw histogram data. This file can be used to plot the histograms if needed. \nSol.X containing the solution to the linear equation Ax=B, \nS.data containing the energy values and corresponding entropies \nanalysis.NVT containing the temperatures, partition function, heat capacity and its derivative. NB now includes the temperature dependent Entropy function.\n\n\n\n\n\n","category":"method"},{"location":"Multihistogram/#ParallelTemperingMonteCarlo.Multihistogram.systemsolver-Tuple{Matrix, AbstractVector{Z} where Z<:Number, AbstractVector{Z} where Z<:Number, AbstractVector{Z} where Z<:Number, Int64, Int64}","page":"Multihistogram","title":"ParallelTemperingMonteCarlo.Multihistogram.systemsolver","text":"systemsolver(HistArray::Matrix, energyvector::VorS, beta::VorS, nsum::VorS, NTraj::Int, NBins::Int; debug = false)\n\nsystemsolver is used to determine the solution Alpha to the linear equation Ax = b where A and b are the A matrix and b vector described above. This is fundamentally how the multihistogram method works.\n\n\n\n\n\n","category":"method"},{"location":"Multihistogram_NVT/#Multihistogram_NVT","page":"Multihistogram_NVT","title":"Multihistogram_NVT","text":"","category":"section"},{"location":"Multihistogram_NVT/","page":"Multihistogram_NVT","title":"Multihistogram_NVT","text":"Modules = [ParallelTemperingMonteCarlo.Multihistogram_NVT]","category":"page"},{"location":"Multihistogram_NVT/#ParallelTemperingMonteCarlo.Multihistogram_NVT.multihistogram_NVT-Tuple{AbstractEnsemble, TempGrid, Output, Number, Bool}","page":"Multihistogram_NVT","title":"ParallelTemperingMonteCarlo.Multihistogram_NVT.multihistogram_NVT","text":"multihistogram_NVT(ensemble::AbstractEnsemble, temp::TempGrid, results::Output, conv_threshold::Number, readfile::Bool; debug = false)\n\nMultihistogram analysis for NVT:\n\nconv_threshold is the convergence threshold, which user can choose.\ndebug kwarg determines whether to print debug information. Defaults to false.\nreadfile can only be false.\nExample: multihistogram_NVT(ensemble, temp, results, 10^(-3), false)\n\n\n\n\n\n","category":"method"},{"location":"ne13/","page":"ne13.jl","title":"ne13.jl","text":"EditURL = \"../../examples/ne13.jl\"","category":"page"},{"location":"ne13/#Example-1:-Melting-a-13-Atoms-Neon-Cluster","page":"ne13.jl","title":"Example 1: Melting a 13-Atoms Neon Cluster","text":"","category":"section"},{"location":"ne13/","page":"ne13.jl","title":"ne13.jl","text":"This is an example calculation for finding the melting temperature of a 13-atoms neon cluster using a parallel-tempering Monte Carlo simulation. First, we load ParallelTemperingMonteCarlo and Plots:","category":"page"},{"location":"ne13/","page":"ne13.jl","title":"ne13.jl","text":"using Plots\nusing ParallelTemperingMonteCarlo","category":"page"},{"location":"ne13/#Setting-up-the-Model","page":"ne13.jl","title":"Setting up the Model","text":"","category":"section"},{"location":"ne13/","page":"ne13.jl","title":"ne13.jl","text":"Firstly, we set the number of atoms:","category":"page"},{"location":"ne13/","page":"ne13.jl","title":"ne13.jl","text":"n_atoms = 13;","category":"page"},{"location":"ne13/","page":"ne13.jl","title":"ne13.jl","text":"Next, we define the potential, here an extended Lennard Jones potential with coefficients for even powers of r, starting from powers of -6 to -16:","category":"page"},{"location":"ne13/","page":"ne13.jl","title":"ne13.jl","text":"c=[-10.5097942564988, 989.725135614556, -101383.865938807, 3918846.12841668, -56234083.4334278, 288738837.441765]\npot = ELJPotentialEven{6}(c)","category":"page"},{"location":"ne13/","page":"ne13.jl","title":"ne13.jl","text":"ELJPotentialEven{6, Float64}([-10.5097942564988, 989.725135614556, -101383.865938807, 3.91884612841668e6, -5.62340834334278e7, 2.88738837441765e8])","category":"page"},{"location":"ne13/","page":"ne13.jl","title":"ne13.jl","text":"We further have to define the starting configuration of the simulation. For Ne13 we choose the icosahedral ground state of Ne13 (from the Cambridge cluster database). The atomic positions are given in Angstrom, which are then converted to Bohr radii (as the program uses atomic units).","category":"page"},{"location":"ne13/","page":"ne13.jl","title":"ne13.jl","text":"pos_ne13 = [[2.825384495892464, 0.928562467914040, 0.505520149314310],\n[2.023342172678102,\t-2.136126268595355, 0.666071287554958],\n[2.033761811732818,\t-0.643989413759464, -2.133000349161121],\n[0.979777205108572,\t2.312002562803556, -1.671909307631893],\n[0.962914279874254,\t-0.102326586625353, 2.857083360096907],\n[0.317957619634043,\t2.646768968413408, 1.412132053672896],\n[-2.825388342924982, -0.928563755928189, -0.505520471387560],\n[-0.317955944853142, -2.646769840660271, -1.412131825293682],\n[-0.979776174195320, -2.312003751825495, 1.671909138648006],\n[-0.962916072888105, 0.102326392265998,\t-2.857083272537599],\n[-2.023340541398004, 2.136128558801072,\t-0.666071089291685],\n[-2.033762834001679, 0.643989905095452, 2.132999911364582],\n[0.000002325340981,\t0.000000762100600, 0.000000414930733]];\nAtoBohr = 1.8897259886;\npos_ne13 = pos_ne13 * AtoBohr","category":"page"},{"location":"ne13/","page":"ne13.jl","title":"ne13.jl","text":"13-element Vector{Vector{Float64}}:\n [5.339202509675499, 1.7547286276557148, 0.9552945639202041]\n [3.8235622875401982, -4.036693324695786, 1.2586922223528678]\n [3.8432525502537267, -1.2169635315645375, -4.030786193502644]\n [1.8515104475315411, 4.369051328639683, -3.1594504692142205]\n [1.8196441394724319, -0.19336921007065874, 5.399104677171738]\n [0.6008527770958447, 5.001668105430829, 2.668542641160762]\n [-5.339209779512827, -1.754731061649526, -0.9552951725503948]\n [-0.6008496122188508, -5.001669753738395, -2.668542209586626]\n [-1.851508499387977, -4.369053575565342, 3.1594501498809775]\n [-1.8196475277773039, 0.19336884278473446, -5.399104511708638]\n [-3.823559204867802, 4.036697652557049, -1.2586918476896083]\n [-3.8432544820617607, 1.2169644600549232, 4.030785366187147]\n [4.394257284152319e-6, 1.4401613097476533e-6, 7.841053896189476e-7]","category":"page"},{"location":"ne13/","page":"ne13.jl","title":"ne13.jl","text":"Finally, we have to choose appropriate boundary conditions, here spherical boundary conditions (solid boundary around the cluster), to suppress atom loss processes. Finding this radius is a non-trivial task, and has to be chosen and tested carefully. A radius chosen too small will exert artificial pressure on the cluster while a too large value leads to atoms being ejected.","category":"page"},{"location":"ne13/","page":"ne13.jl","title":"ne13.jl","text":"bc_ne13 = SphericalBC(radius=5.32*AtoBohr)","category":"page"},{"location":"ne13/","page":"ne13.jl","title":"ne13.jl","text":"SphericalBC{Float64}(101.06969058367278)","category":"page"},{"location":"ne13/","page":"ne13.jl","title":"ne13.jl","text":"We package the initial configuration and boundary conditions into a Config struct:","category":"page"},{"location":"ne13/","page":"ne13.jl","title":"ne13.jl","text":"start_config = Config(pos_ne13, bc_ne13)","category":"page"},{"location":"ne13/","page":"ne13.jl","title":"ne13.jl","text":"Config{13, SphericalBC{Float64}, Float64}(StaticArraysCore.SVector{3, Float64}[[5.339202509675499, 1.7547286276557148, 0.9552945639202041], [3.8235622875401982, -4.036693324695786, 1.2586922223528678], [3.8432525502537267, -1.2169635315645375, -4.030786193502644], [1.8515104475315411, 4.369051328639683, -3.1594504692142205], [1.8196441394724319, -0.19336921007065874, 5.399104677171738], [0.6008527770958447, 5.001668105430829, 2.668542641160762], [-5.339209779512827, -1.754731061649526, -0.9552951725503948], [-0.6008496122188508, -5.001669753738395, -2.668542209586626], [-1.851508499387977, -4.369053575565342, 3.1594501498809775], [-1.8196475277773039, 0.19336884278473446, -5.399104511708638], [-3.823559204867802, 4.036697652557049, -1.2586918476896083], [-3.8432544820617607, 1.2169644600549232, 4.030785366187147], [4.394257284152319e-6, 1.4401613097476533e-6, 7.841053896189476e-7]], SphericalBC{Float64}(101.06969058367278))","category":"page"},{"location":"ne13/#Setting-up-the-Simulation-Parameters","page":"ne13.jl","title":"Setting up the Simulation Parameters","text":"","category":"section"},{"location":"ne13/","page":"ne13.jl","title":"ne13.jl","text":"We  first set the temperature grid, which defines the range of temperatures we consider. This is done by defining the upper and lower temperature limits, along with the number of temperatures (also called trajectories) we want to sample. Note, that a geometrical distribution of temperatures is chosen to maximise overlaps in the energy histograms.","category":"page"},{"location":"ne13/","page":"ne13.jl","title":"ne13.jl","text":"ti = 4.;\ntf = 16.;\nn_traj = 25;\ntemp = TempGrid{n_traj}(ti,tf)","category":"page"},{"location":"ne13/","page":"ne13.jl","title":"ne13.jl","text":"TempGrid{25, Float64}([4.0, 4.237852377437181, 4.489848193237492, 4.756828460010884, 5.039684199579493, 5.3393594166801375, 5.656854249492381, 5.993228307506726, 6.3496042078727974, 6.727171322029716, 7.127189745122714, 7.550994501453547, 8.0, 8.475704754874362, 8.979696386474984, 9.513656920021768, 10.079368399158986, 10.678718833360275, 11.313708498984761, 11.986456615013452, 12.699208415745597, 13.454342644059432, 14.254379490245428, 15.101989002907096, 16.0], [78943.7463157743, 74512.97429431944, 70330.88239791946, 66383.51328363325, 62657.692973985395, 59140.986890041044, 55821.65835215453, 52688.62940989218, 49731.44387040245, 46940.232401844325, 44305.679595409776, 41818.99287601273, 39471.87315788715, 37256.48714715972, 35165.44119895973, 33191.756641816624, 31328.846486992697, 29570.493445020522, 27910.829176077266, 26344.31470494609, 24865.721935201218, 23470.116200922163, 22152.839797704888, 20909.49643800636, 19735.936578943576])","category":"page"},{"location":"ne13/","page":"ne13.jl","title":"ne13.jl","text":"Now we set the hyperparameters for this simulation:","category":"page"},{"location":"ne13/","page":"ne13.jl","title":"ne13.jl","text":"mc_cycles is the number of Monte Carlo cycles we want to run, the longer the more accurate but also more expensive.\nmc_sample is the number of MC cycles after which the energy of the state is recorded.\nmax_displ_atom determines the maximum displacement of an atom over a cycle. The maximum displacement is automatically adjusted in the program guaranteeing a 40-60% acceptance rate.\nn_adjust is the number of moves after which the step size of atom moves is adjusted.","category":"page"},{"location":"ne13/","page":"ne13.jl","title":"ne13.jl","text":"mc_cycles = 100000;\nmc_sample = 1;\ndispl_atom = 0.1;\nmax_displ_atom = [0.1*sqrt(displ_atom*temp.t_grid[i]) for i in 1:n_traj];\nn_adjust = 100;","category":"page"},{"location":"ne13/","page":"ne13.jl","title":"ne13.jl","text":"For neatness, all parameters are collected in a MCParams struct:","category":"page"},{"location":"ne13/","page":"ne13.jl","title":"ne13.jl","text":"mc_params = MCParams(mc_cycles, n_traj, n_atoms, mc_sample = mc_sample, n_adjust = n_adjust)","category":"page"},{"location":"ne13/","page":"ne13.jl","title":"ne13.jl","text":"MCParams(100000, 20000, 1, 25, 13, 100, 100, 0.4, 0.6)","category":"page"},{"location":"ne13/","page":"ne13.jl","title":"ne13.jl","text":"We then define the ensemble, here we are using the NVT ensemble (keeping N, the number of atoms, V, the volume, and T, the temperature constant). This allows us to derive a MoveStrategy to feed into the PTMC simulation. Here, we do n_atoms atom displacements of randomy chosen atoms per Monte Carlo cycle.","category":"page"},{"location":"ne13/","page":"ne13.jl","title":"ne13.jl","text":"ensemble = NVT(n_atoms);\nmove_strat = MoveStrategy(ensemble)","category":"page"},{"location":"ne13/","page":"ne13.jl","title":"ne13.jl","text":"MoveStrategy{13, NVT}(NVT(13, 13, 0), [\"atommove\", \"atommove\", \"atommove\", \"atommove\", \"atommove\", \"atommove\", \"atommove\", \"atommove\", \"atommove\", \"atommove\", \"atommove\", \"atommove\", \"atommove\"])","category":"page"},{"location":"ne13/#Running-the-Simulation","page":"ne13.jl","title":"Running the Simulation","text":"","category":"section"},{"location":"ne13/","page":"ne13.jl","title":"ne13.jl","text":"Finally, we run the simulation. This method returns the current state and results of the simulation. The data is stored in various local files created in the current working directory.","category":"page"},{"location":"ne13/","page":"ne13.jl","title":"ne13.jl","text":"mc_states, results = ptmc_run!(mc_params,temp,start_config,pot,ensemble;save=1000);","category":"page"},{"location":"ne13/","page":"ne13.jl","title":"ne13.jl","text":"params set\nequilibration complete\nMC loop done.\n[19.837474344788426, 19.83371505779366, 20.226433548900932, 20.349548527065707, 20.045363669703057, 20.98673561840701, 21.355449704157014, 22.389699912625847, 22.74707999186602, 22.355376163725754, 23.34178884531522, 24.321644003798163, 26.316446214437477, 27.190817953938804, 28.46665958838569, 35.666527612520696, 44.953886794988, 52.56954079020657, 70.40461962347662, 79.48681567279755, 84.50004084764592, 71.14087520219216, 50.717359544947286, 43.29098320103348, 40.628215611595614]\ndone\n","category":"page"},{"location":"ne13/#Post-processing-and-Analyzing-of-Results","page":"ne13.jl","title":"Post-processing and Analyzing of Results","text":"","category":"section"},{"location":"ne13/","page":"ne13.jl","title":"ne13.jl","text":"The raw heat capacity plot is obtained from:","category":"page"},{"location":"ne13/","page":"ne13.jl","title":"ne13.jl","text":"plot(temp.t_grid,results.heat_cap)","category":"page"},{"location":"ne13/","page":"ne13.jl","title":"ne13.jl","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip690\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip690)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip691\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip690)\" d=\"M141.853 1486.45 L2352.76 1486.45 L2352.76 47.2441 L141.853 47.2441  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip692\">\n    <rect x=\"141\" y=\"47\" width=\"2212\" height=\"1440\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip692)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"378.239,1486.45 378.239,47.2441 \"/>\n<polyline clip-path=\"url(#clip692)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"812.772,1486.45 812.772,47.2441 \"/>\n<polyline clip-path=\"url(#clip692)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1247.3,1486.45 1247.3,47.2441 \"/>\n<polyline clip-path=\"url(#clip692)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1681.84,1486.45 1681.84,47.2441 \"/>\n<polyline clip-path=\"url(#clip692)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2116.37,1486.45 2116.37,47.2441 \"/>\n<polyline clip-path=\"url(#clip692)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"141.853,1442.22 2352.76,1442.22 \"/>\n<polyline clip-path=\"url(#clip692)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"141.853,1232.26 2352.76,1232.26 \"/>\n<polyline clip-path=\"url(#clip692)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"141.853,1022.3 2352.76,1022.3 \"/>\n<polyline clip-path=\"url(#clip692)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"141.853,812.342 2352.76,812.342 \"/>\n<polyline clip-path=\"url(#clip692)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"141.853,602.381 2352.76,602.381 \"/>\n<polyline clip-path=\"url(#clip692)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"141.853,392.42 2352.76,392.42 \"/>\n<polyline clip-path=\"url(#clip692)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"141.853,182.459 2352.76,182.459 \"/>\n<polyline clip-path=\"url(#clip690)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"141.853,1486.45 2352.76,1486.45 \"/>\n<polyline clip-path=\"url(#clip690)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"378.239,1486.45 378.239,1467.55 \"/>\n<polyline clip-path=\"url(#clip690)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"812.772,1486.45 812.772,1467.55 \"/>\n<polyline clip-path=\"url(#clip690)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1247.3,1486.45 1247.3,1467.55 \"/>\n<polyline clip-path=\"url(#clip690)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1681.84,1486.45 1681.84,1467.55 \"/>\n<polyline clip-path=\"url(#clip690)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2116.37,1486.45 2116.37,1467.55 \"/>\n<path clip-path=\"url(#clip690)\" d=\"M345.403 1514.29 L363.76 1514.29 L363.76 1518.22 L349.686 1518.22 L349.686 1526.7 Q350.704 1526.35 351.723 1526.19 Q352.741 1526 353.76 1526 Q359.547 1526 362.926 1529.17 Q366.306 1532.34 366.306 1537.76 Q366.306 1543.34 362.834 1546.44 Q359.362 1549.52 353.042 1549.52 Q350.866 1549.52 348.598 1549.15 Q346.352 1548.78 343.945 1548.04 L343.945 1543.34 Q346.028 1544.47 348.251 1545.03 Q350.473 1545.58 352.95 1545.58 Q356.954 1545.58 359.292 1543.48 Q361.63 1541.37 361.63 1537.76 Q361.63 1534.15 359.292 1532.04 Q356.954 1529.94 352.95 1529.94 Q351.075 1529.94 349.2 1530.35 Q347.348 1530.77 345.403 1531.65 L345.403 1514.29 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip690)\" d=\"M375.519 1542.97 L380.403 1542.97 L380.403 1548.85 L375.519 1548.85 L375.519 1542.97 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip690)\" d=\"M400.588 1517.37 Q396.977 1517.37 395.148 1520.93 Q393.343 1524.47 393.343 1531.6 Q393.343 1538.71 395.148 1542.27 Q396.977 1545.82 400.588 1545.82 Q404.222 1545.82 406.028 1542.27 Q407.857 1538.71 407.857 1531.6 Q407.857 1524.47 406.028 1520.93 Q404.222 1517.37 400.588 1517.37 M400.588 1513.66 Q406.398 1513.66 409.454 1518.27 Q412.533 1522.85 412.533 1531.6 Q412.533 1540.33 409.454 1544.94 Q406.398 1549.52 400.588 1549.52 Q394.778 1549.52 391.699 1544.94 Q388.644 1540.33 388.644 1531.6 Q388.644 1522.85 391.699 1518.27 Q394.778 1513.66 400.588 1513.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip690)\" d=\"M779.091 1514.29 L801.313 1514.29 L801.313 1516.28 L788.767 1548.85 L783.883 1548.85 L795.688 1518.22 L779.091 1518.22 L779.091 1514.29 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip690)\" d=\"M810.434 1542.97 L815.318 1542.97 L815.318 1548.85 L810.434 1548.85 L810.434 1542.97 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip690)\" d=\"M825.549 1514.29 L843.906 1514.29 L843.906 1518.22 L829.832 1518.22 L829.832 1526.7 Q830.85 1526.35 831.869 1526.19 Q832.887 1526 833.906 1526 Q839.693 1526 843.072 1529.17 Q846.452 1532.34 846.452 1537.76 Q846.452 1543.34 842.98 1546.44 Q839.508 1549.52 833.188 1549.52 Q831.012 1549.52 828.744 1549.15 Q826.498 1548.78 824.091 1548.04 L824.091 1543.34 Q826.174 1544.47 828.397 1545.03 Q830.619 1545.58 833.096 1545.58 Q837.1 1545.58 839.438 1543.48 Q841.776 1541.37 841.776 1537.76 Q841.776 1534.15 839.438 1532.04 Q837.1 1529.94 833.096 1529.94 Q831.221 1529.94 829.346 1530.35 Q827.494 1530.77 825.549 1531.65 L825.549 1514.29 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip690)\" d=\"M1199.38 1544.91 L1207.02 1544.91 L1207.02 1518.55 L1198.71 1520.21 L1198.71 1515.95 L1206.97 1514.29 L1211.64 1514.29 L1211.64 1544.91 L1219.28 1544.91 L1219.28 1548.85 L1199.38 1548.85 L1199.38 1544.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip690)\" d=\"M1238.73 1517.37 Q1235.12 1517.37 1233.29 1520.93 Q1231.48 1524.47 1231.48 1531.6 Q1231.48 1538.71 1233.29 1542.27 Q1235.12 1545.82 1238.73 1545.82 Q1242.36 1545.82 1244.17 1542.27 Q1246 1538.71 1246 1531.6 Q1246 1524.47 1244.17 1520.93 Q1242.36 1517.37 1238.73 1517.37 M1238.73 1513.66 Q1244.54 1513.66 1247.59 1518.27 Q1250.67 1522.85 1250.67 1531.6 Q1250.67 1540.33 1247.59 1544.94 Q1244.54 1549.52 1238.73 1549.52 Q1232.92 1549.52 1229.84 1544.94 Q1226.78 1540.33 1226.78 1531.6 Q1226.78 1522.85 1229.84 1518.27 Q1232.92 1513.66 1238.73 1513.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip690)\" d=\"M1258.89 1542.97 L1263.77 1542.97 L1263.77 1548.85 L1258.89 1548.85 L1258.89 1542.97 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip690)\" d=\"M1283.96 1517.37 Q1280.35 1517.37 1278.52 1520.93 Q1276.71 1524.47 1276.71 1531.6 Q1276.71 1538.71 1278.52 1542.27 Q1280.35 1545.82 1283.96 1545.82 Q1287.59 1545.82 1289.4 1542.27 Q1291.23 1538.71 1291.23 1531.6 Q1291.23 1524.47 1289.4 1520.93 Q1287.59 1517.37 1283.96 1517.37 M1283.96 1513.66 Q1289.77 1513.66 1292.83 1518.27 Q1295.9 1522.85 1295.9 1531.6 Q1295.9 1540.33 1292.83 1544.94 Q1289.77 1549.52 1283.96 1549.52 Q1278.15 1549.52 1275.07 1544.94 Q1272.01 1540.33 1272.01 1531.6 Q1272.01 1522.85 1275.07 1518.27 Q1278.15 1513.66 1283.96 1513.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip690)\" d=\"M1634.41 1544.91 L1642.05 1544.91 L1642.05 1518.55 L1633.74 1520.21 L1633.74 1515.95 L1642 1514.29 L1646.68 1514.29 L1646.68 1544.91 L1654.31 1544.91 L1654.31 1548.85 L1634.41 1548.85 L1634.41 1544.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip690)\" d=\"M1667.79 1544.91 L1684.11 1544.91 L1684.11 1548.85 L1662.16 1548.85 L1662.16 1544.91 Q1664.82 1542.16 1669.41 1537.53 Q1674.01 1532.88 1675.19 1531.53 Q1677.44 1529.01 1678.32 1527.27 Q1679.22 1525.51 1679.22 1523.82 Q1679.22 1521.07 1677.28 1519.33 Q1675.36 1517.6 1672.25 1517.6 Q1670.05 1517.6 1667.6 1518.36 Q1665.17 1519.13 1662.39 1520.68 L1662.39 1515.95 Q1665.22 1514.82 1667.67 1514.24 Q1670.12 1513.66 1672.16 1513.66 Q1677.53 1513.66 1680.73 1516.35 Q1683.92 1519.03 1683.92 1523.52 Q1683.92 1525.65 1683.11 1527.57 Q1682.32 1529.47 1680.22 1532.07 Q1679.64 1532.74 1676.54 1535.95 Q1673.43 1539.15 1667.79 1544.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip690)\" d=\"M1693.92 1542.97 L1698.8 1542.97 L1698.8 1548.85 L1693.92 1548.85 L1693.92 1542.97 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip690)\" d=\"M1709.04 1514.29 L1727.39 1514.29 L1727.39 1518.22 L1713.32 1518.22 L1713.32 1526.7 Q1714.34 1526.35 1715.36 1526.19 Q1716.37 1526 1717.39 1526 Q1723.18 1526 1726.56 1529.17 Q1729.94 1532.34 1729.94 1537.76 Q1729.94 1543.34 1726.47 1546.44 Q1722.99 1549.52 1716.68 1549.52 Q1714.5 1549.52 1712.23 1549.15 Q1709.99 1548.78 1707.58 1548.04 L1707.58 1543.34 Q1709.66 1544.47 1711.88 1545.03 Q1714.11 1545.58 1716.58 1545.58 Q1720.59 1545.58 1722.92 1543.48 Q1725.26 1541.37 1725.26 1537.76 Q1725.26 1534.15 1722.92 1532.04 Q1720.59 1529.94 1716.58 1529.94 Q1714.71 1529.94 1712.83 1530.35 Q1710.98 1530.77 1709.04 1531.65 L1709.04 1514.29 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip690)\" d=\"M2068.44 1544.91 L2076.08 1544.91 L2076.08 1518.55 L2067.77 1520.21 L2067.77 1515.95 L2076.03 1514.29 L2080.71 1514.29 L2080.71 1544.91 L2088.35 1544.91 L2088.35 1548.85 L2068.44 1548.85 L2068.44 1544.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip690)\" d=\"M2097.84 1514.29 L2116.2 1514.29 L2116.2 1518.22 L2102.12 1518.22 L2102.12 1526.7 Q2103.14 1526.35 2104.16 1526.19 Q2105.18 1526 2106.2 1526 Q2111.98 1526 2115.36 1529.17 Q2118.74 1532.34 2118.74 1537.76 Q2118.74 1543.34 2115.27 1546.44 Q2111.8 1549.52 2105.48 1549.52 Q2103.3 1549.52 2101.03 1549.15 Q2098.79 1548.78 2096.38 1548.04 L2096.38 1543.34 Q2098.47 1544.47 2100.69 1545.03 Q2102.91 1545.58 2105.39 1545.58 Q2109.39 1545.58 2111.73 1543.48 Q2114.07 1541.37 2114.07 1537.76 Q2114.07 1534.15 2111.73 1532.04 Q2109.39 1529.94 2105.39 1529.94 Q2103.51 1529.94 2101.64 1530.35 Q2099.78 1530.77 2097.84 1531.65 L2097.84 1514.29 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip690)\" d=\"M2127.96 1542.97 L2132.84 1542.97 L2132.84 1548.85 L2127.96 1548.85 L2127.96 1542.97 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip690)\" d=\"M2153.02 1517.37 Q2149.41 1517.37 2147.59 1520.93 Q2145.78 1524.47 2145.78 1531.6 Q2145.78 1538.71 2147.59 1542.27 Q2149.41 1545.82 2153.02 1545.82 Q2156.66 1545.82 2158.46 1542.27 Q2160.29 1538.71 2160.29 1531.6 Q2160.29 1524.47 2158.46 1520.93 Q2156.66 1517.37 2153.02 1517.37 M2153.02 1513.66 Q2158.84 1513.66 2161.89 1518.27 Q2164.97 1522.85 2164.97 1531.6 Q2164.97 1540.33 2161.89 1544.94 Q2158.84 1549.52 2153.02 1549.52 Q2147.21 1549.52 2144.14 1544.94 Q2141.08 1540.33 2141.08 1531.6 Q2141.08 1522.85 2144.14 1518.27 Q2147.21 1513.66 2153.02 1513.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip690)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"141.853,1486.45 141.853,47.2441 \"/>\n<polyline clip-path=\"url(#clip690)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"141.853,1442.22 160.751,1442.22 \"/>\n<polyline clip-path=\"url(#clip690)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"141.853,1232.26 160.751,1232.26 \"/>\n<polyline clip-path=\"url(#clip690)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"141.853,1022.3 160.751,1022.3 \"/>\n<polyline clip-path=\"url(#clip690)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"141.853,812.342 160.751,812.342 \"/>\n<polyline clip-path=\"url(#clip690)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"141.853,602.381 160.751,602.381 \"/>\n<polyline clip-path=\"url(#clip690)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"141.853,392.42 160.751,392.42 \"/>\n<polyline clip-path=\"url(#clip690)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"141.853,182.459 160.751,182.459 \"/>\n<path clip-path=\"url(#clip690)\" d=\"M57.7745 1455.57 L74.0939 1455.57 L74.0939 1459.5 L52.1495 1459.5 L52.1495 1455.57 Q54.8115 1452.81 59.3949 1448.18 Q64.0013 1443.53 65.1819 1442.19 Q67.4272 1439.67 68.3068 1437.93 Q69.2096 1436.17 69.2096 1434.48 Q69.2096 1431.73 67.2652 1429.99 Q65.3439 1428.25 62.2421 1428.25 Q60.043 1428.25 57.5893 1429.02 Q55.1588 1429.78 52.381 1431.33 L52.381 1426.61 Q55.2051 1425.48 57.6588 1424.9 Q60.1124 1424.32 62.1495 1424.32 Q67.5198 1424.32 70.7142 1427 Q73.9087 1429.69 73.9087 1434.18 Q73.9087 1436.31 73.0985 1438.23 Q72.3115 1440.13 70.205 1442.72 Q69.6263 1443.39 66.5245 1446.61 Q63.4226 1449.81 57.7745 1455.57 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip690)\" d=\"M93.9086 1428.02 Q90.2975 1428.02 88.4688 1431.59 Q86.6632 1435.13 86.6632 1442.26 Q86.6632 1449.37 88.4688 1452.93 Q90.2975 1456.47 93.9086 1456.47 Q97.5428 1456.47 99.3483 1452.93 Q101.177 1449.37 101.177 1442.26 Q101.177 1435.13 99.3483 1431.59 Q97.5428 1428.02 93.9086 1428.02 M93.9086 1424.32 Q99.7187 1424.32 102.774 1428.93 Q105.853 1433.51 105.853 1442.26 Q105.853 1450.99 102.774 1455.59 Q99.7187 1460.18 93.9086 1460.18 Q88.0984 1460.18 85.0197 1455.59 Q81.9642 1450.99 81.9642 1442.26 Q81.9642 1433.51 85.0197 1428.93 Q88.0984 1424.32 93.9086 1424.32 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip690)\" d=\"M67.9133 1230.91 Q71.2698 1231.63 73.1448 1233.9 Q75.0429 1236.16 75.0429 1239.5 Q75.0429 1244.61 71.5244 1247.41 Q68.0059 1250.21 61.5245 1250.21 Q59.3486 1250.21 57.0338 1249.78 Q54.7421 1249.36 52.2884 1248.5 L52.2884 1243.99 Q54.2328 1245.12 56.5477 1245.7 Q58.8625 1246.28 61.3856 1246.28 Q65.7837 1246.28 68.0754 1244.54 Q70.3902 1242.81 70.3902 1239.5 Q70.3902 1236.44 68.2374 1234.73 Q66.1078 1232.99 62.2884 1232.99 L58.2606 1232.99 L58.2606 1229.15 L62.4735 1229.15 Q65.9226 1229.15 67.7513 1227.78 Q69.58 1226.4 69.58 1223.8 Q69.58 1221.14 67.6819 1219.73 Q65.8069 1218.29 62.2884 1218.29 Q60.3671 1218.29 58.168 1218.71 Q55.969 1219.13 53.3301 1220.01 L53.3301 1215.84 Q55.9921 1215.1 58.3069 1214.73 Q60.6449 1214.36 62.705 1214.36 Q68.0291 1214.36 71.1309 1216.79 Q74.2327 1219.2 74.2327 1223.32 Q74.2327 1226.19 72.5892 1228.18 Q70.9457 1230.15 67.9133 1230.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip690)\" d=\"M93.9086 1218.06 Q90.2975 1218.06 88.4688 1221.63 Q86.6632 1225.17 86.6632 1232.3 Q86.6632 1239.4 88.4688 1242.97 Q90.2975 1246.51 93.9086 1246.51 Q97.5428 1246.51 99.3483 1242.97 Q101.177 1239.4 101.177 1232.3 Q101.177 1225.17 99.3483 1221.63 Q97.5428 1218.06 93.9086 1218.06 M93.9086 1214.36 Q99.7187 1214.36 102.774 1218.97 Q105.853 1223.55 105.853 1232.3 Q105.853 1241.03 102.774 1245.63 Q99.7187 1250.21 93.9086 1250.21 Q88.0984 1250.21 85.0197 1245.63 Q81.9642 1241.03 81.9642 1232.3 Q81.9642 1223.55 85.0197 1218.97 Q88.0984 1214.36 93.9086 1214.36 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip690)\" d=\"M66.5939 1009.1 L54.7884 1027.55 L66.5939 1027.55 L66.5939 1009.1 M65.367 1005.02 L71.2466 1005.02 L71.2466 1027.55 L76.1772 1027.55 L76.1772 1031.43 L71.2466 1031.43 L71.2466 1039.58 L66.5939 1039.58 L66.5939 1031.43 L50.9921 1031.43 L50.9921 1026.92 L65.367 1005.02 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip690)\" d=\"M93.9086 1008.1 Q90.2975 1008.1 88.4688 1011.67 Q86.6632 1015.21 86.6632 1022.34 Q86.6632 1029.44 88.4688 1033.01 Q90.2975 1036.55 93.9086 1036.55 Q97.5428 1036.55 99.3483 1033.01 Q101.177 1029.44 101.177 1022.34 Q101.177 1015.21 99.3483 1011.67 Q97.5428 1008.1 93.9086 1008.1 M93.9086 1004.4 Q99.7187 1004.4 102.774 1009 Q105.853 1013.59 105.853 1022.34 Q105.853 1031.06 102.774 1035.67 Q99.7187 1040.25 93.9086 1040.25 Q88.0984 1040.25 85.0197 1035.67 Q81.9642 1031.06 81.9642 1022.34 Q81.9642 1013.59 85.0197 1009 Q88.0984 1004.4 93.9086 1004.4 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip690)\" d=\"M53.793 795.062 L72.1494 795.062 L72.1494 798.997 L58.0754 798.997 L58.0754 807.469 Q59.0939 807.122 60.1124 806.96 Q61.131 806.775 62.1495 806.775 Q67.9365 806.775 71.3161 809.946 Q74.6957 813.117 74.6957 818.534 Q74.6957 824.113 71.2235 827.215 Q67.7513 830.293 61.4319 830.293 Q59.256 830.293 56.9875 829.923 Q54.7421 829.552 52.3347 828.812 L52.3347 824.113 Q54.418 825.247 56.6402 825.803 Q58.8625 826.358 61.3393 826.358 Q65.3439 826.358 67.6819 824.252 Q70.0198 822.145 70.0198 818.534 Q70.0198 814.923 67.6819 812.816 Q65.3439 810.71 61.3393 810.71 Q59.4643 810.71 57.5893 811.127 Q55.7375 811.543 53.793 812.423 L53.793 795.062 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip690)\" d=\"M93.9086 798.141 Q90.2975 798.141 88.4688 801.705 Q86.6632 805.247 86.6632 812.377 Q86.6632 819.483 88.4688 823.048 Q90.2975 826.59 93.9086 826.59 Q97.5428 826.59 99.3483 823.048 Q101.177 819.483 101.177 812.377 Q101.177 805.247 99.3483 801.705 Q97.5428 798.141 93.9086 798.141 M93.9086 794.437 Q99.7187 794.437 102.774 799.043 Q105.853 803.627 105.853 812.377 Q105.853 821.103 102.774 825.71 Q99.7187 830.293 93.9086 830.293 Q88.0984 830.293 85.0197 825.71 Q81.9642 821.103 81.9642 812.377 Q81.9642 803.627 85.0197 799.043 Q88.0984 794.437 93.9086 794.437 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip690)\" d=\"M64.3254 600.518 Q61.1773 600.518 59.3254 602.67 Q57.4967 604.823 57.4967 608.573 Q57.4967 612.3 59.3254 614.476 Q61.1773 616.629 64.3254 616.629 Q67.4735 616.629 69.3022 614.476 Q71.1541 612.3 71.1541 608.573 Q71.1541 604.823 69.3022 602.67 Q67.4735 600.518 64.3254 600.518 M73.6077 585.865 L73.6077 590.124 Q71.8485 589.291 70.0429 588.851 Q68.2606 588.411 66.5013 588.411 Q61.8717 588.411 59.418 591.536 Q56.9875 594.661 56.6402 600.981 Q58.006 598.967 60.0662 597.902 Q62.1263 596.814 64.6032 596.814 Q69.8115 596.814 72.8207 599.985 Q75.8531 603.133 75.8531 608.573 Q75.8531 613.897 72.705 617.115 Q69.5568 620.332 64.3254 620.332 Q58.33 620.332 55.1588 615.749 Q51.9875 611.143 51.9875 602.416 Q51.9875 594.221 55.8764 589.36 Q59.7652 584.476 66.3161 584.476 Q68.0754 584.476 69.8578 584.823 Q71.6633 585.171 73.6077 585.865 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip690)\" d=\"M93.9086 588.18 Q90.2975 588.18 88.4688 591.745 Q86.6632 595.286 86.6632 602.416 Q86.6632 609.522 88.4688 613.087 Q90.2975 616.629 93.9086 616.629 Q97.5428 616.629 99.3483 613.087 Q101.177 609.522 101.177 602.416 Q101.177 595.286 99.3483 591.745 Q97.5428 588.18 93.9086 588.18 M93.9086 584.476 Q99.7187 584.476 102.774 589.083 Q105.853 593.666 105.853 602.416 Q105.853 611.143 102.774 615.749 Q99.7187 620.332 93.9086 620.332 Q88.0984 620.332 85.0197 615.749 Q81.9642 611.143 81.9642 602.416 Q81.9642 593.666 85.0197 589.083 Q88.0984 584.476 93.9086 584.476 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip690)\" d=\"M52.5662 375.14 L74.7883 375.14 L74.7883 377.131 L62.2421 409.7 L57.3578 409.7 L69.1633 379.075 L52.5662 379.075 L52.5662 375.14 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip690)\" d=\"M93.9086 378.219 Q90.2975 378.219 88.4688 381.784 Q86.6632 385.325 86.6632 392.455 Q86.6632 399.561 88.4688 403.126 Q90.2975 406.668 93.9086 406.668 Q97.5428 406.668 99.3483 403.126 Q101.177 399.561 101.177 392.455 Q101.177 385.325 99.3483 381.784 Q97.5428 378.219 93.9086 378.219 M93.9086 374.515 Q99.7187 374.515 102.774 379.122 Q105.853 383.705 105.853 392.455 Q105.853 401.182 102.774 405.788 Q99.7187 410.372 93.9086 410.372 Q88.0984 410.372 85.0197 405.788 Q81.9642 401.182 81.9642 392.455 Q81.9642 383.705 85.0197 379.122 Q88.0984 374.515 93.9086 374.515 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip690)\" d=\"M63.7467 183.328 Q60.4134 183.328 58.4921 185.11 Q56.5939 186.892 56.5939 190.017 Q56.5939 193.142 58.4921 194.925 Q60.4134 196.707 63.7467 196.707 Q67.08 196.707 69.0013 194.925 Q70.9226 193.119 70.9226 190.017 Q70.9226 186.892 69.0013 185.11 Q67.1032 183.328 63.7467 183.328 M59.0708 181.337 Q56.0615 180.596 54.3717 178.536 Q52.7051 176.476 52.7051 173.513 Q52.7051 169.369 55.6449 166.962 Q58.6078 164.555 63.7467 164.555 Q68.9087 164.555 71.8485 166.962 Q74.7883 169.369 74.7883 173.513 Q74.7883 176.476 73.0985 178.536 Q71.4318 180.596 68.4457 181.337 Q71.8253 182.124 73.7003 184.416 Q75.5985 186.707 75.5985 190.017 Q75.5985 195.04 72.5198 197.726 Q69.4642 200.411 63.7467 200.411 Q58.0291 200.411 54.9504 197.726 Q51.8949 195.04 51.8949 190.017 Q51.8949 186.707 53.793 184.416 Q55.6912 182.124 59.0708 181.337 M57.3578 173.953 Q57.3578 176.638 59.0245 178.142 Q60.7143 179.647 63.7467 179.647 Q66.7559 179.647 68.4457 178.142 Q70.1587 176.638 70.1587 173.953 Q70.1587 171.267 68.4457 169.763 Q66.7559 168.258 63.7467 168.258 Q60.7143 168.258 59.0245 169.763 Q57.3578 171.267 57.3578 173.953 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip690)\" d=\"M93.9086 168.258 Q90.2975 168.258 88.4688 171.823 Q86.6632 175.365 86.6632 182.494 Q86.6632 189.601 88.4688 193.165 Q90.2975 196.707 93.9086 196.707 Q97.5428 196.707 99.3483 193.165 Q101.177 189.601 101.177 182.494 Q101.177 175.365 99.3483 171.823 Q97.5428 168.258 93.9086 168.258 M93.9086 164.555 Q99.7187 164.555 102.774 169.161 Q105.853 173.744 105.853 182.494 Q105.853 191.221 102.774 195.827 Q99.7187 200.411 93.9086 200.411 Q88.0984 200.411 85.0197 195.827 Q81.9642 191.221 81.9642 182.494 Q81.9642 173.744 85.0197 169.161 Q88.0984 164.555 93.9086 164.555 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip692)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"204.426,1445.64 245.768,1445.72 289.568,1437.47 335.972,1434.89 385.136,1441.27 437.224,1421.51 492.409,1413.77 550.875,1392.05 612.818,1384.55 678.444,1392.77 747.972,1372.06 821.635,1351.49 899.678,1309.6 982.362,1291.25 1069.96,1264.46 1162.77,1113.29 1261.1,918.291 1365.27,758.392 1475.64,383.925 1592.58,193.234 1716.46,87.9763 1847.71,368.466 1986.77,797.28 2134.1,953.205 2290.18,1009.11 \"/>\n<path clip-path=\"url(#clip690)\" d=\"M215.55 198.898 L489.07 198.898 L489.07 95.2176 L215.55 95.2176  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip690)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"215.55,198.898 489.07,198.898 489.07,95.2176 215.55,95.2176 215.55,198.898 \"/>\n<polyline clip-path=\"url(#clip690)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"240.115,147.058 387.509,147.058 \"/>\n<path clip-path=\"url(#clip690)\" d=\"M425.917 166.745 Q424.111 171.375 422.398 172.787 Q420.685 174.199 417.815 174.199 L414.412 174.199 L414.412 170.634 L416.912 170.634 Q418.672 170.634 419.644 169.8 Q420.616 168.967 421.797 165.865 L422.56 163.921 L412.074 138.412 L416.588 138.412 L424.69 158.689 L432.792 138.412 L437.306 138.412 L425.917 166.745 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip690)\" d=\"M444.597 160.402 L452.236 160.402 L452.236 134.037 L443.926 135.703 L443.926 131.444 L452.19 129.778 L456.866 129.778 L456.866 160.402 L464.505 160.402 L464.505 164.338 L444.597 164.338 L444.597 160.402 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /></svg>\n","category":"page"},{"location":"ne13/","page":"ne13.jl","title":"ne13.jl","text":"and the energy histograms by:","category":"page"},{"location":"ne13/","page":"ne13.jl","title":"ne13.jl","text":"data = [results.en_histogram[i] for i in 1:n_traj]\nplot(data)","category":"page"},{"location":"ne13/","page":"ne13.jl","title":"ne13.jl","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip720\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip720)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip721\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip720)\" d=\"M306.435 1486.45 L2352.76 1486.45 L2352.76 47.2441 L306.435 47.2441  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip722\">\n    <rect x=\"306\" y=\"47\" width=\"2047\" height=\"1440\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip722)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"345.236,1486.45 345.236,47.2441 \"/>\n<polyline clip-path=\"url(#clip722)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"823.081,1486.45 823.081,47.2441 \"/>\n<polyline clip-path=\"url(#clip722)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1300.92,1486.45 1300.92,47.2441 \"/>\n<polyline clip-path=\"url(#clip722)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1778.77,1486.45 1778.77,47.2441 \"/>\n<polyline clip-path=\"url(#clip722)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2256.61,1486.45 2256.61,47.2441 \"/>\n<polyline clip-path=\"url(#clip722)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"306.435,1445.72 2352.76,1445.72 \"/>\n<polyline clip-path=\"url(#clip722)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"306.435,1138.31 2352.76,1138.31 \"/>\n<polyline clip-path=\"url(#clip722)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"306.435,830.909 2352.76,830.909 \"/>\n<polyline clip-path=\"url(#clip722)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"306.435,523.505 2352.76,523.505 \"/>\n<polyline clip-path=\"url(#clip722)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"306.435,216.102 2352.76,216.102 \"/>\n<polyline clip-path=\"url(#clip720)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"306.435,1486.45 2352.76,1486.45 \"/>\n<polyline clip-path=\"url(#clip720)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"345.236,1486.45 345.236,1467.55 \"/>\n<polyline clip-path=\"url(#clip720)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"823.081,1486.45 823.081,1467.55 \"/>\n<polyline clip-path=\"url(#clip720)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1300.92,1486.45 1300.92,1467.55 \"/>\n<polyline clip-path=\"url(#clip720)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1778.77,1486.45 1778.77,1467.55 \"/>\n<polyline clip-path=\"url(#clip720)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2256.61,1486.45 2256.61,1467.55 \"/>\n<path clip-path=\"url(#clip720)\" d=\"M345.236 1517.37 Q341.625 1517.37 339.797 1520.93 Q337.991 1524.47 337.991 1531.6 Q337.991 1538.71 339.797 1542.27 Q341.625 1545.82 345.236 1545.82 Q348.871 1545.82 350.676 1542.27 Q352.505 1538.71 352.505 1531.6 Q352.505 1524.47 350.676 1520.93 Q348.871 1517.37 345.236 1517.37 M345.236 1513.66 Q351.047 1513.66 354.102 1518.27 Q357.181 1522.85 357.181 1531.6 Q357.181 1540.33 354.102 1544.94 Q351.047 1549.52 345.236 1549.52 Q339.426 1549.52 336.348 1544.94 Q333.292 1540.33 333.292 1531.6 Q333.292 1522.85 336.348 1518.27 Q339.426 1513.66 345.236 1513.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip720)\" d=\"M802.352 1544.91 L818.671 1544.91 L818.671 1548.85 L796.727 1548.85 L796.727 1544.91 Q799.389 1542.16 803.972 1537.53 Q808.578 1532.88 809.759 1531.53 Q812.004 1529.01 812.884 1527.27 Q813.787 1525.51 813.787 1523.82 Q813.787 1521.07 811.842 1519.33 Q809.921 1517.6 806.819 1517.6 Q804.62 1517.6 802.166 1518.36 Q799.736 1519.13 796.958 1520.68 L796.958 1515.95 Q799.782 1514.82 802.236 1514.24 Q804.69 1513.66 806.727 1513.66 Q812.097 1513.66 815.291 1516.35 Q818.486 1519.03 818.486 1523.52 Q818.486 1525.65 817.676 1527.57 Q816.889 1529.47 814.782 1532.07 Q814.203 1532.74 811.102 1535.95 Q808 1539.15 802.352 1544.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip720)\" d=\"M828.532 1514.29 L846.888 1514.29 L846.888 1518.22 L832.814 1518.22 L832.814 1526.7 Q833.833 1526.35 834.851 1526.19 Q835.87 1526 836.888 1526 Q842.675 1526 846.055 1529.17 Q849.435 1532.34 849.435 1537.76 Q849.435 1543.34 845.962 1546.44 Q842.49 1549.52 836.171 1549.52 Q833.995 1549.52 831.726 1549.15 Q829.481 1548.78 827.074 1548.04 L827.074 1543.34 Q829.157 1544.47 831.379 1545.03 Q833.601 1545.58 836.078 1545.58 Q840.083 1545.58 842.421 1543.48 Q844.759 1541.37 844.759 1537.76 Q844.759 1534.15 842.421 1532.04 Q840.083 1529.94 836.078 1529.94 Q834.203 1529.94 832.328 1530.35 Q830.476 1530.77 828.532 1531.65 L828.532 1514.29 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip720)\" d=\"M1275.62 1514.29 L1293.98 1514.29 L1293.98 1518.22 L1279.91 1518.22 L1279.91 1526.7 Q1280.93 1526.35 1281.94 1526.19 Q1282.96 1526 1283.98 1526 Q1289.77 1526 1293.15 1529.17 Q1296.53 1532.34 1296.53 1537.76 Q1296.53 1543.34 1293.05 1546.44 Q1289.58 1549.52 1283.26 1549.52 Q1281.09 1549.52 1278.82 1549.15 Q1276.57 1548.78 1274.17 1548.04 L1274.17 1543.34 Q1276.25 1544.47 1278.47 1545.03 Q1280.69 1545.58 1283.17 1545.58 Q1287.18 1545.58 1289.51 1543.48 Q1291.85 1541.37 1291.85 1537.76 Q1291.85 1534.15 1289.51 1532.04 Q1287.18 1529.94 1283.17 1529.94 Q1281.3 1529.94 1279.42 1530.35 Q1277.57 1530.77 1275.62 1531.65 L1275.62 1514.29 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip720)\" d=\"M1315.74 1517.37 Q1312.13 1517.37 1310.3 1520.93 Q1308.49 1524.47 1308.49 1531.6 Q1308.49 1538.71 1310.3 1542.27 Q1312.13 1545.82 1315.74 1545.82 Q1319.37 1545.82 1321.18 1542.27 Q1323.01 1538.71 1323.01 1531.6 Q1323.01 1524.47 1321.18 1520.93 Q1319.37 1517.37 1315.74 1517.37 M1315.74 1513.66 Q1321.55 1513.66 1324.61 1518.27 Q1327.68 1522.85 1327.68 1531.6 Q1327.68 1540.33 1324.61 1544.94 Q1321.55 1549.52 1315.74 1549.52 Q1309.93 1549.52 1306.85 1544.94 Q1303.8 1540.33 1303.8 1531.6 Q1303.8 1522.85 1306.85 1518.27 Q1309.93 1513.66 1315.74 1513.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip720)\" d=\"M1752.62 1514.29 L1774.85 1514.29 L1774.85 1516.28 L1762.3 1548.85 L1757.42 1548.85 L1769.22 1518.22 L1752.62 1518.22 L1752.62 1514.29 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip720)\" d=\"M1784.01 1514.29 L1802.37 1514.29 L1802.37 1518.22 L1788.29 1518.22 L1788.29 1526.7 Q1789.31 1526.35 1790.33 1526.19 Q1791.35 1526 1792.37 1526 Q1798.16 1526 1801.54 1529.17 Q1804.92 1532.34 1804.92 1537.76 Q1804.92 1543.34 1801.44 1546.44 Q1797.97 1549.52 1791.65 1549.52 Q1789.48 1549.52 1787.21 1549.15 Q1784.96 1548.78 1782.55 1548.04 L1782.55 1543.34 Q1784.64 1544.47 1786.86 1545.03 Q1789.08 1545.58 1791.56 1545.58 Q1795.56 1545.58 1797.9 1543.48 Q1800.24 1541.37 1800.24 1537.76 Q1800.24 1534.15 1797.9 1532.04 Q1795.56 1529.94 1791.56 1529.94 Q1789.68 1529.94 1787.81 1530.35 Q1785.96 1530.77 1784.01 1531.65 L1784.01 1514.29 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip720)\" d=\"M2216.22 1544.91 L2223.86 1544.91 L2223.86 1518.55 L2215.55 1520.21 L2215.55 1515.95 L2223.81 1514.29 L2228.49 1514.29 L2228.49 1544.91 L2236.13 1544.91 L2236.13 1548.85 L2216.22 1548.85 L2216.22 1544.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip720)\" d=\"M2255.57 1517.37 Q2251.96 1517.37 2250.13 1520.93 Q2248.33 1524.47 2248.33 1531.6 Q2248.33 1538.71 2250.13 1542.27 Q2251.96 1545.82 2255.57 1545.82 Q2259.21 1545.82 2261.01 1542.27 Q2262.84 1538.71 2262.84 1531.6 Q2262.84 1524.47 2261.01 1520.93 Q2259.21 1517.37 2255.57 1517.37 M2255.57 1513.66 Q2261.38 1513.66 2264.44 1518.27 Q2267.52 1522.85 2267.52 1531.6 Q2267.52 1540.33 2264.44 1544.94 Q2261.38 1549.52 2255.57 1549.52 Q2249.76 1549.52 2246.68 1544.94 Q2243.63 1540.33 2243.63 1531.6 Q2243.63 1522.85 2246.68 1518.27 Q2249.76 1513.66 2255.57 1513.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip720)\" d=\"M2285.73 1517.37 Q2282.12 1517.37 2280.29 1520.93 Q2278.49 1524.47 2278.49 1531.6 Q2278.49 1538.71 2280.29 1542.27 Q2282.12 1545.82 2285.73 1545.82 Q2289.37 1545.82 2291.17 1542.27 Q2293 1538.71 2293 1531.6 Q2293 1524.47 2291.17 1520.93 Q2289.37 1517.37 2285.73 1517.37 M2285.73 1513.66 Q2291.54 1513.66 2294.6 1518.27 Q2297.68 1522.85 2297.68 1531.6 Q2297.68 1540.33 2294.6 1544.94 Q2291.54 1549.52 2285.73 1549.52 Q2279.92 1549.52 2276.85 1544.94 Q2273.79 1540.33 2273.79 1531.6 Q2273.79 1522.85 2276.85 1518.27 Q2279.92 1513.66 2285.73 1513.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip720)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"306.435,1486.45 306.435,47.2441 \"/>\n<polyline clip-path=\"url(#clip720)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"306.435,1445.72 325.333,1445.72 \"/>\n<polyline clip-path=\"url(#clip720)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"306.435,1138.31 325.333,1138.31 \"/>\n<polyline clip-path=\"url(#clip720)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"306.435,830.909 325.333,830.909 \"/>\n<polyline clip-path=\"url(#clip720)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"306.435,523.505 325.333,523.505 \"/>\n<polyline clip-path=\"url(#clip720)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"306.435,216.102 325.333,216.102 \"/>\n<path clip-path=\"url(#clip720)\" d=\"M258.491 1431.51 Q254.88 1431.51 253.051 1435.08 Q251.246 1438.62 251.246 1445.75 Q251.246 1452.86 253.051 1456.42 Q254.88 1459.96 258.491 1459.96 Q262.125 1459.96 263.931 1456.42 Q265.759 1452.86 265.759 1445.75 Q265.759 1438.62 263.931 1435.08 Q262.125 1431.51 258.491 1431.51 M258.491 1427.81 Q264.301 1427.81 267.357 1432.42 Q270.435 1437 270.435 1445.75 Q270.435 1454.48 267.357 1459.08 Q264.301 1463.67 258.491 1463.67 Q252.681 1463.67 249.602 1459.08 Q246.547 1454.48 246.547 1445.75 Q246.547 1437 249.602 1432.42 Q252.681 1427.81 258.491 1427.81 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip720)\" d=\"M54.6105 1127.48 L72.9668 1127.48 L72.9668 1131.42 L58.8928 1131.42 L58.8928 1139.89 Q59.9113 1139.54 60.9299 1139.38 Q61.9484 1139.19 62.9669 1139.19 Q68.7539 1139.19 72.1335 1142.36 Q75.5131 1145.54 75.5131 1150.95 Q75.5131 1156.53 72.0409 1159.63 Q68.5687 1162.71 62.2493 1162.71 Q60.0734 1162.71 57.8049 1162.34 Q55.5595 1161.97 53.1521 1161.23 L53.1521 1156.53 Q55.2354 1157.66 57.4577 1158.22 Q59.6799 1158.78 62.1567 1158.78 Q66.1613 1158.78 68.4993 1156.67 Q70.8372 1154.56 70.8372 1150.95 Q70.8372 1147.34 68.4993 1145.23 Q66.1613 1143.13 62.1567 1143.13 Q60.2817 1143.13 58.4067 1143.54 Q56.5549 1143.96 54.6105 1144.84 L54.6105 1127.48 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip720)\" d=\"M84.726 1156.16 L89.6103 1156.16 L89.6103 1162.04 L84.726 1162.04 L84.726 1156.16 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip720)\" d=\"M109.795 1130.56 Q106.184 1130.56 104.356 1134.12 Q102.55 1137.67 102.55 1144.79 Q102.55 1151.9 104.356 1155.47 Q106.184 1159.01 109.795 1159.01 Q113.43 1159.01 115.235 1155.47 Q117.064 1151.9 117.064 1144.79 Q117.064 1137.67 115.235 1134.12 Q113.43 1130.56 109.795 1130.56 M109.795 1126.85 Q115.605 1126.85 118.661 1131.46 Q121.74 1136.04 121.74 1144.79 Q121.74 1153.52 118.661 1158.13 Q115.605 1162.71 109.795 1162.71 Q103.985 1162.71 100.906 1158.13 Q97.851 1153.52 97.851 1144.79 Q97.851 1136.04 100.906 1131.46 Q103.985 1126.85 109.795 1126.85 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip720)\" d=\"M139.957 1130.56 Q136.346 1130.56 134.517 1134.12 Q132.712 1137.67 132.712 1144.79 Q132.712 1151.9 134.517 1155.47 Q136.346 1159.01 139.957 1159.01 Q143.591 1159.01 145.397 1155.47 Q147.226 1151.9 147.226 1144.79 Q147.226 1137.67 145.397 1134.12 Q143.591 1130.56 139.957 1130.56 M139.957 1126.85 Q145.767 1126.85 148.823 1131.46 Q151.902 1136.04 151.902 1144.79 Q151.902 1153.52 148.823 1158.13 Q145.767 1162.71 139.957 1162.71 Q134.147 1162.71 131.068 1158.13 Q128.013 1153.52 128.013 1144.79 Q128.013 1136.04 131.068 1131.46 Q134.147 1126.85 139.957 1126.85 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip720)\" d=\"M188.29 1136.58 L177.712 1147.2 L188.29 1157.78 L185.536 1160.58 L174.911 1149.96 L164.286 1160.58 L161.554 1157.78 L172.11 1147.2 L161.554 1136.58 L164.286 1133.78 L174.911 1144.4 L185.536 1133.78 L188.29 1136.58 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip720)\" d=\"M200.651 1158.1 L208.29 1158.1 L208.29 1131.74 L199.98 1133.41 L199.98 1129.15 L208.244 1127.48 L212.92 1127.48 L212.92 1158.1 L220.559 1158.1 L220.559 1162.04 L200.651 1162.04 L200.651 1158.1 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip720)\" d=\"M240.003 1130.56 Q236.392 1130.56 234.563 1134.12 Q232.758 1137.67 232.758 1144.79 Q232.758 1151.9 234.563 1155.47 Q236.392 1159.01 240.003 1159.01 Q243.637 1159.01 245.443 1155.47 Q247.271 1151.9 247.271 1144.79 Q247.271 1137.67 245.443 1134.12 Q243.637 1130.56 240.003 1130.56 M240.003 1126.85 Q245.813 1126.85 248.869 1131.46 Q251.947 1136.04 251.947 1144.79 Q251.947 1153.52 248.869 1158.13 Q245.813 1162.71 240.003 1162.71 Q234.193 1162.71 231.114 1158.13 Q228.059 1153.52 228.059 1144.79 Q228.059 1136.04 231.114 1131.46 Q234.193 1126.85 240.003 1126.85 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip720)\" d=\"M264.643 1119.49 Q267.37 1120.07 268.893 1121.92 Q270.435 1123.76 270.435 1126.47 Q270.435 1130.62 267.577 1132.9 Q264.718 1135.17 259.452 1135.17 Q257.684 1135.17 255.803 1134.82 Q253.941 1134.48 251.947 1133.78 L251.947 1130.12 Q253.527 1131.04 255.408 1131.51 Q257.289 1131.98 259.339 1131.98 Q262.912 1131.98 264.774 1130.57 Q266.655 1129.16 266.655 1126.47 Q266.655 1123.98 264.906 1122.59 Q263.176 1121.18 260.072 1121.18 L256.8 1121.18 L256.8 1118.06 L260.223 1118.06 Q263.025 1118.06 264.511 1116.95 Q265.997 1115.82 265.997 1113.72 Q265.997 1111.55 264.455 1110.41 Q262.931 1109.24 260.072 1109.24 Q258.511 1109.24 256.725 1109.58 Q254.938 1109.92 252.794 1110.63 L252.794 1107.25 Q254.957 1106.64 256.837 1106.34 Q258.737 1106.04 260.411 1106.04 Q264.737 1106.04 267.257 1108.02 Q269.777 1109.97 269.777 1113.32 Q269.777 1115.65 268.442 1117.27 Q267.106 1118.87 264.643 1119.49 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip720)\" d=\"M53.3995 850.701 L61.0384 850.701 L61.0384 824.336 L52.7282 826.002 L52.7282 821.743 L60.9921 820.076 L65.668 820.076 L65.668 850.701 L73.3068 850.701 L73.3068 854.636 L53.3995 854.636 L53.3995 850.701 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip720)\" d=\"M82.7512 848.757 L87.6354 848.757 L87.6354 854.636 L82.7512 854.636 L82.7512 848.757 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip720)\" d=\"M107.821 823.155 Q104.209 823.155 102.381 826.72 Q100.575 830.262 100.575 837.391 Q100.575 844.498 102.381 848.062 Q104.209 851.604 107.821 851.604 Q111.455 851.604 113.26 848.062 Q115.089 844.498 115.089 837.391 Q115.089 830.262 113.26 826.72 Q111.455 823.155 107.821 823.155 M107.821 819.451 Q113.631 819.451 116.686 824.058 Q119.765 828.641 119.765 837.391 Q119.765 846.118 116.686 850.724 Q113.631 855.308 107.821 855.308 Q102.01 855.308 98.9317 850.724 Q95.8761 846.118 95.8761 837.391 Q95.8761 828.641 98.9317 824.058 Q102.01 819.451 107.821 819.451 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip720)\" d=\"M137.982 823.155 Q134.371 823.155 132.543 826.72 Q130.737 830.262 130.737 837.391 Q130.737 844.498 132.543 848.062 Q134.371 851.604 137.982 851.604 Q141.617 851.604 143.422 848.062 Q145.251 844.498 145.251 837.391 Q145.251 830.262 143.422 826.72 Q141.617 823.155 137.982 823.155 M137.982 819.451 Q143.793 819.451 146.848 824.058 Q149.927 828.641 149.927 837.391 Q149.927 846.118 146.848 850.724 Q143.793 855.308 137.982 855.308 Q132.172 855.308 129.094 850.724 Q126.038 846.118 126.038 837.391 Q126.038 828.641 129.094 824.058 Q132.172 819.451 137.982 819.451 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip720)\" d=\"M186.315 829.174 L175.737 839.799 L186.315 850.377 L183.561 853.178 L172.936 842.553 L162.311 853.178 L159.58 850.377 L170.135 839.799 L159.58 829.174 L162.311 826.373 L172.936 836.998 L183.561 826.373 L186.315 829.174 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip720)\" d=\"M198.677 850.701 L206.315 850.701 L206.315 824.336 L198.005 826.002 L198.005 821.743 L206.269 820.076 L210.945 820.076 L210.945 850.701 L218.584 850.701 L218.584 854.636 L198.677 854.636 L198.677 850.701 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip720)\" d=\"M238.028 823.155 Q234.417 823.155 232.588 826.72 Q230.783 830.262 230.783 837.391 Q230.783 844.498 232.588 848.062 Q234.417 851.604 238.028 851.604 Q241.662 851.604 243.468 848.062 Q245.297 844.498 245.297 837.391 Q245.297 830.262 243.468 826.72 Q241.662 823.155 238.028 823.155 M238.028 819.451 Q243.838 819.451 246.894 824.058 Q249.973 828.641 249.973 837.391 Q249.973 846.118 246.894 850.724 Q243.838 855.308 238.028 855.308 Q232.218 855.308 229.139 850.724 Q226.084 846.118 226.084 837.391 Q226.084 828.641 229.139 824.058 Q232.218 819.451 238.028 819.451 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip720)\" d=\"M262.649 802.456 L253.057 817.446 L262.649 817.446 L262.649 802.456 M261.652 799.146 L266.429 799.146 L266.429 817.446 L270.435 817.446 L270.435 820.606 L266.429 820.606 L266.429 827.226 L262.649 827.226 L262.649 820.606 L249.973 820.606 L249.973 816.938 L261.652 799.146 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip720)\" d=\"M53.3995 543.298 L61.0384 543.298 L61.0384 516.932 L52.7282 518.599 L52.7282 514.34 L60.9921 512.673 L65.668 512.673 L65.668 543.298 L73.3068 543.298 L73.3068 547.233 L53.3995 547.233 L53.3995 543.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip720)\" d=\"M82.7512 541.353 L87.6354 541.353 L87.6354 547.233 L82.7512 547.233 L82.7512 541.353 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip720)\" d=\"M97.8669 512.673 L116.223 512.673 L116.223 516.608 L102.149 516.608 L102.149 525.08 Q103.168 524.733 104.186 524.571 Q105.205 524.386 106.223 524.386 Q112.01 524.386 115.39 527.557 Q118.77 530.728 118.77 536.145 Q118.77 541.724 115.297 544.826 Q111.825 547.904 105.506 547.904 Q103.33 547.904 101.061 547.534 Q98.8159 547.164 96.4085 546.423 L96.4085 541.724 Q98.4919 542.858 100.714 543.414 Q102.936 543.969 105.413 543.969 Q109.418 543.969 111.756 541.863 Q114.094 539.756 114.094 536.145 Q114.094 532.534 111.756 530.428 Q109.418 528.321 105.413 528.321 Q103.538 528.321 101.663 528.738 Q99.8113 529.154 97.8669 530.034 L97.8669 512.673 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip720)\" d=\"M137.982 515.752 Q134.371 515.752 132.543 519.317 Q130.737 522.858 130.737 529.988 Q130.737 537.094 132.543 540.659 Q134.371 544.201 137.982 544.201 Q141.617 544.201 143.422 540.659 Q145.251 537.094 145.251 529.988 Q145.251 522.858 143.422 519.317 Q141.617 515.752 137.982 515.752 M137.982 512.048 Q143.793 512.048 146.848 516.654 Q149.927 521.238 149.927 529.988 Q149.927 538.715 146.848 543.321 Q143.793 547.904 137.982 547.904 Q132.172 547.904 129.094 543.321 Q126.038 538.715 126.038 529.988 Q126.038 521.238 129.094 516.654 Q132.172 512.048 137.982 512.048 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip720)\" d=\"M186.315 521.77 L175.737 532.395 L186.315 542.974 L183.561 545.775 L172.936 535.15 L162.311 545.775 L159.58 542.974 L170.135 532.395 L159.58 521.77 L162.311 518.969 L172.936 529.594 L183.561 518.969 L186.315 521.77 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip720)\" d=\"M198.677 543.298 L206.315 543.298 L206.315 516.932 L198.005 518.599 L198.005 514.34 L206.269 512.673 L210.945 512.673 L210.945 543.298 L218.584 543.298 L218.584 547.233 L198.677 547.233 L198.677 543.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip720)\" d=\"M238.028 515.752 Q234.417 515.752 232.588 519.317 Q230.783 522.858 230.783 529.988 Q230.783 537.094 232.588 540.659 Q234.417 544.201 238.028 544.201 Q241.662 544.201 243.468 540.659 Q245.297 537.094 245.297 529.988 Q245.297 522.858 243.468 519.317 Q241.662 515.752 238.028 515.752 M238.028 512.048 Q243.838 512.048 246.894 516.654 Q249.973 521.238 249.973 529.988 Q249.973 538.715 246.894 543.321 Q243.838 547.904 238.028 547.904 Q232.218 547.904 229.139 543.321 Q226.084 538.715 226.084 529.988 Q226.084 521.238 229.139 516.654 Q232.218 512.048 238.028 512.048 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip720)\" d=\"M262.649 495.053 L253.057 510.043 L262.649 510.043 L262.649 495.053 M261.652 491.743 L266.429 491.743 L266.429 510.043 L270.435 510.043 L270.435 513.202 L266.429 513.202 L266.429 519.823 L262.649 519.823 L262.649 513.202 L249.973 513.202 L249.973 509.535 L261.652 491.743 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip720)\" d=\"M56.6171 235.894 L72.9365 235.894 L72.9365 239.83 L50.9921 239.83 L50.9921 235.894 Q53.6541 233.14 58.2375 228.51 Q62.8439 223.857 64.0245 222.515 Q66.2698 219.992 67.1494 218.256 Q68.0522 216.496 68.0522 214.807 Q68.0522 212.052 66.1078 210.316 Q64.1865 208.58 61.0847 208.58 Q58.8856 208.58 56.4319 209.344 Q54.0014 210.108 51.2236 211.658 L51.2236 206.936 Q54.0477 205.802 56.5014 205.223 Q58.955 204.645 60.9921 204.645 Q66.3624 204.645 69.5568 207.33 Q72.7513 210.015 72.7513 214.506 Q72.7513 216.635 71.9411 218.557 Q71.1541 220.455 69.0476 223.047 Q68.4689 223.719 65.367 226.936 Q62.2652 230.131 56.6171 235.894 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip720)\" d=\"M82.7512 233.95 L87.6354 233.95 L87.6354 239.83 L82.7512 239.83 L82.7512 233.95 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip720)\" d=\"M107.821 208.348 Q104.209 208.348 102.381 211.913 Q100.575 215.455 100.575 222.584 Q100.575 229.691 102.381 233.256 Q104.209 236.797 107.821 236.797 Q111.455 236.797 113.26 233.256 Q115.089 229.691 115.089 222.584 Q115.089 215.455 113.26 211.913 Q111.455 208.348 107.821 208.348 M107.821 204.645 Q113.631 204.645 116.686 209.251 Q119.765 213.834 119.765 222.584 Q119.765 231.311 116.686 235.918 Q113.631 240.501 107.821 240.501 Q102.01 240.501 98.9317 235.918 Q95.8761 231.311 95.8761 222.584 Q95.8761 213.834 98.9317 209.251 Q102.01 204.645 107.821 204.645 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip720)\" d=\"M137.982 208.348 Q134.371 208.348 132.543 211.913 Q130.737 215.455 130.737 222.584 Q130.737 229.691 132.543 233.256 Q134.371 236.797 137.982 236.797 Q141.617 236.797 143.422 233.256 Q145.251 229.691 145.251 222.584 Q145.251 215.455 143.422 211.913 Q141.617 208.348 137.982 208.348 M137.982 204.645 Q143.793 204.645 146.848 209.251 Q149.927 213.834 149.927 222.584 Q149.927 231.311 146.848 235.918 Q143.793 240.501 137.982 240.501 Q132.172 240.501 129.094 235.918 Q126.038 231.311 126.038 222.584 Q126.038 213.834 129.094 209.251 Q132.172 204.645 137.982 204.645 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip720)\" d=\"M186.315 214.367 L175.737 224.992 L186.315 235.57 L183.561 238.371 L172.936 227.746 L162.311 238.371 L159.58 235.57 L170.135 224.992 L159.58 214.367 L162.311 211.566 L172.936 222.191 L183.561 211.566 L186.315 214.367 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip720)\" d=\"M198.677 235.894 L206.315 235.894 L206.315 209.529 L198.005 211.196 L198.005 206.936 L206.269 205.27 L210.945 205.27 L210.945 235.894 L218.584 235.894 L218.584 239.83 L198.677 239.83 L198.677 235.894 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip720)\" d=\"M238.028 208.348 Q234.417 208.348 232.588 211.913 Q230.783 215.455 230.783 222.584 Q230.783 229.691 232.588 233.256 Q234.417 236.797 238.028 236.797 Q241.662 236.797 243.468 233.256 Q245.297 229.691 245.297 222.584 Q245.297 215.455 243.468 211.913 Q241.662 208.348 238.028 208.348 M238.028 204.645 Q243.838 204.645 246.894 209.251 Q249.973 213.834 249.973 222.584 Q249.973 231.311 246.894 235.918 Q243.838 240.501 238.028 240.501 Q232.218 240.501 229.139 235.918 Q226.084 231.311 226.084 222.584 Q226.084 213.834 229.139 209.251 Q232.218 204.645 238.028 204.645 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip720)\" d=\"M262.649 187.649 L253.057 202.639 L262.649 202.639 L262.649 187.649 M261.652 184.339 L266.429 184.339 L266.429 202.639 L270.435 202.639 L270.435 205.799 L266.429 205.799 L266.429 212.419 L262.649 212.419 L262.649 205.799 L249.973 205.799 L249.973 202.131 L261.652 184.339 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip722)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"364.35,1445.72 383.464,1445.72 402.578,1445.41 421.691,1422.17 440.805,1252.97 459.919,807.731 479.033,296.765 498.147,87.9763 517.26,260.307 536.374,645.176 555.488,1002.44 574.602,1233.24 593.715,1354.36 612.829,1411.47 631.943,1433.36 651.057,1440.18 670.17,1444.55 689.284,1445.53 708.398,1445.47 727.512,1445.72 746.626,1445.72 765.739,1445.72 784.853,1445.72 803.967,1445.72 823.081,1445.72 842.194,1445.72 861.308,1445.72 880.422,1445.72 899.536,1445.72 918.65,1445.72 937.763,1445.72 956.877,1445.72 975.991,1445.72 995.105,1445.72 1014.22,1445.72 1033.33,1445.72 1052.45,1445.72 1071.56,1445.72 1090.67,1445.72 1109.79,1445.72 1128.9,1445.72 1148.01,1445.72 1167.13,1445.72 1186.24,1445.72 1205.36,1445.72 1224.47,1445.72 1243.58,1445.72 1262.7,1445.72 1281.81,1445.72 1300.92,1445.72 1320.04,1445.72 1339.15,1445.72 1358.27,1445.72 1377.38,1445.72 1396.49,1445.72 1415.61,1445.72 1434.72,1445.72 1453.84,1445.72 1472.95,1445.72 1492.06,1445.72 1511.18,1445.72 1530.29,1445.72 1549.4,1445.72 1568.52,1445.72 1587.63,1445.72 1606.75,1445.72 1625.86,1445.72 1644.97,1445.72 1664.09,1445.72 1683.2,1445.72 1702.31,1445.72 1721.43,1445.72 1740.54,1445.72 1759.66,1445.72 1778.77,1445.72 1797.88,1445.72 1817,1445.72 1836.11,1445.72 1855.22,1445.72 1874.34,1445.72 1893.45,1445.72 1912.57,1445.72 1931.68,1445.72 1950.79,1445.72 1969.91,1445.72 1989.02,1445.72 2008.13,1445.72 2027.25,1445.72 2046.36,1445.72 2065.48,1445.72 2084.59,1445.72 2103.7,1445.72 2122.82,1445.72 2141.93,1445.72 2161.04,1445.72 2180.16,1445.72 2199.27,1445.72 2218.39,1445.72 2237.5,1445.72 2256.61,1445.72 2275.73,1445.72 2294.84,1445.72 \"/>\n<polyline clip-path=\"url(#clip722)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"364.35,1445.72 383.464,1445.72 402.578,1445.59 421.691,1433.73 440.805,1337.26 459.919,1024.08 479.033,535.125 498.147,199.871 517.26,195.076 536.374,479.301 555.488,826.544 574.602,1112.61 593.715,1282.42 612.829,1374.58 631.943,1416.39 651.057,1435.82 670.17,1441.54 689.284,1443.75 708.398,1445.53 727.512,1445.59 746.626,1445.72 765.739,1445.72 784.853,1445.72 803.967,1445.72 823.081,1445.72 842.194,1445.72 861.308,1445.72 880.422,1445.72 899.536,1445.72 918.65,1445.72 937.763,1445.72 956.877,1445.72 975.991,1445.72 995.105,1445.72 1014.22,1445.72 1033.33,1445.72 1052.45,1445.72 1071.56,1445.72 1090.67,1445.72 1109.79,1445.72 1128.9,1445.72 1148.01,1445.72 1167.13,1445.72 1186.24,1445.72 1205.36,1445.72 1224.47,1445.72 1243.58,1445.72 1262.7,1445.72 1281.81,1445.72 1300.92,1445.72 1320.04,1445.72 1339.15,1445.72 1358.27,1445.72 1377.38,1445.72 1396.49,1445.72 1415.61,1445.72 1434.72,1445.72 1453.84,1445.72 1472.95,1445.72 1492.06,1445.72 1511.18,1445.72 1530.29,1445.72 1549.4,1445.72 1568.52,1445.72 1587.63,1445.72 1606.75,1445.72 1625.86,1445.72 1644.97,1445.72 1664.09,1445.72 1683.2,1445.72 1702.31,1445.72 1721.43,1445.72 1740.54,1445.72 1759.66,1445.72 1778.77,1445.72 1797.88,1445.72 1817,1445.72 1836.11,1445.72 1855.22,1445.72 1874.34,1445.72 1893.45,1445.72 1912.57,1445.72 1931.68,1445.72 1950.79,1445.72 1969.91,1445.72 1989.02,1445.72 2008.13,1445.72 2027.25,1445.72 2046.36,1445.72 2065.48,1445.72 2084.59,1445.72 2103.7,1445.72 2122.82,1445.72 2141.93,1445.72 2161.04,1445.72 2180.16,1445.72 2199.27,1445.72 2218.39,1445.72 2237.5,1445.72 2256.61,1445.72 2275.73,1445.72 2294.84,1445.72 \"/>\n<polyline clip-path=\"url(#clip722)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"364.35,1445.72 383.464,1445.72 402.578,1445.65 421.691,1439.32 440.805,1376.8 459.919,1152.21 479.033,746.68 498.147,361.319 517.26,231.349 536.374,397.163 555.488,670.998 574.602,971.577 593.715,1186.64 612.829,1321.89 631.943,1388.54 651.057,1417.93 670.17,1435.82 689.284,1441.66 708.398,1444.36 727.512,1444.92 746.626,1445.72 765.739,1445.72 784.853,1445.72 803.967,1445.72 823.081,1445.72 842.194,1445.72 861.308,1445.72 880.422,1445.72 899.536,1445.72 918.65,1445.72 937.763,1445.72 956.877,1445.72 975.991,1445.72 995.105,1445.72 1014.22,1445.72 1033.33,1445.72 1052.45,1445.72 1071.56,1445.72 1090.67,1445.72 1109.79,1445.72 1128.9,1445.72 1148.01,1445.72 1167.13,1445.72 1186.24,1445.72 1205.36,1445.72 1224.47,1445.72 1243.58,1445.72 1262.7,1445.72 1281.81,1445.72 1300.92,1445.72 1320.04,1445.72 1339.15,1445.72 1358.27,1445.72 1377.38,1445.72 1396.49,1445.72 1415.61,1445.72 1434.72,1445.72 1453.84,1445.72 1472.95,1445.72 1492.06,1445.72 1511.18,1445.72 1530.29,1445.72 1549.4,1445.72 1568.52,1445.72 1587.63,1445.72 1606.75,1445.72 1625.86,1445.72 1644.97,1445.72 1664.09,1445.72 1683.2,1445.72 1702.31,1445.72 1721.43,1445.72 1740.54,1445.72 1759.66,1445.72 1778.77,1445.72 1797.88,1445.72 1817,1445.72 1836.11,1445.72 1855.22,1445.72 1874.34,1445.72 1893.45,1445.72 1912.57,1445.72 1931.68,1445.72 1950.79,1445.72 1969.91,1445.72 1989.02,1445.72 2008.13,1445.72 2027.25,1445.72 2046.36,1445.72 2065.48,1445.72 2084.59,1445.72 2103.7,1445.72 2122.82,1445.72 2141.93,1445.72 2161.04,1445.72 2180.16,1445.72 2199.27,1445.72 2218.39,1445.72 2237.5,1445.72 2256.61,1445.72 2275.73,1445.72 2294.84,1445.72 \"/>\n<polyline clip-path=\"url(#clip722)\" style=\"stroke:#c271d2; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"364.35,1445.72 383.464,1445.72 402.578,1445.72 421.691,1443.19 440.805,1405.57 459.919,1256.05 479.033,931.799 498.147,560.517 517.26,334.698 536.374,351.36 555.488,549.573 574.602,831.954 593.715,1058.94 612.829,1226.29 631.943,1333.76 651.057,1397.08 670.17,1424.01 689.284,1437.29 708.398,1442.7 727.512,1444.61 746.626,1445.47 765.739,1445.65 784.853,1445.72 803.967,1445.72 823.081,1445.72 842.194,1445.72 861.308,1445.72 880.422,1445.72 899.536,1445.72 918.65,1445.72 937.763,1445.72 956.877,1445.72 975.991,1445.72 995.105,1445.72 1014.22,1445.72 1033.33,1445.72 1052.45,1445.72 1071.56,1445.72 1090.67,1445.72 1109.79,1445.72 1128.9,1445.72 1148.01,1445.72 1167.13,1445.72 1186.24,1445.72 1205.36,1445.72 1224.47,1445.72 1243.58,1445.72 1262.7,1445.72 1281.81,1445.72 1300.92,1445.72 1320.04,1445.72 1339.15,1445.72 1358.27,1445.72 1377.38,1445.72 1396.49,1445.72 1415.61,1445.72 1434.72,1445.72 1453.84,1445.72 1472.95,1445.72 1492.06,1445.72 1511.18,1445.72 1530.29,1445.72 1549.4,1445.72 1568.52,1445.72 1587.63,1445.72 1606.75,1445.72 1625.86,1445.72 1644.97,1445.72 1664.09,1445.72 1683.2,1445.72 1702.31,1445.72 1721.43,1445.72 1740.54,1445.72 1759.66,1445.72 1778.77,1445.72 1797.88,1445.72 1817,1445.72 1836.11,1445.72 1855.22,1445.72 1874.34,1445.72 1893.45,1445.72 1912.57,1445.72 1931.68,1445.72 1950.79,1445.72 1969.91,1445.72 1989.02,1445.72 2008.13,1445.72 2027.25,1445.72 2046.36,1445.72 2065.48,1445.72 2084.59,1445.72 2103.7,1445.72 2122.82,1445.72 2141.93,1445.72 2161.04,1445.72 2180.16,1445.72 2199.27,1445.72 2218.39,1445.72 2237.5,1445.72 2256.61,1445.72 2275.73,1445.72 2294.84,1445.72 \"/>\n<polyline clip-path=\"url(#clip722)\" style=\"stroke:#ac8d18; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"364.35,1445.72 383.464,1445.72 402.578,1445.72 421.691,1444.18 440.805,1427.46 459.919,1329.82 479.033,1094.91 498.147,763.588 517.26,467.128 536.374,359.536 555.488,459.688 574.602,687.536 593.715,932.413 612.829,1134.38 631.943,1270 651.057,1352.45 670.17,1401.39 689.284,1426.9 708.398,1436.68 727.512,1443.01 746.626,1444.73 765.739,1445.29 784.853,1445.29 803.967,1445.59 823.081,1445.72 842.194,1445.72 861.308,1445.72 880.422,1445.72 899.536,1445.72 918.65,1445.72 937.763,1445.72 956.877,1445.72 975.991,1445.72 995.105,1445.72 1014.22,1445.72 1033.33,1445.72 1052.45,1445.72 1071.56,1445.72 1090.67,1445.72 1109.79,1445.72 1128.9,1445.72 1148.01,1445.72 1167.13,1445.72 1186.24,1445.72 1205.36,1445.72 1224.47,1445.72 1243.58,1445.72 1262.7,1445.72 1281.81,1445.72 1300.92,1445.72 1320.04,1445.72 1339.15,1445.72 1358.27,1445.72 1377.38,1445.72 1396.49,1445.72 1415.61,1445.72 1434.72,1445.72 1453.84,1445.72 1472.95,1445.72 1492.06,1445.72 1511.18,1445.72 1530.29,1445.72 1549.4,1445.72 1568.52,1445.72 1587.63,1445.72 1606.75,1445.72 1625.86,1445.72 1644.97,1445.72 1664.09,1445.72 1683.2,1445.72 1702.31,1445.72 1721.43,1445.72 1740.54,1445.72 1759.66,1445.72 1778.77,1445.72 1797.88,1445.72 1817,1445.72 1836.11,1445.72 1855.22,1445.72 1874.34,1445.72 1893.45,1445.72 1912.57,1445.72 1931.68,1445.72 1950.79,1445.72 1969.91,1445.72 1989.02,1445.72 2008.13,1445.72 2027.25,1445.72 2046.36,1445.72 2065.48,1445.72 2084.59,1445.72 2103.7,1445.72 2122.82,1445.72 2141.93,1445.72 2161.04,1445.72 2180.16,1445.72 2199.27,1445.72 2218.39,1445.72 2237.5,1445.72 2256.61,1445.72 2275.73,1445.72 2294.84,1445.72 \"/>\n<polyline clip-path=\"url(#clip722)\" style=\"stroke:#00a9ad; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"364.35,1445.72 383.464,1445.72 402.578,1445.65 421.691,1444.98 440.805,1434.16 459.919,1378.89 479.033,1215.78 498.147,947.968 517.26,650.156 536.374,455.508 555.488,460.426 574.602,593.839 593.715,803.427 612.829,996.661 631.943,1168.25 651.057,1276.64 670.17,1354.36 689.284,1401.39 708.398,1419.71 727.512,1434.9 746.626,1441.04 765.739,1443.44 784.853,1444.92 803.967,1445.59 823.081,1445.72 842.194,1445.72 861.308,1445.72 880.422,1445.72 899.536,1445.72 918.65,1445.72 937.763,1445.72 956.877,1445.72 975.991,1445.72 995.105,1445.72 1014.22,1445.72 1033.33,1445.72 1052.45,1445.72 1071.56,1445.72 1090.67,1445.72 1109.79,1445.72 1128.9,1445.72 1148.01,1445.72 1167.13,1445.72 1186.24,1445.72 1205.36,1445.72 1224.47,1445.72 1243.58,1445.72 1262.7,1445.72 1281.81,1445.72 1300.92,1445.72 1320.04,1445.72 1339.15,1445.72 1358.27,1445.72 1377.38,1445.72 1396.49,1445.72 1415.61,1445.72 1434.72,1445.72 1453.84,1445.72 1472.95,1445.72 1492.06,1445.72 1511.18,1445.72 1530.29,1445.72 1549.4,1445.72 1568.52,1445.72 1587.63,1445.72 1606.75,1445.72 1625.86,1445.72 1644.97,1445.72 1664.09,1445.72 1683.2,1445.72 1702.31,1445.72 1721.43,1445.72 1740.54,1445.72 1759.66,1445.72 1778.77,1445.72 1797.88,1445.72 1817,1445.72 1836.11,1445.72 1855.22,1445.72 1874.34,1445.72 1893.45,1445.72 1912.57,1445.72 1931.68,1445.72 1950.79,1445.72 1969.91,1445.72 1989.02,1445.72 2008.13,1445.72 2027.25,1445.72 2046.36,1445.72 2065.48,1445.72 2084.59,1445.72 2103.7,1445.72 2122.82,1445.72 2141.93,1445.72 2161.04,1445.72 2180.16,1445.72 2199.27,1445.72 2218.39,1445.72 2237.5,1445.72 2256.61,1445.72 2275.73,1445.72 2294.84,1445.72 \"/>\n<polyline clip-path=\"url(#clip722)\" style=\"stroke:#ed5d92; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"364.35,1445.72 383.464,1445.72 402.578,1445.72 421.691,1445.04 440.805,1438.58 459.919,1404.46 479.033,1303.45 498.147,1090.23 517.26,832.077 536.374,619.108 555.488,512.377 574.602,545.024 593.715,695.221 612.829,859.62 631.943,1049.04 651.057,1188.48 670.17,1288.76 689.284,1361.55 708.398,1399.79 727.512,1420.57 746.626,1432.8 765.739,1438.83 784.853,1442.89 803.967,1444.55 823.081,1445.41 842.194,1445.59 861.308,1445.65 880.422,1445.72 899.536,1445.72 918.65,1445.72 937.763,1445.72 956.877,1445.72 975.991,1445.72 995.105,1445.72 1014.22,1445.72 1033.33,1445.72 1052.45,1445.72 1071.56,1445.72 1090.67,1445.72 1109.79,1445.72 1128.9,1445.72 1148.01,1445.72 1167.13,1445.72 1186.24,1445.72 1205.36,1445.72 1224.47,1445.72 1243.58,1445.72 1262.7,1445.72 1281.81,1445.72 1300.92,1445.72 1320.04,1445.72 1339.15,1445.72 1358.27,1445.72 1377.38,1445.72 1396.49,1445.72 1415.61,1445.72 1434.72,1445.72 1453.84,1445.72 1472.95,1445.72 1492.06,1445.72 1511.18,1445.72 1530.29,1445.72 1549.4,1445.72 1568.52,1445.72 1587.63,1445.72 1606.75,1445.72 1625.86,1445.72 1644.97,1445.72 1664.09,1445.72 1683.2,1445.72 1702.31,1445.72 1721.43,1445.72 1740.54,1445.72 1759.66,1445.72 1778.77,1445.72 1797.88,1445.72 1817,1445.72 1836.11,1445.72 1855.22,1445.72 1874.34,1445.72 1893.45,1445.72 1912.57,1445.72 1931.68,1445.72 1950.79,1445.72 1969.91,1445.72 1989.02,1445.72 2008.13,1445.72 2027.25,1445.72 2046.36,1445.72 2065.48,1445.72 2084.59,1445.72 2103.7,1445.72 2122.82,1445.72 2141.93,1445.72 2161.04,1445.72 2180.16,1445.72 2199.27,1445.72 2218.39,1445.72 2237.5,1445.72 2256.61,1445.72 2275.73,1445.72 2294.84,1445.72 \"/>\n<polyline clip-path=\"url(#clip722)\" style=\"stroke:#c68125; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"364.35,1445.72 383.464,1445.72 402.578,1445.72 421.691,1445.59 440.805,1442.4 459.919,1419.59 479.033,1346.3 498.147,1206.25 517.26,1007.24 536.374,787.135 555.488,631.65 574.602,589.044 593.715,627.961 612.829,772.072 631.943,925.466 651.057,1064.04 670.17,1194.2 689.284,1291.89 708.398,1348.02 727.512,1391.18 746.626,1414.48 765.739,1429.24 784.853,1437.97 803.967,1442.46 823.081,1444.24 842.194,1445.22 861.308,1445.47 880.422,1445.72 899.536,1445.72 918.65,1445.72 937.763,1445.72 956.877,1445.72 975.991,1445.72 995.105,1445.72 1014.22,1445.72 1033.33,1445.72 1052.45,1445.72 1071.56,1445.72 1090.67,1445.72 1109.79,1445.72 1128.9,1445.72 1148.01,1445.72 1167.13,1445.72 1186.24,1445.72 1205.36,1445.72 1224.47,1445.72 1243.58,1445.72 1262.7,1445.72 1281.81,1445.72 1300.92,1445.72 1320.04,1445.72 1339.15,1445.72 1358.27,1445.72 1377.38,1445.72 1396.49,1445.72 1415.61,1445.72 1434.72,1445.72 1453.84,1445.72 1472.95,1445.72 1492.06,1445.72 1511.18,1445.72 1530.29,1445.72 1549.4,1445.72 1568.52,1445.72 1587.63,1445.72 1606.75,1445.72 1625.86,1445.72 1644.97,1445.72 1664.09,1445.72 1683.2,1445.72 1702.31,1445.72 1721.43,1445.72 1740.54,1445.72 1759.66,1445.72 1778.77,1445.72 1797.88,1445.72 1817,1445.72 1836.11,1445.72 1855.22,1445.72 1874.34,1445.72 1893.45,1445.72 1912.57,1445.72 1931.68,1445.72 1950.79,1445.72 1969.91,1445.72 1989.02,1445.72 2008.13,1445.72 2027.25,1445.72 2046.36,1445.72 2065.48,1445.72 2084.59,1445.72 2103.7,1445.72 2122.82,1445.72 2141.93,1445.72 2161.04,1445.72 2180.16,1445.72 2199.27,1445.72 2218.39,1445.72 2237.5,1445.72 2256.61,1445.72 2275.73,1445.72 2294.84,1445.72 \"/>\n<polyline clip-path=\"url(#clip722)\" style=\"stroke:#00a98d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"364.35,1445.72 383.464,1445.72 402.578,1445.72 421.691,1445.65 440.805,1444.12 459.919,1433.24 479.033,1390.69 498.147,1293.92 517.26,1132.41 536.374,954.362 555.488,769.859 574.602,664.112 593.715,645.668 612.829,703.213 631.943,814.309 651.057,948.337 670.17,1088.82 689.284,1199.55 708.398,1289.49 727.512,1345.69 746.626,1387.74 765.739,1410.61 784.853,1427.03 803.967,1435.02 823.081,1439.88 842.194,1442.27 861.308,1444.12 880.422,1444.98 899.536,1445.59 918.65,1445.65 937.763,1445.65 956.877,1445.72 975.991,1445.72 995.105,1445.72 1014.22,1445.72 1033.33,1445.72 1052.45,1445.72 1071.56,1445.72 1090.67,1445.72 1109.79,1445.72 1128.9,1445.72 1148.01,1445.72 1167.13,1445.72 1186.24,1445.72 1205.36,1445.72 1224.47,1445.72 1243.58,1445.72 1262.7,1445.72 1281.81,1445.72 1300.92,1445.72 1320.04,1445.72 1339.15,1445.72 1358.27,1445.72 1377.38,1445.72 1396.49,1445.72 1415.61,1445.72 1434.72,1445.72 1453.84,1445.72 1472.95,1445.72 1492.06,1445.72 1511.18,1445.72 1530.29,1445.72 1549.4,1445.72 1568.52,1445.72 1587.63,1445.72 1606.75,1445.72 1625.86,1445.72 1644.97,1445.72 1664.09,1445.72 1683.2,1445.72 1702.31,1445.72 1721.43,1445.72 1740.54,1445.72 1759.66,1445.72 1778.77,1445.72 1797.88,1445.72 1817,1445.72 1836.11,1445.72 1855.22,1445.72 1874.34,1445.72 1893.45,1445.72 1912.57,1445.72 1931.68,1445.72 1950.79,1445.72 1969.91,1445.72 1989.02,1445.72 2008.13,1445.72 2027.25,1445.72 2046.36,1445.72 2065.48,1445.72 2084.59,1445.72 2103.7,1445.72 2122.82,1445.72 2141.93,1445.72 2161.04,1445.72 2180.16,1445.72 2199.27,1445.72 2218.39,1445.72 2237.5,1445.72 2256.61,1445.72 2275.73,1445.72 2294.84,1445.72 \"/>\n<polyline clip-path=\"url(#clip722)\" style=\"stroke:#8e971d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"364.35,1445.72 383.464,1445.72 402.578,1445.72 421.691,1445.65 440.805,1445.1 459.919,1439.94 479.033,1416.33 498.147,1360.38 517.26,1255.8 536.374,1105.67 555.488,928.971 574.602,765.678 593.715,692.516 612.829,671.981 631.943,745.205 651.057,845.295 670.17,981.598 689.284,1103.02 708.398,1198.01 727.512,1284.08 746.626,1341.26 765.739,1383.68 784.853,1406.55 803.967,1424.07 823.081,1433.11 842.194,1438.09 861.308,1441.6 880.422,1443.32 899.536,1444.73 918.65,1445.22 937.763,1445.35 956.877,1445.65 975.991,1445.65 995.105,1445.65 1014.22,1445.65 1033.33,1445.72 1052.45,1445.72 1071.56,1445.72 1090.67,1445.72 1109.79,1445.72 1128.9,1445.72 1148.01,1445.72 1167.13,1445.72 1186.24,1445.72 1205.36,1445.72 1224.47,1445.72 1243.58,1445.72 1262.7,1445.72 1281.81,1445.72 1300.92,1445.72 1320.04,1445.72 1339.15,1445.72 1358.27,1445.72 1377.38,1445.72 1396.49,1445.72 1415.61,1445.72 1434.72,1445.72 1453.84,1445.72 1472.95,1445.72 1492.06,1445.72 1511.18,1445.72 1530.29,1445.72 1549.4,1445.72 1568.52,1445.72 1587.63,1445.72 1606.75,1445.72 1625.86,1445.72 1644.97,1445.72 1664.09,1445.72 1683.2,1445.72 1702.31,1445.72 1721.43,1445.72 1740.54,1445.72 1759.66,1445.72 1778.77,1445.72 1797.88,1445.72 1817,1445.72 1836.11,1445.72 1855.22,1445.72 1874.34,1445.72 1893.45,1445.72 1912.57,1445.72 1931.68,1445.72 1950.79,1445.72 1969.91,1445.72 1989.02,1445.72 2008.13,1445.72 2027.25,1445.72 2046.36,1445.72 2065.48,1445.72 2084.59,1445.72 2103.7,1445.72 2122.82,1445.72 2141.93,1445.72 2161.04,1445.72 2180.16,1445.72 2199.27,1445.72 2218.39,1445.72 2237.5,1445.72 2256.61,1445.72 2275.73,1445.72 2294.84,1445.72 \"/>\n<polyline clip-path=\"url(#clip722)\" style=\"stroke:#00a8cb; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"364.35,1445.72 383.464,1445.72 402.578,1445.72 421.691,1445.72 440.805,1445.29 459.919,1441.84 479.033,1426.47 498.147,1391.18 517.26,1316.05 536.374,1192.35 555.488,1037.73 574.602,887.778 593.715,803.058 612.829,734.138 631.943,743.299 651.057,801.644 670.17,897.062 689.284,1015.9 708.398,1107.51 727.512,1203.36 746.626,1280.95 765.739,1337.26 784.853,1375.81 803.967,1400.83 823.081,1417.99 842.194,1427.33 861.308,1434.59 880.422,1439.01 899.536,1441.1 918.65,1443.5 937.763,1444.24 956.877,1445.1 975.991,1445.53 995.105,1445.47 1014.22,1445.72 1033.33,1445.72 1052.45,1445.72 1071.56,1445.72 1090.67,1445.72 1109.79,1445.72 1128.9,1445.72 1148.01,1445.72 1167.13,1445.72 1186.24,1445.72 1205.36,1445.72 1224.47,1445.72 1243.58,1445.72 1262.7,1445.72 1281.81,1445.72 1300.92,1445.72 1320.04,1445.72 1339.15,1445.72 1358.27,1445.72 1377.38,1445.72 1396.49,1445.72 1415.61,1445.72 1434.72,1445.72 1453.84,1445.72 1472.95,1445.72 1492.06,1445.72 1511.18,1445.72 1530.29,1445.72 1549.4,1445.72 1568.52,1445.72 1587.63,1445.72 1606.75,1445.72 1625.86,1445.72 1644.97,1445.72 1664.09,1445.72 1683.2,1445.72 1702.31,1445.72 1721.43,1445.72 1740.54,1445.72 1759.66,1445.72 1778.77,1445.72 1797.88,1445.72 1817,1445.72 1836.11,1445.72 1855.22,1445.72 1874.34,1445.72 1893.45,1445.72 1912.57,1445.72 1931.68,1445.72 1950.79,1445.72 1969.91,1445.72 1989.02,1445.72 2008.13,1445.72 2027.25,1445.72 2046.36,1445.72 2065.48,1445.72 2084.59,1445.72 2103.7,1445.72 2122.82,1445.72 2141.93,1445.72 2161.04,1445.72 2180.16,1445.72 2199.27,1445.72 2218.39,1445.72 2237.5,1445.72 2256.61,1445.72 2275.73,1445.72 2294.84,1445.72 \"/>\n<polyline clip-path=\"url(#clip722)\" style=\"stroke:#9b7fe8; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"364.35,1445.72 383.464,1445.72 402.578,1445.72 421.691,1445.65 440.805,1445.47 459.919,1444.3 479.033,1437.6 498.147,1418.17 517.26,1368.19 536.374,1288.82 555.488,1176.31 574.602,1051.75 593.715,929.647 612.829,844.066 631.943,805.702 651.057,802.382 670.17,838.287 689.284,898.107 708.398,997.829 727.512,1090.97 746.626,1185.28 765.739,1250.64 784.853,1305.85 803.967,1351.65 823.081,1385.1 842.194,1406.18 861.308,1421.62 880.422,1430.35 899.536,1435.88 918.65,1440.12 937.763,1441.97 956.877,1443.01 975.991,1444.42 995.105,1444.67 1014.22,1445.04 1033.33,1445.53 1052.45,1445.72 1071.56,1445.72 1090.67,1445.72 1109.79,1445.72 1128.9,1445.72 1148.01,1445.72 1167.13,1445.72 1186.24,1445.72 1205.36,1445.72 1224.47,1445.72 1243.58,1445.72 1262.7,1445.72 1281.81,1445.72 1300.92,1445.72 1320.04,1445.72 1339.15,1445.72 1358.27,1445.72 1377.38,1445.72 1396.49,1445.72 1415.61,1445.72 1434.72,1445.72 1453.84,1445.72 1472.95,1445.72 1492.06,1445.72 1511.18,1445.72 1530.29,1445.72 1549.4,1445.72 1568.52,1445.72 1587.63,1445.72 1606.75,1445.72 1625.86,1445.72 1644.97,1445.72 1664.09,1445.72 1683.2,1445.72 1702.31,1445.72 1721.43,1445.72 1740.54,1445.72 1759.66,1445.72 1778.77,1445.72 1797.88,1445.72 1817,1445.72 1836.11,1445.72 1855.22,1445.72 1874.34,1445.72 1893.45,1445.72 1912.57,1445.72 1931.68,1445.72 1950.79,1445.72 1969.91,1445.72 1989.02,1445.72 2008.13,1445.72 2027.25,1445.72 2046.36,1445.72 2065.48,1445.72 2084.59,1445.72 2103.7,1445.72 2122.82,1445.72 2141.93,1445.72 2161.04,1445.72 2180.16,1445.72 2199.27,1445.72 2218.39,1445.72 2237.5,1445.72 2256.61,1445.72 2275.73,1445.72 2294.84,1445.72 \"/>\n<polyline clip-path=\"url(#clip722)\" style=\"stroke:#608cf6; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"364.35,1445.72 383.464,1445.72 402.578,1445.72 421.691,1445.72 440.805,1445.72 459.919,1445.35 479.033,1441.66 498.147,1429.79 517.26,1404.89 536.374,1347.53 555.488,1271.11 574.602,1160.14 593.715,1054.15 612.829,953.132 631.943,892.758 651.057,843.512 670.17,849.353 689.284,873.884 708.398,926.204 727.512,1007.91 746.626,1092.63 765.739,1166.84 784.853,1236.93 803.967,1290.11 823.081,1334.5 842.194,1367.64 861.308,1389.46 880.422,1407.17 899.536,1420.32 918.65,1429.48 937.763,1433.73 956.877,1436.25 975.991,1438.71 995.105,1440.92 1014.22,1441.78 1033.33,1443.75 1052.45,1444.61 1071.56,1444.92 1090.67,1445.59 1109.79,1445.35 1128.9,1445.65 1148.01,1445.72 1167.13,1445.72 1186.24,1445.72 1205.36,1445.72 1224.47,1445.72 1243.58,1445.72 1262.7,1445.72 1281.81,1445.72 1300.92,1445.72 1320.04,1445.72 1339.15,1445.72 1358.27,1445.72 1377.38,1445.72 1396.49,1445.72 1415.61,1445.72 1434.72,1445.72 1453.84,1445.72 1472.95,1445.72 1492.06,1445.72 1511.18,1445.72 1530.29,1445.72 1549.4,1445.72 1568.52,1445.72 1587.63,1445.72 1606.75,1445.72 1625.86,1445.72 1644.97,1445.72 1664.09,1445.72 1683.2,1445.72 1702.31,1445.72 1721.43,1445.72 1740.54,1445.72 1759.66,1445.72 1778.77,1445.72 1797.88,1445.72 1817,1445.72 1836.11,1445.72 1855.22,1445.72 1874.34,1445.72 1893.45,1445.72 1912.57,1445.72 1931.68,1445.72 1950.79,1445.72 1969.91,1445.72 1989.02,1445.72 2008.13,1445.72 2027.25,1445.72 2046.36,1445.72 2065.48,1445.72 2084.59,1445.72 2103.7,1445.72 2122.82,1445.72 2141.93,1445.72 2161.04,1445.72 2180.16,1445.72 2199.27,1445.72 2218.39,1445.72 2237.5,1445.72 2256.61,1445.72 2275.73,1445.72 2294.84,1445.72 \"/>\n<polyline clip-path=\"url(#clip722)\" style=\"stroke:#f05f73; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"364.35,1445.72 383.464,1445.72 402.578,1445.72 421.691,1445.72 440.805,1445.65 459.919,1445.59 479.033,1444.24 498.147,1439.01 517.26,1424.14 536.374,1395.36 555.488,1343.6 574.602,1266.13 593.715,1169.3 612.829,1069.15 631.943,969.056 651.057,908.252 670.17,872.408 689.284,893.004 708.398,907.022 727.512,967.027 746.626,1022.91 765.739,1089.13 784.853,1153.74 803.967,1217.13 823.081,1270.37 842.194,1310.89 861.308,1345.13 880.422,1368.37 899.536,1387.62 918.65,1403.48 937.763,1417.25 956.877,1426.35 975.991,1433.6 995.105,1436.49 1014.22,1439.01 1033.33,1441.47 1052.45,1442.58 1071.56,1443.99 1090.67,1444.85 1109.79,1445.04 1128.9,1445.29 1148.01,1445.47 1167.13,1445.72 1186.24,1445.72 1205.36,1445.72 1224.47,1445.72 1243.58,1445.72 1262.7,1445.72 1281.81,1445.72 1300.92,1445.72 1320.04,1445.72 1339.15,1445.72 1358.27,1445.72 1377.38,1445.72 1396.49,1445.72 1415.61,1445.72 1434.72,1445.72 1453.84,1445.72 1472.95,1445.72 1492.06,1445.72 1511.18,1445.72 1530.29,1445.72 1549.4,1445.72 1568.52,1445.72 1587.63,1445.72 1606.75,1445.72 1625.86,1445.72 1644.97,1445.72 1664.09,1445.72 1683.2,1445.72 1702.31,1445.72 1721.43,1445.72 1740.54,1445.72 1759.66,1445.72 1778.77,1445.72 1797.88,1445.72 1817,1445.72 1836.11,1445.72 1855.22,1445.72 1874.34,1445.72 1893.45,1445.72 1912.57,1445.72 1931.68,1445.72 1950.79,1445.72 1969.91,1445.72 1989.02,1445.72 2008.13,1445.72 2027.25,1445.72 2046.36,1445.72 2065.48,1445.72 2084.59,1445.72 2103.7,1445.72 2122.82,1445.72 2141.93,1445.72 2161.04,1445.72 2180.16,1445.72 2199.27,1445.72 2218.39,1445.72 2237.5,1445.72 2256.61,1445.72 2275.73,1445.72 2294.84,1445.72 \"/>\n<polyline clip-path=\"url(#clip722)\" style=\"stroke:#dd64b5; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"364.35,1445.72 383.464,1445.72 402.578,1445.72 421.691,1445.72 440.805,1445.72 459.919,1445.59 479.033,1445.22 498.147,1442.21 517.26,1432.56 536.374,1414.67 555.488,1377.66 574.602,1329.03 593.715,1253.59 612.829,1173.48 631.943,1078.68 651.057,1008.65 670.17,953.809 689.284,928.54 708.398,914.523 727.512,951.042 746.626,972.13 765.739,1046.21 784.853,1085.13 803.967,1135.05 823.081,1197.21 842.194,1247.26 861.308,1285.19 880.422,1324.29 899.536,1352.2 918.65,1377.35 937.763,1396.53 956.877,1412.58 975.991,1420.51 995.105,1425.61 1014.22,1431.45 1033.33,1435.94 1052.45,1438.71 1071.56,1440.31 1090.67,1442.64 1109.79,1443.75 1128.9,1444.73 1148.01,1443.99 1167.13,1444.42 1186.24,1444.73 1205.36,1444.98 1224.47,1445.22 1243.58,1445.35 1262.7,1445.35 1281.81,1445.53 1300.92,1445.59 1320.04,1445.72 1339.15,1445.65 1358.27,1445.72 1377.38,1445.72 1396.49,1445.72 1415.61,1445.72 1434.72,1445.72 1453.84,1445.72 1472.95,1445.72 1492.06,1445.72 1511.18,1445.72 1530.29,1445.72 1549.4,1445.72 1568.52,1445.72 1587.63,1445.72 1606.75,1445.72 1625.86,1445.72 1644.97,1445.72 1664.09,1445.72 1683.2,1445.72 1702.31,1445.72 1721.43,1445.72 1740.54,1445.72 1759.66,1445.72 1778.77,1445.72 1797.88,1445.72 1817,1445.72 1836.11,1445.72 1855.22,1445.72 1874.34,1445.72 1893.45,1445.72 1912.57,1445.72 1931.68,1445.72 1950.79,1445.72 1969.91,1445.72 1989.02,1445.72 2008.13,1445.72 2027.25,1445.72 2046.36,1445.72 2065.48,1445.72 2084.59,1445.72 2103.7,1445.72 2122.82,1445.72 2141.93,1445.72 2161.04,1445.72 2180.16,1445.72 2199.27,1445.72 2218.39,1445.72 2237.5,1445.72 2256.61,1445.72 2275.73,1445.72 2294.84,1445.72 \"/>\n<polyline clip-path=\"url(#clip722)\" style=\"stroke:#6b9e32; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"364.35,1445.72 383.464,1445.72 402.578,1445.72 421.691,1445.72 440.805,1445.72 459.919,1445.59 479.033,1445.29 498.147,1443.81 517.26,1438.77 536.374,1427.21 555.488,1409.32 574.602,1373.84 593.715,1327.49 612.829,1267.54 631.943,1206.86 651.057,1133.46 670.17,1060.42 689.284,1019.22 708.398,981.414 727.512,981.414 746.626,985.533 765.739,1003.98 784.853,1045.91 803.967,1085.01 823.081,1122.39 842.194,1174.34 861.308,1213.07 880.422,1260.66 899.536,1287.77 918.65,1330.75 937.763,1357.18 956.877,1369.79 975.991,1385.16 995.105,1400.1 1014.22,1410.24 1033.33,1414.05 1052.45,1418.54 1071.56,1423.77 1090.67,1427.03 1109.79,1431.45 1128.9,1431.94 1148.01,1435.39 1167.13,1436.74 1186.24,1440.37 1205.36,1440.86 1224.47,1441.54 1243.58,1443.07 1262.7,1443.81 1281.81,1443.93 1300.92,1444.61 1320.04,1445.35 1339.15,1445.1 1358.27,1445.53 1377.38,1445.65 1396.49,1445.53 1415.61,1445.72 1434.72,1445.72 1453.84,1445.72 1472.95,1445.72 1492.06,1445.72 1511.18,1445.65 1530.29,1445.72 1549.4,1445.72 1568.52,1445.72 1587.63,1445.72 1606.75,1445.72 1625.86,1445.72 1644.97,1445.72 1664.09,1445.72 1683.2,1445.72 1702.31,1445.72 1721.43,1445.72 1740.54,1445.72 1759.66,1445.72 1778.77,1445.72 1797.88,1445.72 1817,1445.72 1836.11,1445.72 1855.22,1445.72 1874.34,1445.72 1893.45,1445.72 1912.57,1445.72 1931.68,1445.72 1950.79,1445.72 1969.91,1445.72 1989.02,1445.72 2008.13,1445.72 2027.25,1445.72 2046.36,1445.72 2065.48,1445.72 2084.59,1445.72 2103.7,1445.72 2122.82,1445.72 2141.93,1445.72 2161.04,1445.72 2180.16,1445.72 2199.27,1445.72 2218.39,1445.72 2237.5,1445.72 2256.61,1445.72 2275.73,1445.72 2294.84,1445.72 \"/>\n<polyline clip-path=\"url(#clip722)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"364.35,1445.72 383.464,1445.72 402.578,1445.72 421.691,1445.72 440.805,1445.72 459.919,1445.59 479.033,1445.22 498.147,1444.73 517.26,1442.4 536.374,1437.35 555.488,1427.76 574.602,1411.96 593.715,1380.98 612.829,1344.4 631.943,1290.17 651.057,1235.94 670.17,1176.74 689.284,1126.94 708.398,1085.44 727.512,1048.43 746.626,1031.58 765.739,1028.94 784.853,1046.64 803.967,1063.67 823.081,1097.37 842.194,1135.3 861.308,1166.29 880.422,1198.81 899.536,1230.35 918.65,1258.26 937.763,1292.26 956.877,1314.82 975.991,1332.47 995.105,1354.6 1014.22,1365.91 1033.33,1380.85 1052.45,1389.09 1071.56,1396.22 1090.67,1402.74 1109.79,1409.26 1128.9,1413.5 1148.01,1417.25 1167.13,1422.48 1186.24,1426.9 1205.36,1427.39 1224.47,1429.85 1243.58,1433.67 1262.7,1436.8 1281.81,1438.77 1300.92,1439.51 1320.04,1440.43 1339.15,1441.97 1358.27,1443.56 1377.38,1444.18 1396.49,1444.24 1415.61,1444.42 1434.72,1445.1 1453.84,1445.47 1472.95,1445.59 1492.06,1445.72 1511.18,1445.72 1530.29,1445.72 1549.4,1445.72 1568.52,1445.72 1587.63,1445.72 1606.75,1445.72 1625.86,1445.72 1644.97,1445.72 1664.09,1445.72 1683.2,1445.72 1702.31,1445.72 1721.43,1445.72 1740.54,1445.72 1759.66,1445.72 1778.77,1445.72 1797.88,1445.72 1817,1445.72 1836.11,1445.72 1855.22,1445.72 1874.34,1445.72 1893.45,1445.72 1912.57,1445.72 1931.68,1445.72 1950.79,1445.72 1969.91,1445.72 1989.02,1445.72 2008.13,1445.72 2027.25,1445.72 2046.36,1445.72 2065.48,1445.72 2084.59,1445.72 2103.7,1445.72 2122.82,1445.72 2141.93,1445.72 2161.04,1445.72 2180.16,1445.72 2199.27,1445.72 2218.39,1445.72 2237.5,1445.72 2256.61,1445.72 2275.73,1445.72 2294.84,1445.72 \"/>\n<polyline clip-path=\"url(#clip722)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"364.35,1445.72 383.464,1445.72 402.578,1445.72 421.691,1445.72 440.805,1445.72 459.919,1445.72 479.033,1445.72 498.147,1445.41 517.26,1444.3 536.374,1441.78 555.488,1436.12 574.602,1425.18 593.715,1406.12 612.829,1385.28 631.943,1346.92 651.057,1309.84 670.17,1259.92 689.284,1217.93 708.398,1173.11 727.512,1141.39 746.626,1110.4 765.739,1085.13 784.853,1090.79 803.967,1095.03 823.081,1104.99 842.194,1128.78 861.308,1147.23 880.422,1165.98 899.536,1195.06 918.65,1210.24 937.763,1243.57 956.877,1264.84 975.991,1286.54 995.105,1305.36 1014.22,1325.21 1033.33,1335.36 1052.45,1343.17 1071.56,1360.81 1090.67,1366.9 1109.79,1375.75 1128.9,1381.71 1148.01,1390.44 1167.13,1397.02 1186.24,1398.56 1205.36,1406.18 1224.47,1414.85 1243.58,1418.54 1262.7,1423.34 1281.81,1428.5 1300.92,1432.07 1320.04,1433.73 1339.15,1436.06 1358.27,1439.08 1377.38,1440.55 1396.49,1440.92 1415.61,1442.58 1434.72,1443.75 1453.84,1444.24 1472.95,1444.85 1492.06,1445.29 1511.18,1444.98 1530.29,1445.41 1549.4,1445.53 1568.52,1445.59 1587.63,1445.41 1606.75,1445.72 1625.86,1445.72 1644.97,1445.65 1664.09,1445.65 1683.2,1445.72 1702.31,1445.72 1721.43,1445.72 1740.54,1445.65 1759.66,1445.72 1778.77,1445.72 1797.88,1445.72 1817,1445.72 1836.11,1445.72 1855.22,1445.72 1874.34,1445.72 1893.45,1445.72 1912.57,1445.72 1931.68,1445.72 1950.79,1445.72 1969.91,1445.72 1989.02,1445.72 2008.13,1445.72 2027.25,1445.72 2046.36,1445.72 2065.48,1445.72 2084.59,1445.72 2103.7,1445.72 2122.82,1445.72 2141.93,1445.72 2161.04,1445.72 2180.16,1445.72 2199.27,1445.72 2218.39,1445.72 2237.5,1445.72 2256.61,1445.72 2275.73,1445.72 2294.84,1445.72 \"/>\n<polyline clip-path=\"url(#clip722)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"364.35,1445.72 383.464,1445.72 402.578,1445.72 421.691,1445.72 440.805,1445.72 459.919,1445.72 479.033,1445.72 498.147,1445.72 517.26,1445.29 536.374,1443.93 555.488,1442.03 574.602,1437.66 593.715,1430.59 612.829,1419.4 631.943,1402.13 651.057,1383.5 670.17,1360.87 689.284,1324.91 708.398,1296.26 727.512,1266.13 746.626,1236.99 765.739,1204.96 784.853,1191.92 803.967,1173.66 823.081,1167.45 842.194,1168.81 861.308,1169.79 880.422,1172.25 899.536,1189.03 918.65,1194.69 937.763,1201.64 956.877,1218.05 975.991,1240.8 995.105,1248.12 1014.22,1266.38 1033.33,1289.12 1052.45,1289.68 1071.56,1311.5 1090.67,1311.32 1109.79,1326.14 1128.9,1326.44 1148.01,1338.06 1167.13,1340.21 1186.24,1345.13 1205.36,1360.44 1224.47,1367.2 1243.58,1372.31 1262.7,1379.19 1281.81,1391.12 1300.92,1391.74 1320.04,1402.74 1339.15,1406.74 1358.27,1413.19 1377.38,1417.43 1396.49,1421.86 1415.61,1425.37 1434.72,1429.67 1453.84,1431.33 1472.95,1435.63 1492.06,1436.92 1511.18,1437.54 1530.29,1440.18 1549.4,1441.04 1568.52,1442.33 1587.63,1443.69 1606.75,1444.18 1625.86,1444.55 1644.97,1445.22 1664.09,1445.22 1683.2,1445.29 1702.31,1445.65 1721.43,1445.53 1740.54,1445.53 1759.66,1445.72 1778.77,1445.65 1797.88,1445.65 1817,1445.72 1836.11,1445.72 1855.22,1445.65 1874.34,1445.65 1893.45,1445.72 1912.57,1445.72 1931.68,1445.72 1950.79,1445.72 1969.91,1445.72 1989.02,1445.72 2008.13,1445.72 2027.25,1445.72 2046.36,1445.72 2065.48,1445.72 2084.59,1445.72 2103.7,1445.72 2122.82,1445.72 2141.93,1445.72 2161.04,1445.72 2180.16,1445.72 2199.27,1445.72 2218.39,1445.72 2237.5,1445.72 2256.61,1445.72 2275.73,1445.72 2294.84,1445.72 \"/>\n<polyline clip-path=\"url(#clip722)\" style=\"stroke:#c271d2; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"364.35,1445.72 383.464,1445.72 402.578,1445.72 421.691,1445.72 440.805,1445.72 459.919,1445.72 479.033,1445.72 498.147,1445.72 517.26,1445.47 536.374,1445.16 555.488,1444.3 574.602,1442.58 593.715,1438.09 612.829,1432.99 631.943,1424.81 651.057,1416.51 670.17,1401.2 689.284,1381.78 708.398,1363.76 727.512,1345.07 746.626,1318.33 765.739,1306.89 784.853,1290.29 803.967,1270.99 823.081,1263.98 842.194,1250.64 861.308,1246.95 880.422,1239.94 899.536,1241.91 918.65,1245.35 937.763,1250.45 956.877,1249.59 975.991,1260.41 995.105,1258.88 1014.22,1271.73 1033.33,1267.36 1052.45,1269.64 1071.56,1270.8 1090.67,1265.76 1109.79,1263.98 1128.9,1270.5 1148.01,1267.98 1167.13,1277.07 1186.24,1281.93 1205.36,1288.45 1224.47,1293.37 1243.58,1302.04 1262.7,1310.89 1281.81,1327.61 1300.92,1334.07 1320.04,1348.95 1339.15,1357.18 1358.27,1372.06 1377.38,1377.78 1396.49,1385.65 1415.61,1392.1 1434.72,1402.19 1453.84,1408.21 1472.95,1414.85 1492.06,1421 1511.18,1425.67 1530.29,1429.79 1549.4,1434.16 1568.52,1435.51 1587.63,1436.92 1606.75,1439.38 1625.86,1441.35 1644.97,1441.47 1664.09,1442.7 1683.2,1444.18 1702.31,1444.36 1721.43,1444.92 1740.54,1444.98 1759.66,1445.35 1778.77,1445.29 1797.88,1445.47 1817,1445.72 1836.11,1445.53 1855.22,1445.59 1874.34,1445.65 1893.45,1445.72 1912.57,1445.72 1931.68,1445.72 1950.79,1445.72 1969.91,1445.72 1989.02,1445.72 2008.13,1445.72 2027.25,1445.72 2046.36,1445.72 2065.48,1445.72 2084.59,1445.72 2103.7,1445.72 2122.82,1445.72 2141.93,1445.72 2161.04,1445.72 2180.16,1445.72 2199.27,1445.72 2218.39,1445.72 2237.5,1445.72 2256.61,1445.72 2275.73,1445.72 2294.84,1445.72 \"/>\n<polyline clip-path=\"url(#clip722)\" style=\"stroke:#ac8d18; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"364.35,1445.72 383.464,1445.72 402.578,1445.72 421.691,1445.72 440.805,1445.72 459.919,1445.72 479.033,1445.72 498.147,1445.72 517.26,1445.65 536.374,1445.59 555.488,1445.47 574.602,1444.92 593.715,1444.18 612.829,1442.15 631.943,1438.03 651.057,1433.67 670.17,1430.04 689.284,1420.2 708.398,1410.67 727.512,1397.76 746.626,1386.02 765.739,1372.55 784.853,1362.16 803.967,1348.27 823.081,1340.65 842.194,1329.46 861.308,1322.45 880.422,1309.29 899.536,1313.35 918.65,1316.18 937.763,1308.8 956.877,1302.59 975.991,1304.06 995.105,1297.36 1014.22,1301.6 1033.33,1293.67 1052.45,1295.89 1071.56,1291.58 1090.67,1282.73 1109.79,1289.06 1128.9,1276.95 1148.01,1270.13 1167.13,1265.58 1186.24,1266.62 1205.36,1256.48 1224.47,1265.33 1243.58,1257.52 1262.7,1257.46 1281.81,1261.64 1300.92,1262.32 1320.04,1269.7 1339.15,1281.69 1358.27,1289.19 1377.38,1293.12 1396.49,1306.95 1415.61,1323.98 1434.72,1333.88 1453.84,1345.07 1472.95,1360.13 1492.06,1368.68 1511.18,1382.76 1530.29,1391 1549.4,1402.31 1568.52,1410.36 1587.63,1416.45 1606.75,1421 1625.86,1427.76 1644.97,1430.22 1664.09,1431.88 1683.2,1434.4 1702.31,1436.92 1721.43,1438.52 1740.54,1440.18 1759.66,1441.23 1778.77,1442.83 1797.88,1443.01 1817,1444.06 1836.11,1443.81 1855.22,1444.36 1874.34,1443.87 1893.45,1445.16 1912.57,1445.47 1931.68,1445.29 1950.79,1445.47 1969.91,1445.65 1989.02,1445.53 2008.13,1445.72 2027.25,1445.65 2046.36,1445.65 2065.48,1445.72 2084.59,1445.59 2103.7,1445.72 2122.82,1445.72 2141.93,1445.72 2161.04,1445.72 2180.16,1445.72 2199.27,1445.72 2218.39,1445.72 2237.5,1445.72 2256.61,1445.72 2275.73,1445.72 2294.84,1445.72 \"/>\n<polyline clip-path=\"url(#clip722)\" style=\"stroke:#00a9ad; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"364.35,1445.72 383.464,1445.72 402.578,1445.72 421.691,1445.72 440.805,1445.72 459.919,1445.72 479.033,1445.72 498.147,1445.72 517.26,1445.72 536.374,1445.65 555.488,1445.29 574.602,1445.41 593.715,1445.29 612.829,1444.55 631.943,1443.5 651.057,1442.03 670.17,1440.18 689.284,1437.29 708.398,1434.65 727.512,1430.41 746.626,1424.44 765.739,1417.62 784.853,1414.73 803.967,1408.89 823.081,1402.86 842.194,1396.84 861.308,1390.44 880.422,1383.13 899.536,1379.5 918.65,1378.52 937.763,1371.26 956.877,1366.59 975.991,1365.61 995.105,1360.81 1014.22,1358.6 1033.33,1352.63 1052.45,1345.01 1071.56,1338.8 1090.67,1331.73 1109.79,1317.77 1128.9,1313.1 1148.01,1292.94 1167.13,1282.61 1186.24,1271.23 1205.36,1260.11 1224.47,1251.01 1243.58,1238.77 1262.7,1238.1 1281.81,1224.39 1300.92,1228.44 1320.04,1224.39 1339.15,1222.05 1358.27,1226.17 1377.38,1230.47 1396.49,1233.91 1415.61,1242.71 1434.72,1258.26 1453.84,1268.16 1472.95,1281.44 1492.06,1299.64 1511.18,1314.02 1530.29,1325.64 1549.4,1347.04 1568.52,1361.73 1587.63,1372.49 1606.75,1383.8 1625.86,1392.72 1644.97,1403.11 1664.09,1407.91 1683.2,1415.28 1702.31,1419.22 1721.43,1424.75 1740.54,1428.62 1759.66,1431.08 1778.77,1433.36 1797.88,1434.65 1817,1438.58 1836.11,1440.55 1855.22,1440.67 1874.34,1441.97 1893.45,1443.38 1912.57,1443.93 1931.68,1444.67 1950.79,1445.16 1969.91,1444.98 1989.02,1445.29 2008.13,1445.41 2027.25,1445.72 2046.36,1445.65 2065.48,1445.65 2084.59,1445.65 2103.7,1445.72 2122.82,1445.72 2141.93,1445.72 2161.04,1445.72 2180.16,1445.72 2199.27,1445.72 2218.39,1445.72 2237.5,1445.72 2256.61,1445.72 2275.73,1445.72 2294.84,1445.72 \"/>\n<polyline clip-path=\"url(#clip722)\" style=\"stroke:#ed5d92; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"364.35,1445.72 383.464,1445.72 402.578,1445.72 421.691,1445.72 440.805,1445.72 459.919,1445.72 479.033,1445.72 498.147,1445.72 517.26,1445.72 536.374,1445.72 555.488,1445.72 574.602,1445.65 593.715,1445.72 612.829,1445.59 631.943,1445.65 651.057,1445.41 670.17,1444.85 689.284,1444.61 708.398,1444.61 727.512,1443.75 746.626,1442.33 765.739,1441.72 784.853,1438.83 803.967,1437.78 823.081,1434.83 842.194,1433.17 861.308,1429.67 880.422,1427.82 899.536,1423.09 918.65,1419.03 937.763,1421.8 956.877,1416.7 975.991,1410.67 995.105,1408.09 1014.22,1402.31 1033.33,1398.74 1052.45,1388.85 1071.56,1379.07 1090.67,1374.64 1109.79,1362.96 1128.9,1349.01 1148.01,1339.42 1167.13,1327.67 1186.24,1320.23 1205.36,1296.75 1224.47,1278.18 1243.58,1271.17 1262.7,1257.22 1281.81,1251.01 1300.92,1233.67 1320.04,1213.56 1339.15,1201.33 1358.27,1198.69 1377.38,1187.19 1396.49,1188.66 1415.61,1192.54 1434.72,1198.62 1453.84,1201.08 1472.95,1212.7 1492.06,1234.71 1511.18,1253.96 1530.29,1262.13 1549.4,1280.09 1568.52,1300.5 1587.63,1319.62 1606.75,1330.69 1625.86,1344.46 1644.97,1359.27 1664.09,1367.82 1683.2,1377.9 1702.31,1386.69 1721.43,1397.64 1740.54,1409.07 1759.66,1412.95 1778.77,1419.65 1797.88,1425.98 1817,1428.99 1836.11,1432.01 1855.22,1434.83 1874.34,1437.66 1893.45,1437.97 1912.57,1441.54 1931.68,1442.46 1950.79,1442.64 1969.91,1443.69 1989.02,1444.18 2008.13,1444.3 2027.25,1444.61 2046.36,1444.42 2065.48,1445.16 2084.59,1445.22 2103.7,1445.59 2122.82,1445.72 2141.93,1445.53 2161.04,1445.72 2180.16,1445.72 2199.27,1445.72 2218.39,1445.72 2237.5,1445.72 2256.61,1445.72 2275.73,1445.72 2294.84,1445.72 \"/>\n<polyline clip-path=\"url(#clip722)\" style=\"stroke:#c68125; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"364.35,1445.72 383.464,1445.72 402.578,1445.72 421.691,1445.72 440.805,1445.72 459.919,1445.72 479.033,1445.72 498.147,1445.72 517.26,1445.72 536.374,1445.72 555.488,1445.72 574.602,1445.72 593.715,1445.72 612.829,1445.72 631.943,1445.65 651.057,1445.59 670.17,1445.59 689.284,1445.53 708.398,1445.1 727.512,1444.92 746.626,1445.1 765.739,1444.3 784.853,1444.49 803.967,1444.18 823.081,1443.38 842.194,1443.56 861.308,1442.09 880.422,1440.61 899.536,1440.67 918.65,1439.32 937.763,1437.6 956.877,1436.68 975.991,1434.59 995.105,1434.46 1014.22,1430.71 1033.33,1427.39 1052.45,1423.09 1071.56,1418.97 1090.67,1414.18 1109.79,1409.38 1128.9,1401.33 1148.01,1393.4 1167.13,1382.02 1186.24,1372.43 1205.36,1353.62 1224.47,1339.11 1243.58,1326.69 1262.7,1311.26 1281.81,1296.93 1300.92,1278.06 1320.04,1259.92 1339.15,1244.61 1358.27,1229.49 1377.38,1220.94 1396.49,1221.56 1415.61,1209.69 1434.72,1199.55 1453.84,1201.02 1472.95,1198.99 1492.06,1202.5 1511.18,1204.53 1530.29,1213.75 1549.4,1220.14 1568.52,1232.13 1587.63,1246.76 1606.75,1251.93 1625.86,1266.87 1644.97,1286.17 1664.09,1298.22 1683.2,1317.04 1702.31,1332.16 1721.43,1346.55 1740.54,1362.1 1759.66,1369.42 1778.77,1379.56 1797.88,1393.03 1817,1401.51 1836.11,1409.93 1855.22,1413.68 1874.34,1422.23 1893.45,1424.75 1912.57,1430.04 1931.68,1432.37 1950.79,1434.16 1969.91,1437.85 1989.02,1438.83 2008.13,1439.32 2027.25,1440.67 2046.36,1441.72 2065.48,1441.72 2084.59,1442.83 2103.7,1443.38 2122.82,1443.75 2141.93,1444.61 2161.04,1444.67 2180.16,1444.67 2199.27,1444.98 2218.39,1445.16 2237.5,1445.22 2256.61,1445.59 2275.73,1445.72 2294.84,1444.92 \"/>\n<polyline clip-path=\"url(#clip722)\" style=\"stroke:#00a98d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"364.35,1445.72 383.464,1445.72 402.578,1445.72 421.691,1445.72 440.805,1445.72 459.919,1445.72 479.033,1445.72 498.147,1445.72 517.26,1445.72 536.374,1445.72 555.488,1445.72 574.602,1445.72 593.715,1445.72 612.829,1445.72 631.943,1445.65 651.057,1445.72 670.17,1445.72 689.284,1445.53 708.398,1445.53 727.512,1445.59 746.626,1445.41 765.739,1445.35 784.853,1445.53 803.967,1445.29 823.081,1444.98 842.194,1444.49 861.308,1443.13 880.422,1443.56 899.536,1442.7 918.65,1441.72 937.763,1440.55 956.877,1438.28 975.991,1437.85 995.105,1436.12 1014.22,1435.76 1033.33,1433.54 1052.45,1431.39 1071.56,1429.18 1090.67,1422.78 1109.79,1418.54 1128.9,1414.54 1148.01,1405.32 1167.13,1404.65 1186.24,1392.1 1205.36,1384.36 1224.47,1369.42 1243.58,1362.47 1262.7,1344.83 1281.81,1326.69 1300.92,1320.91 1320.04,1305.97 1339.15,1287.83 1358.27,1277.38 1377.38,1258.51 1396.49,1238.65 1415.61,1219.71 1434.72,1225.06 1453.84,1210.68 1472.95,1211.29 1492.06,1197.09 1511.18,1202.07 1530.29,1209.26 1549.4,1206.37 1568.52,1209.69 1587.63,1224.02 1606.75,1228.57 1625.86,1242.95 1644.97,1252.6 1664.09,1266.19 1683.2,1283.65 1702.31,1299.45 1721.43,1318.76 1740.54,1330.87 1759.66,1343.47 1778.77,1352.27 1797.88,1366.96 1817,1375.2 1836.11,1385.1 1855.22,1393.7 1874.34,1400.65 1893.45,1406.92 1912.57,1416.02 1931.68,1419.03 1950.79,1422.72 1969.91,1425.98 1989.02,1430.9 2008.13,1432.44 2027.25,1435.39 2046.36,1436.68 2065.48,1438.95 2084.59,1439.57 2103.7,1440.12 2122.82,1441.9 2141.93,1442.4 2161.04,1443.69 2180.16,1443.87 2199.27,1444.12 2218.39,1444.92 2237.5,1445.16 2256.61,1445.16 2275.73,1445.72 2294.84,1444.12 \"/>\n<path clip-path=\"url(#clip720)\" d=\"M1995.61 1443.06 L2284.55 1443.06 L2284.55 95.2176 L1995.61 95.2176  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip720)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1995.61,1443.06 2284.55,1443.06 2284.55,95.2176 1995.61,95.2176 1995.61,1443.06 \"/>\n<polyline clip-path=\"url(#clip720)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2018.34,147.058 2154.77,147.058 \"/>\n<path clip-path=\"url(#clip720)\" d=\"M2191.35 166.745 Q2189.54 171.375 2187.83 172.787 Q2186.11 174.199 2183.24 174.199 L2179.84 174.199 L2179.84 170.634 L2182.34 170.634 Q2184.1 170.634 2185.07 169.8 Q2186.04 168.967 2187.23 165.865 L2187.99 163.921 L2177.5 138.412 L2182.02 138.412 L2190.12 158.689 L2198.22 138.412 L2202.73 138.412 L2191.35 166.745 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip720)\" d=\"M2210.03 160.402 L2217.67 160.402 L2217.67 134.037 L2209.35 135.703 L2209.35 131.444 L2217.62 129.778 L2222.29 129.778 L2222.29 160.402 L2229.93 160.402 L2229.93 164.338 L2210.03 164.338 L2210.03 160.402 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip720)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2018.34,198.898 2154.77,198.898 \"/>\n<path clip-path=\"url(#clip720)\" d=\"M2191.35 218.585 Q2189.54 223.215 2187.83 224.627 Q2186.11 226.039 2183.24 226.039 L2179.84 226.039 L2179.84 222.474 L2182.34 222.474 Q2184.1 222.474 2185.07 221.64 Q2186.04 220.807 2187.23 217.705 L2187.99 215.761 L2177.5 190.252 L2182.02 190.252 L2190.12 210.529 L2198.22 190.252 L2202.73 190.252 L2191.35 218.585 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip720)\" d=\"M2213.24 212.242 L2229.56 212.242 L2229.56 216.178 L2207.62 216.178 L2207.62 212.242 Q2210.28 209.488 2214.86 204.858 Q2219.47 200.205 2220.65 198.863 Q2222.9 196.34 2223.78 194.604 Q2224.68 192.844 2224.68 191.155 Q2224.68 188.4 2222.73 186.664 Q2220.81 184.928 2217.71 184.928 Q2215.51 184.928 2213.06 185.692 Q2210.63 186.455 2207.85 188.006 L2207.85 183.284 Q2210.67 182.15 2213.13 181.571 Q2215.58 180.993 2217.62 180.993 Q2222.99 180.993 2226.18 183.678 Q2229.38 186.363 2229.38 190.854 Q2229.38 192.983 2228.57 194.905 Q2227.78 196.803 2225.67 199.395 Q2225.1 200.067 2221.99 203.284 Q2218.89 206.479 2213.24 212.242 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip720)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2018.34,250.738 2154.77,250.738 \"/>\n<path clip-path=\"url(#clip720)\" d=\"M2191.35 270.425 Q2189.54 275.055 2187.83 276.467 Q2186.11 277.879 2183.24 277.879 L2179.84 277.879 L2179.84 274.314 L2182.34 274.314 Q2184.1 274.314 2185.07 273.48 Q2186.04 272.647 2187.23 269.545 L2187.99 267.601 L2177.5 242.092 L2182.02 242.092 L2190.12 262.369 L2198.22 242.092 L2202.73 242.092 L2191.35 270.425 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip720)\" d=\"M2223.38 249.383 Q2226.74 250.101 2228.61 252.369 Q2230.51 254.638 2230.51 257.971 Q2230.51 263.087 2226.99 265.888 Q2223.48 268.689 2216.99 268.689 Q2214.82 268.689 2212.5 268.249 Q2210.21 267.832 2207.76 266.976 L2207.76 262.462 Q2209.7 263.596 2212.02 264.175 Q2214.33 264.754 2216.85 264.754 Q2221.25 264.754 2223.54 263.018 Q2225.86 261.281 2225.86 257.971 Q2225.86 254.916 2223.71 253.203 Q2221.58 251.467 2217.76 251.467 L2213.73 251.467 L2213.73 247.624 L2217.94 247.624 Q2221.39 247.624 2223.22 246.258 Q2225.05 244.87 2225.05 242.277 Q2225.05 239.615 2223.15 238.203 Q2221.28 236.768 2217.76 236.768 Q2215.84 236.768 2213.64 237.184 Q2211.44 237.601 2208.8 238.481 L2208.8 234.314 Q2211.46 233.573 2213.78 233.203 Q2216.11 232.833 2218.17 232.833 Q2223.5 232.833 2226.6 235.263 Q2229.7 237.67 2229.7 241.791 Q2229.7 244.661 2228.06 246.652 Q2226.41 248.62 2223.38 249.383 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip720)\" style=\"stroke:#c271d2; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2018.34,302.578 2154.77,302.578 \"/>\n<path clip-path=\"url(#clip720)\" d=\"M2191.35 322.265 Q2189.54 326.895 2187.83 328.307 Q2186.11 329.719 2183.24 329.719 L2179.84 329.719 L2179.84 326.154 L2182.34 326.154 Q2184.1 326.154 2185.07 325.32 Q2186.04 324.487 2187.23 321.385 L2187.99 319.441 L2177.5 293.932 L2182.02 293.932 L2190.12 314.209 L2198.22 293.932 L2202.73 293.932 L2191.35 322.265 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip720)\" d=\"M2222.06 289.372 L2210.26 307.821 L2222.06 307.821 L2222.06 289.372 M2220.84 285.298 L2226.72 285.298 L2226.72 307.821 L2231.65 307.821 L2231.65 311.709 L2226.72 311.709 L2226.72 319.858 L2222.06 319.858 L2222.06 311.709 L2206.46 311.709 L2206.46 307.196 L2220.84 285.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip720)\" style=\"stroke:#ac8d18; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2018.34,354.418 2154.77,354.418 \"/>\n<path clip-path=\"url(#clip720)\" d=\"M2191.35 374.105 Q2189.54 378.735 2187.83 380.147 Q2186.11 381.559 2183.24 381.559 L2179.84 381.559 L2179.84 377.994 L2182.34 377.994 Q2184.1 377.994 2185.07 377.16 Q2186.04 376.327 2187.23 373.225 L2187.99 371.281 L2177.5 345.772 L2182.02 345.772 L2190.12 366.049 L2198.22 345.772 L2202.73 345.772 L2191.35 374.105 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip720)\" d=\"M2209.26 337.138 L2227.62 337.138 L2227.62 341.073 L2213.54 341.073 L2213.54 349.545 Q2214.56 349.198 2215.58 349.036 Q2216.6 348.85 2217.62 348.85 Q2223.41 348.85 2226.79 352.022 Q2230.16 355.193 2230.16 360.61 Q2230.16 366.188 2226.69 369.29 Q2223.22 372.369 2216.9 372.369 Q2214.73 372.369 2212.46 371.998 Q2210.21 371.628 2207.8 370.887 L2207.8 366.188 Q2209.89 367.323 2212.11 367.878 Q2214.33 368.434 2216.81 368.434 Q2220.81 368.434 2223.15 366.327 Q2225.49 364.221 2225.49 360.61 Q2225.49 356.999 2223.15 354.892 Q2220.81 352.786 2216.81 352.786 Q2214.93 352.786 2213.06 353.202 Q2211.21 353.619 2209.26 354.499 L2209.26 337.138 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip720)\" style=\"stroke:#00a9ad; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2018.34,406.258 2154.77,406.258 \"/>\n<path clip-path=\"url(#clip720)\" d=\"M2191.35 425.945 Q2189.54 430.575 2187.83 431.987 Q2186.11 433.399 2183.24 433.399 L2179.84 433.399 L2179.84 429.834 L2182.34 429.834 Q2184.1 429.834 2185.07 429 Q2186.04 428.167 2187.23 425.065 L2187.99 423.121 L2177.5 397.612 L2182.02 397.612 L2190.12 417.889 L2198.22 397.612 L2202.73 397.612 L2191.35 425.945 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip720)\" d=\"M2219.79 404.394 Q2216.65 404.394 2214.79 406.547 Q2212.97 408.7 2212.97 412.45 Q2212.97 416.176 2214.79 418.352 Q2216.65 420.505 2219.79 420.505 Q2222.94 420.505 2224.77 418.352 Q2226.62 416.176 2226.62 412.45 Q2226.62 408.7 2224.77 406.547 Q2222.94 404.394 2219.79 404.394 M2229.08 389.741 L2229.08 394.001 Q2227.32 393.167 2225.51 392.728 Q2223.73 392.288 2221.97 392.288 Q2217.34 392.288 2214.89 395.413 Q2212.46 398.538 2212.11 404.857 Q2213.48 402.843 2215.54 401.778 Q2217.6 400.69 2220.07 400.69 Q2225.28 400.69 2228.29 403.862 Q2231.32 407.01 2231.32 412.45 Q2231.32 417.774 2228.17 420.991 Q2225.03 424.209 2219.79 424.209 Q2213.8 424.209 2210.63 419.626 Q2207.46 415.019 2207.46 406.292 Q2207.46 398.098 2211.35 393.237 Q2215.23 388.353 2221.79 388.353 Q2223.54 388.353 2225.33 388.7 Q2227.13 389.047 2229.08 389.741 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip720)\" style=\"stroke:#ed5d92; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2018.34,458.098 2154.77,458.098 \"/>\n<path clip-path=\"url(#clip720)\" d=\"M2191.35 477.785 Q2189.54 482.415 2187.83 483.827 Q2186.11 485.239 2183.24 485.239 L2179.84 485.239 L2179.84 481.674 L2182.34 481.674 Q2184.1 481.674 2185.07 480.84 Q2186.04 480.007 2187.23 476.905 L2187.99 474.961 L2177.5 449.452 L2182.02 449.452 L2190.12 469.729 L2198.22 449.452 L2202.73 449.452 L2191.35 477.785 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip720)\" d=\"M2208.04 440.818 L2230.26 440.818 L2230.26 442.808 L2217.71 475.378 L2212.83 475.378 L2224.63 444.753 L2208.04 444.753 L2208.04 440.818 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip720)\" style=\"stroke:#c68125; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2018.34,509.938 2154.77,509.938 \"/>\n<path clip-path=\"url(#clip720)\" d=\"M2191.35 529.625 Q2189.54 534.255 2187.83 535.667 Q2186.11 537.079 2183.24 537.079 L2179.84 537.079 L2179.84 533.514 L2182.34 533.514 Q2184.1 533.514 2185.07 532.68 Q2186.04 531.847 2187.23 528.745 L2187.99 526.801 L2177.5 501.292 L2182.02 501.292 L2190.12 521.569 L2198.22 501.292 L2202.73 501.292 L2191.35 529.625 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip720)\" d=\"M2219.22 510.806 Q2215.88 510.806 2213.96 512.588 Q2212.06 514.37 2212.06 517.495 Q2212.06 520.62 2213.96 522.403 Q2215.88 524.185 2219.22 524.185 Q2222.55 524.185 2224.47 522.403 Q2226.39 520.597 2226.39 517.495 Q2226.39 514.37 2224.47 512.588 Q2222.57 510.806 2219.22 510.806 M2214.54 508.815 Q2211.53 508.074 2209.84 506.014 Q2208.17 503.954 2208.17 500.991 Q2208.17 496.847 2211.11 494.44 Q2214.08 492.033 2219.22 492.033 Q2224.38 492.033 2227.32 494.44 Q2230.26 496.847 2230.26 500.991 Q2230.26 503.954 2228.57 506.014 Q2226.9 508.074 2223.92 508.815 Q2227.29 509.602 2229.17 511.894 Q2231.07 514.185 2231.07 517.495 Q2231.07 522.519 2227.99 525.204 Q2224.93 527.889 2219.22 527.889 Q2213.5 527.889 2210.42 525.204 Q2207.36 522.519 2207.36 517.495 Q2207.36 514.185 2209.26 511.894 Q2211.16 509.602 2214.54 508.815 M2212.83 501.431 Q2212.83 504.116 2214.49 505.62 Q2216.18 507.125 2219.22 507.125 Q2222.23 507.125 2223.92 505.62 Q2225.63 504.116 2225.63 501.431 Q2225.63 498.745 2223.92 497.241 Q2222.23 495.736 2219.22 495.736 Q2216.18 495.736 2214.49 497.241 Q2212.83 498.745 2212.83 501.431 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip720)\" style=\"stroke:#00a98d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2018.34,561.778 2154.77,561.778 \"/>\n<path clip-path=\"url(#clip720)\" d=\"M2191.35 581.465 Q2189.54 586.095 2187.83 587.507 Q2186.11 588.919 2183.24 588.919 L2179.84 588.919 L2179.84 585.354 L2182.34 585.354 Q2184.1 585.354 2185.07 584.52 Q2186.04 583.687 2187.23 580.585 L2187.99 578.641 L2177.5 553.132 L2182.02 553.132 L2190.12 573.409 L2198.22 553.132 L2202.73 553.132 L2191.35 581.465 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip720)\" d=\"M2209.35 578.34 L2209.35 574.081 Q2211.11 574.914 2212.92 575.354 Q2214.73 575.794 2216.46 575.794 Q2221.09 575.794 2223.52 572.692 Q2225.98 569.567 2226.32 563.224 Q2224.98 565.215 2222.92 566.28 Q2220.86 567.345 2218.36 567.345 Q2213.17 567.345 2210.14 564.22 Q2207.13 561.072 2207.13 555.632 Q2207.13 550.308 2210.28 547.09 Q2213.43 543.873 2218.66 543.873 Q2224.66 543.873 2227.8 548.479 Q2230.98 553.062 2230.98 561.812 Q2230.98 569.984 2227.09 574.868 Q2223.22 579.729 2216.67 579.729 Q2214.91 579.729 2213.1 579.382 Q2211.3 579.034 2209.35 578.34 M2218.66 563.687 Q2221.81 563.687 2223.64 561.534 Q2225.49 559.382 2225.49 555.632 Q2225.49 551.905 2223.64 549.752 Q2221.81 547.576 2218.66 547.576 Q2215.51 547.576 2213.66 549.752 Q2211.83 551.905 2211.83 555.632 Q2211.83 559.382 2213.66 561.534 Q2215.51 563.687 2218.66 563.687 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip720)\" style=\"stroke:#8e971d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2018.34,613.618 2154.77,613.618 \"/>\n<path clip-path=\"url(#clip720)\" d=\"M2191.35 633.305 Q2189.54 637.935 2187.83 639.347 Q2186.11 640.759 2183.24 640.759 L2179.84 640.759 L2179.84 637.194 L2182.34 637.194 Q2184.1 637.194 2185.07 636.36 Q2186.04 635.527 2187.23 632.425 L2187.99 630.481 L2177.5 604.972 L2182.02 604.972 L2190.12 625.249 L2198.22 604.972 L2202.73 604.972 L2191.35 633.305 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip720)\" d=\"M2210.03 626.962 L2217.67 626.962 L2217.67 600.597 L2209.35 602.263 L2209.35 598.004 L2217.62 596.338 L2222.29 596.338 L2222.29 626.962 L2229.93 626.962 L2229.93 630.898 L2210.03 630.898 L2210.03 626.962 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip720)\" d=\"M2249.38 599.416 Q2245.77 599.416 2243.94 602.981 Q2242.13 606.523 2242.13 613.652 Q2242.13 620.759 2243.94 624.324 Q2245.77 627.865 2249.38 627.865 Q2253.01 627.865 2254.82 624.324 Q2256.65 620.759 2256.65 613.652 Q2256.65 606.523 2254.82 602.981 Q2253.01 599.416 2249.38 599.416 M2249.38 595.713 Q2255.19 595.713 2258.24 600.319 Q2261.32 604.902 2261.32 613.652 Q2261.32 622.379 2258.24 626.986 Q2255.19 631.569 2249.38 631.569 Q2243.57 631.569 2240.49 626.986 Q2237.43 622.379 2237.43 613.652 Q2237.43 604.902 2240.49 600.319 Q2243.57 595.713 2249.38 595.713 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip720)\" style=\"stroke:#00a8cb; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2018.34,665.458 2154.77,665.458 \"/>\n<path clip-path=\"url(#clip720)\" d=\"M2191.35 685.145 Q2189.54 689.775 2187.83 691.187 Q2186.11 692.599 2183.24 692.599 L2179.84 692.599 L2179.84 689.034 L2182.34 689.034 Q2184.1 689.034 2185.07 688.2 Q2186.04 687.367 2187.23 684.265 L2187.99 682.321 L2177.5 656.812 L2182.02 656.812 L2190.12 677.089 L2198.22 656.812 L2202.73 656.812 L2191.35 685.145 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip720)\" d=\"M2210.03 678.802 L2217.67 678.802 L2217.67 652.437 L2209.35 654.103 L2209.35 649.844 L2217.62 648.178 L2222.29 648.178 L2222.29 678.802 L2229.93 678.802 L2229.93 682.738 L2210.03 682.738 L2210.03 678.802 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip720)\" d=\"M2240.19 678.802 L2247.83 678.802 L2247.83 652.437 L2239.52 654.103 L2239.52 649.844 L2247.78 648.178 L2252.46 648.178 L2252.46 678.802 L2260.1 678.802 L2260.1 682.738 L2240.19 682.738 L2240.19 678.802 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip720)\" style=\"stroke:#9b7fe8; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2018.34,717.298 2154.77,717.298 \"/>\n<path clip-path=\"url(#clip720)\" d=\"M2191.35 736.985 Q2189.54 741.615 2187.83 743.027 Q2186.11 744.439 2183.24 744.439 L2179.84 744.439 L2179.84 740.874 L2182.34 740.874 Q2184.1 740.874 2185.07 740.04 Q2186.04 739.207 2187.23 736.105 L2187.99 734.161 L2177.5 708.652 L2182.02 708.652 L2190.12 728.929 L2198.22 708.652 L2202.73 708.652 L2191.35 736.985 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip720)\" d=\"M2210.03 730.642 L2217.67 730.642 L2217.67 704.277 L2209.35 705.943 L2209.35 701.684 L2217.62 700.018 L2222.29 700.018 L2222.29 730.642 L2229.93 730.642 L2229.93 734.578 L2210.03 734.578 L2210.03 730.642 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip720)\" d=\"M2243.41 730.642 L2259.73 730.642 L2259.73 734.578 L2237.78 734.578 L2237.78 730.642 Q2240.44 727.888 2245.03 723.258 Q2249.63 718.605 2250.81 717.263 Q2253.06 714.74 2253.94 713.004 Q2254.84 711.244 2254.84 709.555 Q2254.84 706.8 2252.9 705.064 Q2250.98 703.328 2247.87 703.328 Q2245.67 703.328 2243.22 704.092 Q2240.79 704.855 2238.01 706.406 L2238.01 701.684 Q2240.84 700.55 2243.29 699.971 Q2245.74 699.393 2247.78 699.393 Q2253.15 699.393 2256.35 702.078 Q2259.54 704.763 2259.54 709.254 Q2259.54 711.383 2258.73 713.305 Q2257.94 715.203 2255.84 717.795 Q2255.26 718.467 2252.16 721.684 Q2249.05 724.879 2243.41 730.642 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip720)\" style=\"stroke:#608cf6; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2018.34,769.138 2154.77,769.138 \"/>\n<path clip-path=\"url(#clip720)\" d=\"M2191.35 788.825 Q2189.54 793.455 2187.83 794.867 Q2186.11 796.279 2183.24 796.279 L2179.84 796.279 L2179.84 792.714 L2182.34 792.714 Q2184.1 792.714 2185.07 791.88 Q2186.04 791.047 2187.23 787.945 L2187.99 786.001 L2177.5 760.492 L2182.02 760.492 L2190.12 780.769 L2198.22 760.492 L2202.73 760.492 L2191.35 788.825 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip720)\" d=\"M2210.03 782.482 L2217.67 782.482 L2217.67 756.117 L2209.35 757.783 L2209.35 753.524 L2217.62 751.858 L2222.29 751.858 L2222.29 782.482 L2229.93 782.482 L2229.93 786.418 L2210.03 786.418 L2210.03 782.482 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip720)\" d=\"M2253.54 767.783 Q2256.9 768.501 2258.78 770.769 Q2260.67 773.038 2260.67 776.371 Q2260.67 781.487 2257.16 784.288 Q2253.64 787.089 2247.16 787.089 Q2244.98 787.089 2242.66 786.649 Q2240.37 786.232 2237.92 785.376 L2237.92 780.862 Q2239.86 781.996 2242.18 782.575 Q2244.49 783.154 2247.02 783.154 Q2251.41 783.154 2253.71 781.418 Q2256.02 779.681 2256.02 776.371 Q2256.02 773.316 2253.87 771.603 Q2251.74 769.867 2247.92 769.867 L2243.89 769.867 L2243.89 766.024 L2248.1 766.024 Q2251.55 766.024 2253.38 764.658 Q2255.21 763.27 2255.21 760.677 Q2255.21 758.015 2253.31 756.603 Q2251.44 755.168 2247.92 755.168 Q2246 755.168 2243.8 755.584 Q2241.6 756.001 2238.96 756.881 L2238.96 752.714 Q2241.62 751.973 2243.94 751.603 Q2246.28 751.233 2248.34 751.233 Q2253.66 751.233 2256.76 753.663 Q2259.86 756.07 2259.86 760.191 Q2259.86 763.061 2258.22 765.052 Q2256.58 767.02 2253.54 767.783 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip720)\" style=\"stroke:#f05f73; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2018.34,820.978 2154.77,820.978 \"/>\n<path clip-path=\"url(#clip720)\" d=\"M2191.35 840.665 Q2189.54 845.295 2187.83 846.707 Q2186.11 848.119 2183.24 848.119 L2179.84 848.119 L2179.84 844.554 L2182.34 844.554 Q2184.1 844.554 2185.07 843.72 Q2186.04 842.887 2187.23 839.785 L2187.99 837.841 L2177.5 812.332 L2182.02 812.332 L2190.12 832.609 L2198.22 812.332 L2202.73 812.332 L2191.35 840.665 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip720)\" d=\"M2210.03 834.322 L2217.67 834.322 L2217.67 807.957 L2209.35 809.623 L2209.35 805.364 L2217.62 803.698 L2222.29 803.698 L2222.29 834.322 L2229.93 834.322 L2229.93 838.258 L2210.03 838.258 L2210.03 834.322 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip720)\" d=\"M2252.23 807.772 L2240.42 826.221 L2252.23 826.221 L2252.23 807.772 M2251 803.698 L2256.88 803.698 L2256.88 826.221 L2261.81 826.221 L2261.81 830.109 L2256.88 830.109 L2256.88 838.258 L2252.23 838.258 L2252.23 830.109 L2236.62 830.109 L2236.62 825.596 L2251 803.698 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip720)\" style=\"stroke:#dd64b5; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2018.34,872.818 2154.77,872.818 \"/>\n<path clip-path=\"url(#clip720)\" d=\"M2191.35 892.505 Q2189.54 897.135 2187.83 898.547 Q2186.11 899.959 2183.24 899.959 L2179.84 899.959 L2179.84 896.394 L2182.34 896.394 Q2184.1 896.394 2185.07 895.56 Q2186.04 894.727 2187.23 891.625 L2187.99 889.681 L2177.5 864.172 L2182.02 864.172 L2190.12 884.449 L2198.22 864.172 L2202.73 864.172 L2191.35 892.505 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip720)\" d=\"M2210.03 886.162 L2217.67 886.162 L2217.67 859.797 L2209.35 861.463 L2209.35 857.204 L2217.62 855.538 L2222.29 855.538 L2222.29 886.162 L2229.93 886.162 L2229.93 890.098 L2210.03 890.098 L2210.03 886.162 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip720)\" d=\"M2239.42 855.538 L2257.78 855.538 L2257.78 859.473 L2243.71 859.473 L2243.71 867.945 Q2244.73 867.598 2245.74 867.436 Q2246.76 867.25 2247.78 867.25 Q2253.57 867.25 2256.95 870.422 Q2260.33 873.593 2260.33 879.01 Q2260.33 884.588 2256.85 887.69 Q2253.38 890.769 2247.06 890.769 Q2244.89 890.769 2242.62 890.398 Q2240.37 890.028 2237.97 889.287 L2237.97 884.588 Q2240.05 885.723 2242.27 886.278 Q2244.49 886.834 2246.97 886.834 Q2250.98 886.834 2253.31 884.727 Q2255.65 882.621 2255.65 879.01 Q2255.65 875.399 2253.31 873.292 Q2250.98 871.186 2246.97 871.186 Q2245.1 871.186 2243.22 871.602 Q2241.37 872.019 2239.42 872.899 L2239.42 855.538 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip720)\" style=\"stroke:#6b9e32; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2018.34,924.658 2154.77,924.658 \"/>\n<path clip-path=\"url(#clip720)\" d=\"M2191.35 944.345 Q2189.54 948.975 2187.83 950.387 Q2186.11 951.799 2183.24 951.799 L2179.84 951.799 L2179.84 948.234 L2182.34 948.234 Q2184.1 948.234 2185.07 947.4 Q2186.04 946.567 2187.23 943.465 L2187.99 941.521 L2177.5 916.012 L2182.02 916.012 L2190.12 936.289 L2198.22 916.012 L2202.73 916.012 L2191.35 944.345 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip720)\" d=\"M2210.03 938.002 L2217.67 938.002 L2217.67 911.637 L2209.35 913.303 L2209.35 909.044 L2217.62 907.378 L2222.29 907.378 L2222.29 938.002 L2229.93 938.002 L2229.93 941.938 L2210.03 941.938 L2210.03 938.002 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip720)\" d=\"M2249.96 922.794 Q2246.81 922.794 2244.96 924.947 Q2243.13 927.1 2243.13 930.85 Q2243.13 934.576 2244.96 936.752 Q2246.81 938.905 2249.96 938.905 Q2253.1 938.905 2254.93 936.752 Q2256.79 934.576 2256.79 930.85 Q2256.79 927.1 2254.93 924.947 Q2253.1 922.794 2249.96 922.794 M2259.24 908.141 L2259.24 912.401 Q2257.48 911.567 2255.67 911.128 Q2253.89 910.688 2252.13 910.688 Q2247.5 910.688 2245.05 913.813 Q2242.62 916.938 2242.27 923.257 Q2243.64 921.243 2245.7 920.178 Q2247.76 919.09 2250.23 919.09 Q2255.44 919.09 2258.45 922.262 Q2261.48 925.41 2261.48 930.85 Q2261.48 936.174 2258.34 939.391 Q2255.19 942.609 2249.96 942.609 Q2243.96 942.609 2240.79 938.026 Q2237.62 933.419 2237.62 924.692 Q2237.62 916.498 2241.51 911.637 Q2245.4 906.753 2251.95 906.753 Q2253.71 906.753 2255.49 907.1 Q2257.29 907.447 2259.24 908.141 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip720)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2018.34,976.498 2154.77,976.498 \"/>\n<path clip-path=\"url(#clip720)\" d=\"M2191.35 996.185 Q2189.54 1000.81 2187.83 1002.23 Q2186.11 1003.64 2183.24 1003.64 L2179.84 1003.64 L2179.84 1000.07 L2182.34 1000.07 Q2184.1 1000.07 2185.07 999.24 Q2186.04 998.407 2187.23 995.305 L2187.99 993.361 L2177.5 967.852 L2182.02 967.852 L2190.12 988.129 L2198.22 967.852 L2202.73 967.852 L2191.35 996.185 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip720)\" d=\"M2210.03 989.842 L2217.67 989.842 L2217.67 963.477 L2209.35 965.143 L2209.35 960.884 L2217.62 959.218 L2222.29 959.218 L2222.29 989.842 L2229.93 989.842 L2229.93 993.778 L2210.03 993.778 L2210.03 989.842 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip720)\" d=\"M2238.2 959.218 L2260.42 959.218 L2260.42 961.208 L2247.87 993.778 L2242.99 993.778 L2254.79 963.153 L2238.2 963.153 L2238.2 959.218 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip720)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2018.34,1028.34 2154.77,1028.34 \"/>\n<path clip-path=\"url(#clip720)\" d=\"M2191.35 1048.02 Q2189.54 1052.65 2187.83 1054.07 Q2186.11 1055.48 2183.24 1055.48 L2179.84 1055.48 L2179.84 1051.91 L2182.34 1051.91 Q2184.1 1051.91 2185.07 1051.08 Q2186.04 1050.25 2187.23 1047.15 L2187.99 1045.2 L2177.5 1019.69 L2182.02 1019.69 L2190.12 1039.97 L2198.22 1019.69 L2202.73 1019.69 L2191.35 1048.02 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip720)\" d=\"M2210.03 1041.68 L2217.67 1041.68 L2217.67 1015.32 L2209.35 1016.98 L2209.35 1012.72 L2217.62 1011.06 L2222.29 1011.06 L2222.29 1041.68 L2229.93 1041.68 L2229.93 1045.62 L2210.03 1045.62 L2210.03 1041.68 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip720)\" d=\"M2249.38 1029.21 Q2246.04 1029.21 2244.12 1030.99 Q2242.23 1032.77 2242.23 1035.9 Q2242.23 1039.02 2244.12 1040.8 Q2246.04 1042.59 2249.38 1042.59 Q2252.71 1042.59 2254.63 1040.8 Q2256.55 1039 2256.55 1035.9 Q2256.55 1032.77 2254.63 1030.99 Q2252.73 1029.21 2249.38 1029.21 M2244.7 1027.21 Q2241.69 1026.47 2240 1024.41 Q2238.34 1022.35 2238.34 1019.39 Q2238.34 1015.25 2241.28 1012.84 Q2244.24 1010.43 2249.38 1010.43 Q2254.54 1010.43 2257.48 1012.84 Q2260.42 1015.25 2260.42 1019.39 Q2260.42 1022.35 2258.73 1024.41 Q2257.06 1026.47 2254.08 1027.21 Q2257.46 1028 2259.33 1030.29 Q2261.23 1032.59 2261.23 1035.9 Q2261.23 1040.92 2258.15 1043.6 Q2255.1 1046.29 2249.38 1046.29 Q2243.66 1046.29 2240.58 1043.6 Q2237.53 1040.92 2237.53 1035.9 Q2237.53 1032.59 2239.42 1030.29 Q2241.32 1028 2244.7 1027.21 M2242.99 1019.83 Q2242.99 1022.52 2244.66 1024.02 Q2246.35 1025.53 2249.38 1025.53 Q2252.39 1025.53 2254.08 1024.02 Q2255.79 1022.52 2255.79 1019.83 Q2255.79 1017.15 2254.08 1015.64 Q2252.39 1014.14 2249.38 1014.14 Q2246.35 1014.14 2244.66 1015.64 Q2242.99 1017.15 2242.99 1019.83 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip720)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2018.34,1080.18 2154.77,1080.18 \"/>\n<path clip-path=\"url(#clip720)\" d=\"M2191.35 1099.86 Q2189.54 1104.49 2187.83 1105.91 Q2186.11 1107.32 2183.24 1107.32 L2179.84 1107.32 L2179.84 1103.75 L2182.34 1103.75 Q2184.1 1103.75 2185.07 1102.92 Q2186.04 1102.09 2187.23 1098.99 L2187.99 1097.04 L2177.5 1071.53 L2182.02 1071.53 L2190.12 1091.81 L2198.22 1071.53 L2202.73 1071.53 L2191.35 1099.86 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip720)\" d=\"M2210.03 1093.52 L2217.67 1093.52 L2217.67 1067.16 L2209.35 1068.82 L2209.35 1064.56 L2217.62 1062.9 L2222.29 1062.9 L2222.29 1093.52 L2229.93 1093.52 L2229.93 1097.46 L2210.03 1097.46 L2210.03 1093.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip720)\" d=\"M2239.52 1096.74 L2239.52 1092.48 Q2241.28 1093.31 2243.08 1093.75 Q2244.89 1094.19 2246.62 1094.19 Q2251.25 1094.19 2253.68 1091.09 Q2256.14 1087.97 2256.48 1081.62 Q2255.14 1083.62 2253.08 1084.68 Q2251.02 1085.74 2248.52 1085.74 Q2243.34 1085.74 2240.3 1082.62 Q2237.29 1079.47 2237.29 1074.03 Q2237.29 1068.71 2240.44 1065.49 Q2243.59 1062.27 2248.82 1062.27 Q2254.82 1062.27 2257.97 1066.88 Q2261.14 1071.46 2261.14 1080.21 Q2261.14 1088.38 2257.25 1093.27 Q2253.38 1098.13 2246.83 1098.13 Q2245.07 1098.13 2243.27 1097.78 Q2241.46 1097.43 2239.52 1096.74 M2248.82 1082.09 Q2251.97 1082.09 2253.8 1079.93 Q2255.65 1077.78 2255.65 1074.03 Q2255.65 1070.3 2253.8 1068.15 Q2251.97 1065.98 2248.82 1065.98 Q2245.67 1065.98 2243.82 1068.15 Q2241.99 1070.3 2241.99 1074.03 Q2241.99 1077.78 2243.82 1079.93 Q2245.67 1082.09 2248.82 1082.09 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip720)\" style=\"stroke:#c271d2; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2018.34,1132.02 2154.77,1132.02 \"/>\n<path clip-path=\"url(#clip720)\" d=\"M2191.35 1151.7 Q2189.54 1156.33 2187.83 1157.75 Q2186.11 1159.16 2183.24 1159.16 L2179.84 1159.16 L2179.84 1155.59 L2182.34 1155.59 Q2184.1 1155.59 2185.07 1154.76 Q2186.04 1153.93 2187.23 1150.83 L2187.99 1148.88 L2177.5 1123.37 L2182.02 1123.37 L2190.12 1143.65 L2198.22 1123.37 L2202.73 1123.37 L2191.35 1151.7 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip720)\" d=\"M2213.24 1145.36 L2229.56 1145.36 L2229.56 1149.3 L2207.62 1149.3 L2207.62 1145.36 Q2210.28 1142.61 2214.86 1137.98 Q2219.47 1133.33 2220.65 1131.98 Q2222.9 1129.46 2223.78 1127.72 Q2224.68 1125.96 2224.68 1124.27 Q2224.68 1121.52 2222.73 1119.78 Q2220.81 1118.05 2217.71 1118.05 Q2215.51 1118.05 2213.06 1118.81 Q2210.63 1119.58 2207.85 1121.13 L2207.85 1116.4 Q2210.67 1115.27 2213.13 1114.69 Q2215.58 1114.11 2217.62 1114.11 Q2222.99 1114.11 2226.18 1116.8 Q2229.38 1119.48 2229.38 1123.97 Q2229.38 1126.1 2228.57 1128.02 Q2227.78 1129.92 2225.67 1132.52 Q2225.1 1133.19 2221.99 1136.4 Q2218.89 1139.6 2213.24 1145.36 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip720)\" d=\"M2249.38 1117.82 Q2245.77 1117.82 2243.94 1121.38 Q2242.13 1124.92 2242.13 1132.05 Q2242.13 1139.16 2243.94 1142.72 Q2245.77 1146.27 2249.38 1146.27 Q2253.01 1146.27 2254.82 1142.72 Q2256.65 1139.16 2256.65 1132.05 Q2256.65 1124.92 2254.82 1121.38 Q2253.01 1117.82 2249.38 1117.82 M2249.38 1114.11 Q2255.19 1114.11 2258.24 1118.72 Q2261.32 1123.3 2261.32 1132.05 Q2261.32 1140.78 2258.24 1145.39 Q2255.19 1149.97 2249.38 1149.97 Q2243.57 1149.97 2240.49 1145.39 Q2237.43 1140.78 2237.43 1132.05 Q2237.43 1123.3 2240.49 1118.72 Q2243.57 1114.11 2249.38 1114.11 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip720)\" style=\"stroke:#ac8d18; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2018.34,1183.86 2154.77,1183.86 \"/>\n<path clip-path=\"url(#clip720)\" d=\"M2191.35 1203.54 Q2189.54 1208.17 2187.83 1209.59 Q2186.11 1211 2183.24 1211 L2179.84 1211 L2179.84 1207.43 L2182.34 1207.43 Q2184.1 1207.43 2185.07 1206.6 Q2186.04 1205.77 2187.23 1202.67 L2187.99 1200.72 L2177.5 1175.21 L2182.02 1175.21 L2190.12 1195.49 L2198.22 1175.21 L2202.73 1175.21 L2191.35 1203.54 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip720)\" d=\"M2213.24 1197.2 L2229.56 1197.2 L2229.56 1201.14 L2207.62 1201.14 L2207.62 1197.2 Q2210.28 1194.45 2214.86 1189.82 Q2219.47 1185.17 2220.65 1183.82 Q2222.9 1181.3 2223.78 1179.56 Q2224.68 1177.8 2224.68 1176.11 Q2224.68 1173.36 2222.73 1171.62 Q2220.81 1169.89 2217.71 1169.89 Q2215.51 1169.89 2213.06 1170.65 Q2210.63 1171.42 2207.85 1172.97 L2207.85 1168.24 Q2210.67 1167.11 2213.13 1166.53 Q2215.58 1165.95 2217.62 1165.95 Q2222.99 1165.95 2226.18 1168.64 Q2229.38 1171.32 2229.38 1175.81 Q2229.38 1177.94 2228.57 1179.86 Q2227.78 1181.76 2225.67 1184.36 Q2225.1 1185.03 2221.99 1188.24 Q2218.89 1191.44 2213.24 1197.2 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip720)\" d=\"M2240.19 1197.2 L2247.83 1197.2 L2247.83 1170.84 L2239.52 1172.5 L2239.52 1168.24 L2247.78 1166.58 L2252.46 1166.58 L2252.46 1197.2 L2260.1 1197.2 L2260.1 1201.14 L2240.19 1201.14 L2240.19 1197.2 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip720)\" style=\"stroke:#00a9ad; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2018.34,1235.7 2154.77,1235.7 \"/>\n<path clip-path=\"url(#clip720)\" d=\"M2191.35 1255.38 Q2189.54 1260.01 2187.83 1261.43 Q2186.11 1262.84 2183.24 1262.84 L2179.84 1262.84 L2179.84 1259.27 L2182.34 1259.27 Q2184.1 1259.27 2185.07 1258.44 Q2186.04 1257.61 2187.23 1254.51 L2187.99 1252.56 L2177.5 1227.05 L2182.02 1227.05 L2190.12 1247.33 L2198.22 1227.05 L2202.73 1227.05 L2191.35 1255.38 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip720)\" d=\"M2213.24 1249.04 L2229.56 1249.04 L2229.56 1252.98 L2207.62 1252.98 L2207.62 1249.04 Q2210.28 1246.29 2214.86 1241.66 Q2219.47 1237.01 2220.65 1235.66 Q2222.9 1233.14 2223.78 1231.4 Q2224.68 1229.64 2224.68 1227.95 Q2224.68 1225.2 2222.73 1223.46 Q2220.81 1221.73 2217.71 1221.73 Q2215.51 1221.73 2213.06 1222.49 Q2210.63 1223.26 2207.85 1224.81 L2207.85 1220.08 Q2210.67 1218.95 2213.13 1218.37 Q2215.58 1217.79 2217.62 1217.79 Q2222.99 1217.79 2226.18 1220.48 Q2229.38 1223.16 2229.38 1227.65 Q2229.38 1229.78 2228.57 1231.7 Q2227.78 1233.6 2225.67 1236.2 Q2225.1 1236.87 2221.99 1240.08 Q2218.89 1243.28 2213.24 1249.04 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip720)\" d=\"M2243.41 1249.04 L2259.73 1249.04 L2259.73 1252.98 L2237.78 1252.98 L2237.78 1249.04 Q2240.44 1246.29 2245.03 1241.66 Q2249.63 1237.01 2250.81 1235.66 Q2253.06 1233.14 2253.94 1231.4 Q2254.84 1229.64 2254.84 1227.95 Q2254.84 1225.2 2252.9 1223.46 Q2250.98 1221.73 2247.87 1221.73 Q2245.67 1221.73 2243.22 1222.49 Q2240.79 1223.26 2238.01 1224.81 L2238.01 1220.08 Q2240.84 1218.95 2243.29 1218.37 Q2245.74 1217.79 2247.78 1217.79 Q2253.15 1217.79 2256.35 1220.48 Q2259.54 1223.16 2259.54 1227.65 Q2259.54 1229.78 2258.73 1231.7 Q2257.94 1233.6 2255.84 1236.2 Q2255.26 1236.87 2252.16 1240.08 Q2249.05 1243.28 2243.41 1249.04 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip720)\" style=\"stroke:#ed5d92; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2018.34,1287.54 2154.77,1287.54 \"/>\n<path clip-path=\"url(#clip720)\" d=\"M2191.35 1307.22 Q2189.54 1311.85 2187.83 1313.27 Q2186.11 1314.68 2183.24 1314.68 L2179.84 1314.68 L2179.84 1311.11 L2182.34 1311.11 Q2184.1 1311.11 2185.07 1310.28 Q2186.04 1309.45 2187.23 1306.35 L2187.99 1304.4 L2177.5 1278.89 L2182.02 1278.89 L2190.12 1299.17 L2198.22 1278.89 L2202.73 1278.89 L2191.35 1307.22 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip720)\" d=\"M2213.24 1300.88 L2229.56 1300.88 L2229.56 1304.82 L2207.62 1304.82 L2207.62 1300.88 Q2210.28 1298.13 2214.86 1293.5 Q2219.47 1288.85 2220.65 1287.5 Q2222.9 1284.98 2223.78 1283.24 Q2224.68 1281.48 2224.68 1279.79 Q2224.68 1277.04 2222.73 1275.3 Q2220.81 1273.57 2217.71 1273.57 Q2215.51 1273.57 2213.06 1274.33 Q2210.63 1275.1 2207.85 1276.65 L2207.85 1271.92 Q2210.67 1270.79 2213.13 1270.21 Q2215.58 1269.63 2217.62 1269.63 Q2222.99 1269.63 2226.18 1272.32 Q2229.38 1275 2229.38 1279.49 Q2229.38 1281.62 2228.57 1283.54 Q2227.78 1285.44 2225.67 1288.04 Q2225.1 1288.71 2221.99 1291.92 Q2218.89 1295.12 2213.24 1300.88 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip720)\" d=\"M2253.54 1286.18 Q2256.9 1286.9 2258.78 1289.17 Q2260.67 1291.44 2260.67 1294.77 Q2260.67 1299.89 2257.16 1302.69 Q2253.64 1305.49 2247.16 1305.49 Q2244.98 1305.49 2242.66 1305.05 Q2240.37 1304.63 2237.92 1303.78 L2237.92 1299.26 Q2239.86 1300.4 2242.18 1300.97 Q2244.49 1301.55 2247.02 1301.55 Q2251.41 1301.55 2253.71 1299.82 Q2256.02 1298.08 2256.02 1294.77 Q2256.02 1291.72 2253.87 1290 Q2251.74 1288.27 2247.92 1288.27 L2243.89 1288.27 L2243.89 1284.42 L2248.1 1284.42 Q2251.55 1284.42 2253.38 1283.06 Q2255.21 1281.67 2255.21 1279.08 Q2255.21 1276.41 2253.31 1275 Q2251.44 1273.57 2247.92 1273.57 Q2246 1273.57 2243.8 1273.98 Q2241.6 1274.4 2238.96 1275.28 L2238.96 1271.11 Q2241.62 1270.37 2243.94 1270 Q2246.28 1269.63 2248.34 1269.63 Q2253.66 1269.63 2256.76 1272.06 Q2259.86 1274.47 2259.86 1278.59 Q2259.86 1281.46 2258.22 1283.45 Q2256.58 1285.42 2253.54 1286.18 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip720)\" style=\"stroke:#c68125; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2018.34,1339.38 2154.77,1339.38 \"/>\n<path clip-path=\"url(#clip720)\" d=\"M2191.35 1359.06 Q2189.54 1363.69 2187.83 1365.11 Q2186.11 1366.52 2183.24 1366.52 L2179.84 1366.52 L2179.84 1362.95 L2182.34 1362.95 Q2184.1 1362.95 2185.07 1362.12 Q2186.04 1361.29 2187.23 1358.19 L2187.99 1356.24 L2177.5 1330.73 L2182.02 1330.73 L2190.12 1351.01 L2198.22 1330.73 L2202.73 1330.73 L2191.35 1359.06 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip720)\" d=\"M2213.24 1352.72 L2229.56 1352.72 L2229.56 1356.66 L2207.62 1356.66 L2207.62 1352.72 Q2210.28 1349.97 2214.86 1345.34 Q2219.47 1340.69 2220.65 1339.34 Q2222.9 1336.82 2223.78 1335.08 Q2224.68 1333.32 2224.68 1331.63 Q2224.68 1328.88 2222.73 1327.14 Q2220.81 1325.41 2217.71 1325.41 Q2215.51 1325.41 2213.06 1326.17 Q2210.63 1326.94 2207.85 1328.49 L2207.85 1323.76 Q2210.67 1322.63 2213.13 1322.05 Q2215.58 1321.47 2217.62 1321.47 Q2222.99 1321.47 2226.18 1324.16 Q2229.38 1326.84 2229.38 1331.33 Q2229.38 1333.46 2228.57 1335.38 Q2227.78 1337.28 2225.67 1339.88 Q2225.1 1340.55 2221.99 1343.76 Q2218.89 1346.96 2213.24 1352.72 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip720)\" d=\"M2252.23 1326.17 L2240.42 1344.62 L2252.23 1344.62 L2252.23 1326.17 M2251 1322.1 L2256.88 1322.1 L2256.88 1344.62 L2261.81 1344.62 L2261.81 1348.51 L2256.88 1348.51 L2256.88 1356.66 L2252.23 1356.66 L2252.23 1348.51 L2236.62 1348.51 L2236.62 1344 L2251 1322.1 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip720)\" style=\"stroke:#00a98d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2018.34,1391.22 2154.77,1391.22 \"/>\n<path clip-path=\"url(#clip720)\" d=\"M2191.35 1410.9 Q2189.54 1415.53 2187.83 1416.95 Q2186.11 1418.36 2183.24 1418.36 L2179.84 1418.36 L2179.84 1414.79 L2182.34 1414.79 Q2184.1 1414.79 2185.07 1413.96 Q2186.04 1413.13 2187.23 1410.03 L2187.99 1408.08 L2177.5 1382.57 L2182.02 1382.57 L2190.12 1402.85 L2198.22 1382.57 L2202.73 1382.57 L2191.35 1410.9 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip720)\" d=\"M2213.24 1404.56 L2229.56 1404.56 L2229.56 1408.5 L2207.62 1408.5 L2207.62 1404.56 Q2210.28 1401.81 2214.86 1397.18 Q2219.47 1392.53 2220.65 1391.18 Q2222.9 1388.66 2223.78 1386.92 Q2224.68 1385.16 2224.68 1383.47 Q2224.68 1380.72 2222.73 1378.98 Q2220.81 1377.25 2217.71 1377.25 Q2215.51 1377.25 2213.06 1378.01 Q2210.63 1378.78 2207.85 1380.33 L2207.85 1375.6 Q2210.67 1374.47 2213.13 1373.89 Q2215.58 1373.31 2217.62 1373.31 Q2222.99 1373.31 2226.18 1376 Q2229.38 1378.68 2229.38 1383.17 Q2229.38 1385.3 2228.57 1387.22 Q2227.78 1389.12 2225.67 1391.72 Q2225.1 1392.39 2221.99 1395.6 Q2218.89 1398.8 2213.24 1404.56 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip720)\" d=\"M2239.42 1373.94 L2257.78 1373.94 L2257.78 1377.87 L2243.71 1377.87 L2243.71 1386.34 Q2244.73 1386 2245.74 1385.84 Q2246.76 1385.65 2247.78 1385.65 Q2253.57 1385.65 2256.95 1388.82 Q2260.33 1391.99 2260.33 1397.41 Q2260.33 1402.99 2256.85 1406.09 Q2253.38 1409.17 2247.06 1409.17 Q2244.89 1409.17 2242.62 1408.8 Q2240.37 1408.43 2237.97 1407.69 L2237.97 1402.99 Q2240.05 1404.12 2242.27 1404.68 Q2244.49 1405.23 2246.97 1405.23 Q2250.98 1405.23 2253.31 1403.13 Q2255.65 1401.02 2255.65 1397.41 Q2255.65 1393.8 2253.31 1391.69 Q2250.98 1389.59 2246.97 1389.59 Q2245.1 1389.59 2243.22 1390 Q2241.37 1390.42 2239.42 1391.3 L2239.42 1373.94 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /></svg>\n","category":"page"},{"location":"ne13/","page":"ne13.jl","title":"ne13.jl","text":"For post-processing of the data we use the multihistogram method. This method accesses the stored data created from the ptmc_run! method and returns values for the energies, histogram data, temperature, partition function, heat capacity, heat capacity gradient, and entropy, which can be plotted as shown:","category":"page"},{"location":"ne13/","page":"ne13.jl","title":"ne13.jl","text":"energies,histogramdata,T,Z,Cv,dCv,S = postprocess();","category":"page"},{"location":"ne13/","page":"ne13.jl","title":"ne13.jl","text":"Plot of heat capacity against temperature:","category":"page"},{"location":"ne13/","page":"ne13.jl","title":"ne13.jl","text":"plot(T,Cv,label=\"Cv\")","category":"page"},{"location":"ne13/","page":"ne13.jl","title":"ne13.jl","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip750\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip750)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip751\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip750)\" d=\"M276.76 1486.45 L2352.76 1486.45 L2352.76 47.2441 L276.76 47.2441  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip752\">\n    <rect x=\"276\" y=\"47\" width=\"2077\" height=\"1440\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip752)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"498.885,1486.45 498.885,47.2441 \"/>\n<polyline clip-path=\"url(#clip752)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"907.311,1486.45 907.311,47.2441 \"/>\n<polyline clip-path=\"url(#clip752)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1315.74,1486.45 1315.74,47.2441 \"/>\n<polyline clip-path=\"url(#clip752)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1724.16,1486.45 1724.16,47.2441 \"/>\n<polyline clip-path=\"url(#clip752)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2132.59,1486.45 2132.59,47.2441 \"/>\n<polyline clip-path=\"url(#clip752)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"276.76,1198.28 2352.76,1198.28 \"/>\n<polyline clip-path=\"url(#clip752)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"276.76,866.364 2352.76,866.364 \"/>\n<polyline clip-path=\"url(#clip752)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"276.76,534.444 2352.76,534.444 \"/>\n<polyline clip-path=\"url(#clip752)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"276.76,202.524 2352.76,202.524 \"/>\n<polyline clip-path=\"url(#clip750)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"276.76,1486.45 2352.76,1486.45 \"/>\n<polyline clip-path=\"url(#clip750)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"498.885,1486.45 498.885,1467.55 \"/>\n<polyline clip-path=\"url(#clip750)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"907.311,1486.45 907.311,1467.55 \"/>\n<polyline clip-path=\"url(#clip750)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1315.74,1486.45 1315.74,1467.55 \"/>\n<polyline clip-path=\"url(#clip750)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1724.16,1486.45 1724.16,1467.55 \"/>\n<polyline clip-path=\"url(#clip750)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2132.59,1486.45 2132.59,1467.55 \"/>\n<path clip-path=\"url(#clip750)\" d=\"M466.049 1514.29 L484.406 1514.29 L484.406 1518.22 L470.332 1518.22 L470.332 1526.7 Q471.35 1526.35 472.369 1526.19 Q473.387 1526 474.406 1526 Q480.193 1526 483.572 1529.17 Q486.952 1532.34 486.952 1537.76 Q486.952 1543.34 483.48 1546.44 Q480.008 1549.52 473.688 1549.52 Q471.512 1549.52 469.244 1549.15 Q466.998 1548.78 464.591 1548.04 L464.591 1543.34 Q466.674 1544.47 468.897 1545.03 Q471.119 1545.58 473.596 1545.58 Q477.6 1545.58 479.938 1543.48 Q482.276 1541.37 482.276 1537.76 Q482.276 1534.15 479.938 1532.04 Q477.6 1529.94 473.596 1529.94 Q471.721 1529.94 469.846 1530.35 Q467.994 1530.77 466.049 1531.65 L466.049 1514.29 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M496.165 1542.97 L501.049 1542.97 L501.049 1548.85 L496.165 1548.85 L496.165 1542.97 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M521.234 1517.37 Q517.623 1517.37 515.794 1520.93 Q513.989 1524.47 513.989 1531.6 Q513.989 1538.71 515.794 1542.27 Q517.623 1545.82 521.234 1545.82 Q524.869 1545.82 526.674 1542.27 Q528.503 1538.71 528.503 1531.6 Q528.503 1524.47 526.674 1520.93 Q524.869 1517.37 521.234 1517.37 M521.234 1513.66 Q527.044 1513.66 530.1 1518.27 Q533.179 1522.85 533.179 1531.6 Q533.179 1540.33 530.1 1544.94 Q527.044 1549.52 521.234 1549.52 Q515.424 1549.52 512.345 1544.94 Q509.29 1540.33 509.29 1531.6 Q509.29 1522.85 512.345 1518.27 Q515.424 1513.66 521.234 1513.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M873.631 1514.29 L895.853 1514.29 L895.853 1516.28 L883.307 1548.85 L878.423 1548.85 L890.228 1518.22 L873.631 1518.22 L873.631 1514.29 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M904.973 1542.97 L909.858 1542.97 L909.858 1548.85 L904.973 1548.85 L904.973 1542.97 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M920.089 1514.29 L938.446 1514.29 L938.446 1518.22 L924.372 1518.22 L924.372 1526.7 Q925.39 1526.35 926.409 1526.19 Q927.427 1526 928.446 1526 Q934.233 1526 937.612 1529.17 Q940.992 1532.34 940.992 1537.76 Q940.992 1543.34 937.52 1546.44 Q934.047 1549.52 927.728 1549.52 Q925.552 1549.52 923.284 1549.15 Q921.038 1548.78 918.631 1548.04 L918.631 1543.34 Q920.714 1544.47 922.936 1545.03 Q925.159 1545.58 927.635 1545.58 Q931.64 1545.58 933.978 1543.48 Q936.316 1541.37 936.316 1537.76 Q936.316 1534.15 933.978 1532.04 Q931.64 1529.94 927.635 1529.94 Q925.76 1529.94 923.885 1530.35 Q922.034 1530.77 920.089 1531.65 L920.089 1514.29 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M1267.81 1544.91 L1275.45 1544.91 L1275.45 1518.55 L1267.14 1520.21 L1267.14 1515.95 L1275.4 1514.29 L1280.08 1514.29 L1280.08 1544.91 L1287.72 1544.91 L1287.72 1548.85 L1267.81 1548.85 L1267.81 1544.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M1307.16 1517.37 Q1303.55 1517.37 1301.72 1520.93 Q1299.92 1524.47 1299.92 1531.6 Q1299.92 1538.71 1301.72 1542.27 Q1303.55 1545.82 1307.16 1545.82 Q1310.8 1545.82 1312.6 1542.27 Q1314.43 1538.71 1314.43 1531.6 Q1314.43 1524.47 1312.6 1520.93 Q1310.8 1517.37 1307.16 1517.37 M1307.16 1513.66 Q1312.97 1513.66 1316.03 1518.27 Q1319.11 1522.85 1319.11 1531.6 Q1319.11 1540.33 1316.03 1544.94 Q1312.97 1549.52 1307.16 1549.52 Q1301.35 1549.52 1298.27 1544.94 Q1295.22 1540.33 1295.22 1531.6 Q1295.22 1522.85 1298.27 1518.27 Q1301.35 1513.66 1307.16 1513.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M1327.32 1542.97 L1332.21 1542.97 L1332.21 1548.85 L1327.32 1548.85 L1327.32 1542.97 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M1352.39 1517.37 Q1348.78 1517.37 1346.95 1520.93 Q1345.15 1524.47 1345.15 1531.6 Q1345.15 1538.71 1346.95 1542.27 Q1348.78 1545.82 1352.39 1545.82 Q1356.03 1545.82 1357.83 1542.27 Q1359.66 1538.71 1359.66 1531.6 Q1359.66 1524.47 1357.83 1520.93 Q1356.03 1517.37 1352.39 1517.37 M1352.39 1513.66 Q1358.2 1513.66 1361.26 1518.27 Q1364.34 1522.85 1364.34 1531.6 Q1364.34 1540.33 1361.26 1544.94 Q1358.2 1549.52 1352.39 1549.52 Q1346.58 1549.52 1343.5 1544.94 Q1340.45 1540.33 1340.45 1531.6 Q1340.45 1522.85 1343.5 1518.27 Q1346.58 1513.66 1352.39 1513.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M1676.73 1544.91 L1684.37 1544.91 L1684.37 1518.55 L1676.06 1520.21 L1676.06 1515.95 L1684.33 1514.29 L1689 1514.29 L1689 1544.91 L1696.64 1544.91 L1696.64 1548.85 L1676.73 1548.85 L1676.73 1544.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M1710.11 1544.91 L1726.43 1544.91 L1726.43 1548.85 L1704.49 1548.85 L1704.49 1544.91 Q1707.15 1542.16 1711.73 1537.53 Q1716.34 1532.88 1717.52 1531.53 Q1719.77 1529.01 1720.65 1527.27 Q1721.55 1525.51 1721.55 1523.82 Q1721.55 1521.07 1719.6 1519.33 Q1717.68 1517.6 1714.58 1517.6 Q1712.38 1517.6 1709.93 1518.36 Q1707.5 1519.13 1704.72 1520.68 L1704.72 1515.95 Q1707.54 1514.82 1710 1514.24 Q1712.45 1513.66 1714.49 1513.66 Q1719.86 1513.66 1723.05 1516.35 Q1726.25 1519.03 1726.25 1523.52 Q1726.25 1525.65 1725.44 1527.57 Q1724.65 1529.47 1722.54 1532.07 Q1721.97 1532.74 1718.86 1535.95 Q1715.76 1539.15 1710.11 1544.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M1736.25 1542.97 L1741.13 1542.97 L1741.13 1548.85 L1736.25 1548.85 L1736.25 1542.97 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M1751.36 1514.29 L1769.72 1514.29 L1769.72 1518.22 L1755.65 1518.22 L1755.65 1526.7 Q1756.66 1526.35 1757.68 1526.19 Q1758.7 1526 1759.72 1526 Q1765.51 1526 1768.89 1529.17 Q1772.27 1532.34 1772.27 1537.76 Q1772.27 1543.34 1768.79 1546.44 Q1765.32 1549.52 1759 1549.52 Q1756.83 1549.52 1754.56 1549.15 Q1752.31 1548.78 1749.91 1548.04 L1749.91 1543.34 Q1751.99 1544.47 1754.21 1545.03 Q1756.43 1545.58 1758.91 1545.58 Q1762.91 1545.58 1765.25 1543.48 Q1767.59 1541.37 1767.59 1537.76 Q1767.59 1534.15 1765.25 1532.04 Q1762.91 1529.94 1758.91 1529.94 Q1757.03 1529.94 1755.16 1530.35 Q1753.31 1530.77 1751.36 1531.65 L1751.36 1514.29 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M2084.66 1544.91 L2092.3 1544.91 L2092.3 1518.55 L2083.99 1520.21 L2083.99 1515.95 L2092.26 1514.29 L2096.93 1514.29 L2096.93 1544.91 L2104.57 1544.91 L2104.57 1548.85 L2084.66 1548.85 L2084.66 1544.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M2114.06 1514.29 L2132.42 1514.29 L2132.42 1518.22 L2118.34 1518.22 L2118.34 1526.7 Q2119.36 1526.35 2120.38 1526.19 Q2121.4 1526 2122.42 1526 Q2128.2 1526 2131.58 1529.17 Q2134.96 1532.34 2134.96 1537.76 Q2134.96 1543.34 2131.49 1546.44 Q2128.02 1549.52 2121.7 1549.52 Q2119.52 1549.52 2117.26 1549.15 Q2115.01 1548.78 2112.6 1548.04 L2112.6 1543.34 Q2114.69 1544.47 2116.91 1545.03 Q2119.13 1545.58 2121.61 1545.58 Q2125.61 1545.58 2127.95 1543.48 Q2130.29 1541.37 2130.29 1537.76 Q2130.29 1534.15 2127.95 1532.04 Q2125.61 1529.94 2121.61 1529.94 Q2119.73 1529.94 2117.86 1530.35 Q2116.01 1530.77 2114.06 1531.65 L2114.06 1514.29 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M2144.18 1542.97 L2149.06 1542.97 L2149.06 1548.85 L2144.18 1548.85 L2144.18 1542.97 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M2169.25 1517.37 Q2165.63 1517.37 2163.81 1520.93 Q2162 1524.47 2162 1531.6 Q2162 1538.71 2163.81 1542.27 Q2165.63 1545.82 2169.25 1545.82 Q2172.88 1545.82 2174.69 1542.27 Q2176.51 1538.71 2176.51 1531.6 Q2176.51 1524.47 2174.69 1520.93 Q2172.88 1517.37 2169.25 1517.37 M2169.25 1513.66 Q2175.06 1513.66 2178.11 1518.27 Q2181.19 1522.85 2181.19 1531.6 Q2181.19 1540.33 2178.11 1544.94 Q2175.06 1549.52 2169.25 1549.52 Q2163.44 1549.52 2160.36 1544.94 Q2157.3 1540.33 2157.3 1531.6 Q2157.3 1522.85 2160.36 1518.27 Q2163.44 1513.66 2169.25 1513.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip750)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"276.76,1486.45 276.76,47.2441 \"/>\n<polyline clip-path=\"url(#clip750)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"276.76,1198.28 295.657,1198.28 \"/>\n<polyline clip-path=\"url(#clip750)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"276.76,866.364 295.657,866.364 \"/>\n<polyline clip-path=\"url(#clip750)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"276.76,534.444 295.657,534.444 \"/>\n<polyline clip-path=\"url(#clip750)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"276.76,202.524 295.657,202.524 \"/>\n<path clip-path=\"url(#clip750)\" d=\"M62.9365 1184.08 Q59.3254 1184.08 57.4967 1187.65 Q55.6912 1191.19 55.6912 1198.32 Q55.6912 1205.42 57.4967 1208.99 Q59.3254 1212.53 62.9365 1212.53 Q66.5707 1212.53 68.3763 1208.99 Q70.205 1205.42 70.205 1198.32 Q70.205 1191.19 68.3763 1187.65 Q66.5707 1184.08 62.9365 1184.08 M62.9365 1180.38 Q68.7467 1180.38 71.8022 1184.99 Q74.8809 1189.57 74.8809 1198.32 Q74.8809 1207.05 71.8022 1211.65 Q68.7467 1216.24 62.9365 1216.24 Q57.1264 1216.24 54.0477 1211.65 Q50.9921 1207.05 50.9921 1198.32 Q50.9921 1189.57 54.0477 1184.99 Q57.1264 1180.38 62.9365 1180.38 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M83.0984 1209.68 L87.9827 1209.68 L87.9827 1215.56 L83.0984 1215.56 L83.0984 1209.68 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M108.168 1184.08 Q104.557 1184.08 102.728 1187.65 Q100.922 1191.19 100.922 1198.32 Q100.922 1205.42 102.728 1208.99 Q104.557 1212.53 108.168 1212.53 Q111.802 1212.53 113.608 1208.99 Q115.436 1205.42 115.436 1198.32 Q115.436 1191.19 113.608 1187.65 Q111.802 1184.08 108.168 1184.08 M108.168 1180.38 Q113.978 1180.38 117.033 1184.99 Q120.112 1189.57 120.112 1198.32 Q120.112 1207.05 117.033 1211.65 Q113.978 1216.24 108.168 1216.24 Q102.358 1216.24 99.2789 1211.65 Q96.2234 1207.05 96.2234 1198.32 Q96.2234 1189.57 99.2789 1184.99 Q102.358 1180.38 108.168 1180.38 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M138.33 1184.08 Q134.719 1184.08 132.89 1187.65 Q131.084 1191.19 131.084 1198.32 Q131.084 1205.42 132.89 1208.99 Q134.719 1212.53 138.33 1212.53 Q141.964 1212.53 143.769 1208.99 Q145.598 1205.42 145.598 1198.32 Q145.598 1191.19 143.769 1187.65 Q141.964 1184.08 138.33 1184.08 M138.33 1180.38 Q144.14 1180.38 147.195 1184.99 Q150.274 1189.57 150.274 1198.32 Q150.274 1207.05 147.195 1211.65 Q144.14 1216.24 138.33 1216.24 Q132.519 1216.24 129.441 1211.65 Q126.385 1207.05 126.385 1198.32 Q126.385 1189.57 129.441 1184.99 Q132.519 1180.38 138.33 1180.38 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M168.491 1184.08 Q164.88 1184.08 163.052 1187.65 Q161.246 1191.19 161.246 1198.32 Q161.246 1205.42 163.052 1208.99 Q164.88 1212.53 168.491 1212.53 Q172.126 1212.53 173.931 1208.99 Q175.76 1205.42 175.76 1198.32 Q175.76 1191.19 173.931 1187.65 Q172.126 1184.08 168.491 1184.08 M168.491 1180.38 Q174.302 1180.38 177.357 1184.99 Q180.436 1189.57 180.436 1198.32 Q180.436 1207.05 177.357 1211.65 Q174.302 1216.24 168.491 1216.24 Q162.681 1216.24 159.603 1211.65 Q156.547 1207.05 156.547 1198.32 Q156.547 1189.57 159.603 1184.99 Q162.681 1180.38 168.491 1180.38 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M189.464 1211.63 L197.102 1211.63 L197.102 1185.26 L188.792 1186.93 L188.792 1182.67 L197.056 1181 L201.732 1181 L201.732 1211.63 L209.371 1211.63 L209.371 1215.56 L189.464 1215.56 L189.464 1211.63 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M228.815 1184.08 Q225.204 1184.08 223.375 1187.65 Q221.57 1191.19 221.57 1198.32 Q221.57 1205.42 223.375 1208.99 Q225.204 1212.53 228.815 1212.53 Q232.449 1212.53 234.255 1208.99 Q236.084 1205.42 236.084 1198.32 Q236.084 1191.19 234.255 1187.65 Q232.449 1184.08 228.815 1184.08 M228.815 1180.38 Q234.625 1180.38 237.681 1184.99 Q240.76 1189.57 240.76 1198.32 Q240.76 1207.05 237.681 1211.65 Q234.625 1216.24 228.815 1216.24 Q223.005 1216.24 219.926 1211.65 Q216.871 1207.05 216.871 1198.32 Q216.871 1189.57 219.926 1184.99 Q223.005 1180.38 228.815 1180.38 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M63.9319 852.162 Q60.3208 852.162 58.4921 855.727 Q56.6865 859.269 56.6865 866.398 Q56.6865 873.505 58.4921 877.07 Q60.3208 880.611 63.9319 880.611 Q67.5661 880.611 69.3717 877.07 Q71.2004 873.505 71.2004 866.398 Q71.2004 859.269 69.3717 855.727 Q67.5661 852.162 63.9319 852.162 M63.9319 848.459 Q69.742 848.459 72.7976 853.065 Q75.8763 857.648 75.8763 866.398 Q75.8763 875.125 72.7976 879.732 Q69.742 884.315 63.9319 884.315 Q58.1217 884.315 55.043 879.732 Q51.9875 875.125 51.9875 866.398 Q51.9875 857.648 55.043 853.065 Q58.1217 848.459 63.9319 848.459 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M84.0938 877.764 L88.978 877.764 L88.978 883.644 L84.0938 883.644 L84.0938 877.764 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M109.163 852.162 Q105.552 852.162 103.723 855.727 Q101.918 859.269 101.918 866.398 Q101.918 873.505 103.723 877.07 Q105.552 880.611 109.163 880.611 Q112.797 880.611 114.603 877.07 Q116.432 873.505 116.432 866.398 Q116.432 859.269 114.603 855.727 Q112.797 852.162 109.163 852.162 M109.163 848.459 Q114.973 848.459 118.029 853.065 Q121.107 857.648 121.107 866.398 Q121.107 875.125 118.029 879.732 Q114.973 884.315 109.163 884.315 Q103.353 884.315 100.274 879.732 Q97.2187 875.125 97.2187 866.398 Q97.2187 857.648 100.274 853.065 Q103.353 848.459 109.163 848.459 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M139.325 852.162 Q135.714 852.162 133.885 855.727 Q132.08 859.269 132.08 866.398 Q132.08 873.505 133.885 877.07 Q135.714 880.611 139.325 880.611 Q142.959 880.611 144.765 877.07 Q146.593 873.505 146.593 866.398 Q146.593 859.269 144.765 855.727 Q142.959 852.162 139.325 852.162 M139.325 848.459 Q145.135 848.459 148.191 853.065 Q151.269 857.648 151.269 866.398 Q151.269 875.125 148.191 879.732 Q145.135 884.315 139.325 884.315 Q133.515 884.315 130.436 879.732 Q127.381 875.125 127.381 866.398 Q127.381 857.648 130.436 853.065 Q133.515 848.459 139.325 848.459 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M169.487 852.162 Q165.876 852.162 164.047 855.727 Q162.242 859.269 162.242 866.398 Q162.242 873.505 164.047 877.07 Q165.876 880.611 169.487 880.611 Q173.121 880.611 174.927 877.07 Q176.755 873.505 176.755 866.398 Q176.755 859.269 174.927 855.727 Q173.121 852.162 169.487 852.162 M169.487 848.459 Q175.297 848.459 178.353 853.065 Q181.431 857.648 181.431 866.398 Q181.431 875.125 178.353 879.732 Q175.297 884.315 169.487 884.315 Q163.677 884.315 160.598 879.732 Q157.542 875.125 157.542 866.398 Q157.542 857.648 160.598 853.065 Q163.677 848.459 169.487 848.459 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M190.459 879.709 L198.098 879.709 L198.098 853.343 L189.788 855.01 L189.788 850.75 L198.052 849.084 L202.727 849.084 L202.727 879.709 L210.366 879.709 L210.366 883.644 L190.459 883.644 L190.459 879.709 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M219.857 849.084 L238.213 849.084 L238.213 853.019 L224.139 853.019 L224.139 861.491 Q225.158 861.144 226.176 860.982 Q227.195 860.797 228.213 860.797 Q234 860.797 237.38 863.968 Q240.76 867.139 240.76 872.556 Q240.76 878.134 237.287 881.236 Q233.815 884.315 227.496 884.315 Q225.32 884.315 223.051 883.945 Q220.806 883.574 218.399 882.834 L218.399 878.134 Q220.482 879.269 222.704 879.824 Q224.926 880.38 227.403 880.38 Q231.408 880.38 233.746 878.273 Q236.084 876.167 236.084 872.556 Q236.084 868.945 233.746 866.838 Q231.408 864.732 227.403 864.732 Q225.528 864.732 223.653 865.148 Q221.801 865.565 219.857 866.445 L219.857 849.084 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M62.9365 520.242 Q59.3254 520.242 57.4967 523.807 Q55.6912 527.349 55.6912 534.478 Q55.6912 541.585 57.4967 545.15 Q59.3254 548.691 62.9365 548.691 Q66.5707 548.691 68.3763 545.15 Q70.205 541.585 70.205 534.478 Q70.205 527.349 68.3763 523.807 Q66.5707 520.242 62.9365 520.242 M62.9365 516.539 Q68.7467 516.539 71.8022 521.145 Q74.8809 525.728 74.8809 534.478 Q74.8809 543.205 71.8022 547.812 Q68.7467 552.395 62.9365 552.395 Q57.1264 552.395 54.0477 547.812 Q50.9921 543.205 50.9921 534.478 Q50.9921 525.728 54.0477 521.145 Q57.1264 516.539 62.9365 516.539 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M83.0984 545.844 L87.9827 545.844 L87.9827 551.724 L83.0984 551.724 L83.0984 545.844 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M108.168 520.242 Q104.557 520.242 102.728 523.807 Q100.922 527.349 100.922 534.478 Q100.922 541.585 102.728 545.15 Q104.557 548.691 108.168 548.691 Q111.802 548.691 113.608 545.15 Q115.436 541.585 115.436 534.478 Q115.436 527.349 113.608 523.807 Q111.802 520.242 108.168 520.242 M108.168 516.539 Q113.978 516.539 117.033 521.145 Q120.112 525.728 120.112 534.478 Q120.112 543.205 117.033 547.812 Q113.978 552.395 108.168 552.395 Q102.358 552.395 99.2789 547.812 Q96.2234 543.205 96.2234 534.478 Q96.2234 525.728 99.2789 521.145 Q102.358 516.539 108.168 516.539 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M138.33 520.242 Q134.719 520.242 132.89 523.807 Q131.084 527.349 131.084 534.478 Q131.084 541.585 132.89 545.15 Q134.719 548.691 138.33 548.691 Q141.964 548.691 143.769 545.15 Q145.598 541.585 145.598 534.478 Q145.598 527.349 143.769 523.807 Q141.964 520.242 138.33 520.242 M138.33 516.539 Q144.14 516.539 147.195 521.145 Q150.274 525.728 150.274 534.478 Q150.274 543.205 147.195 547.812 Q144.14 552.395 138.33 552.395 Q132.519 552.395 129.441 547.812 Q126.385 543.205 126.385 534.478 Q126.385 525.728 129.441 521.145 Q132.519 516.539 138.33 516.539 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M168.491 520.242 Q164.88 520.242 163.052 523.807 Q161.246 527.349 161.246 534.478 Q161.246 541.585 163.052 545.15 Q164.88 548.691 168.491 548.691 Q172.126 548.691 173.931 545.15 Q175.76 541.585 175.76 534.478 Q175.76 527.349 173.931 523.807 Q172.126 520.242 168.491 520.242 M168.491 516.539 Q174.302 516.539 177.357 521.145 Q180.436 525.728 180.436 534.478 Q180.436 543.205 177.357 547.812 Q174.302 552.395 168.491 552.395 Q162.681 552.395 159.603 547.812 Q156.547 543.205 156.547 534.478 Q156.547 525.728 159.603 521.145 Q162.681 516.539 168.491 516.539 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M192.681 547.788 L209.001 547.788 L209.001 551.724 L187.056 551.724 L187.056 547.788 Q189.718 545.034 194.302 540.404 Q198.908 535.751 200.089 534.409 Q202.334 531.886 203.214 530.15 Q204.116 528.39 204.116 526.701 Q204.116 523.946 202.172 522.21 Q200.251 520.474 197.149 520.474 Q194.95 520.474 192.496 521.238 Q190.065 522.002 187.288 523.552 L187.288 518.83 Q190.112 517.696 192.565 517.117 Q195.019 516.539 197.056 516.539 Q202.426 516.539 205.621 519.224 Q208.815 521.909 208.815 526.4 Q208.815 528.529 208.005 530.451 Q207.218 532.349 205.112 534.941 Q204.533 535.613 201.431 538.83 Q198.329 542.025 192.681 547.788 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M228.815 520.242 Q225.204 520.242 223.375 523.807 Q221.57 527.349 221.57 534.478 Q221.57 541.585 223.375 545.15 Q225.204 548.691 228.815 548.691 Q232.449 548.691 234.255 545.15 Q236.084 541.585 236.084 534.478 Q236.084 527.349 234.255 523.807 Q232.449 520.242 228.815 520.242 M228.815 516.539 Q234.625 516.539 237.681 521.145 Q240.76 525.728 240.76 534.478 Q240.76 543.205 237.681 547.812 Q234.625 552.395 228.815 552.395 Q223.005 552.395 219.926 547.812 Q216.871 543.205 216.871 534.478 Q216.871 525.728 219.926 521.145 Q223.005 516.539 228.815 516.539 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M63.9319 188.322 Q60.3208 188.322 58.4921 191.887 Q56.6865 195.429 56.6865 202.558 Q56.6865 209.665 58.4921 213.23 Q60.3208 216.771 63.9319 216.771 Q67.5661 216.771 69.3717 213.23 Q71.2004 209.665 71.2004 202.558 Q71.2004 195.429 69.3717 191.887 Q67.5661 188.322 63.9319 188.322 M63.9319 184.619 Q69.742 184.619 72.7976 189.225 Q75.8763 193.808 75.8763 202.558 Q75.8763 211.285 72.7976 215.892 Q69.742 220.475 63.9319 220.475 Q58.1217 220.475 55.043 215.892 Q51.9875 211.285 51.9875 202.558 Q51.9875 193.808 55.043 189.225 Q58.1217 184.619 63.9319 184.619 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M84.0938 213.924 L88.978 213.924 L88.978 219.804 L84.0938 219.804 L84.0938 213.924 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M109.163 188.322 Q105.552 188.322 103.723 191.887 Q101.918 195.429 101.918 202.558 Q101.918 209.665 103.723 213.23 Q105.552 216.771 109.163 216.771 Q112.797 216.771 114.603 213.23 Q116.432 209.665 116.432 202.558 Q116.432 195.429 114.603 191.887 Q112.797 188.322 109.163 188.322 M109.163 184.619 Q114.973 184.619 118.029 189.225 Q121.107 193.808 121.107 202.558 Q121.107 211.285 118.029 215.892 Q114.973 220.475 109.163 220.475 Q103.353 220.475 100.274 215.892 Q97.2187 211.285 97.2187 202.558 Q97.2187 193.808 100.274 189.225 Q103.353 184.619 109.163 184.619 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M139.325 188.322 Q135.714 188.322 133.885 191.887 Q132.08 195.429 132.08 202.558 Q132.08 209.665 133.885 213.23 Q135.714 216.771 139.325 216.771 Q142.959 216.771 144.765 213.23 Q146.593 209.665 146.593 202.558 Q146.593 195.429 144.765 191.887 Q142.959 188.322 139.325 188.322 M139.325 184.619 Q145.135 184.619 148.191 189.225 Q151.269 193.808 151.269 202.558 Q151.269 211.285 148.191 215.892 Q145.135 220.475 139.325 220.475 Q133.515 220.475 130.436 215.892 Q127.381 211.285 127.381 202.558 Q127.381 193.808 130.436 189.225 Q133.515 184.619 139.325 184.619 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M169.487 188.322 Q165.876 188.322 164.047 191.887 Q162.242 195.429 162.242 202.558 Q162.242 209.665 164.047 213.23 Q165.876 216.771 169.487 216.771 Q173.121 216.771 174.927 213.23 Q176.755 209.665 176.755 202.558 Q176.755 195.429 174.927 191.887 Q173.121 188.322 169.487 188.322 M169.487 184.619 Q175.297 184.619 178.353 189.225 Q181.431 193.808 181.431 202.558 Q181.431 211.285 178.353 215.892 Q175.297 220.475 169.487 220.475 Q163.677 220.475 160.598 215.892 Q157.542 211.285 157.542 202.558 Q157.542 193.808 160.598 189.225 Q163.677 184.619 169.487 184.619 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M193.677 215.868 L209.996 215.868 L209.996 219.804 L188.052 219.804 L188.052 215.868 Q190.714 213.114 195.297 208.484 Q199.903 203.831 201.084 202.489 Q203.329 199.966 204.209 198.23 Q205.112 196.47 205.112 194.781 Q205.112 192.026 203.167 190.29 Q201.246 188.554 198.144 188.554 Q195.945 188.554 193.491 189.318 Q191.061 190.082 188.283 191.632 L188.283 186.91 Q191.107 185.776 193.561 185.197 Q196.014 184.619 198.052 184.619 Q203.422 184.619 206.616 187.304 Q209.811 189.989 209.811 194.48 Q209.811 196.609 209.001 198.531 Q208.214 200.429 206.107 203.021 Q205.528 203.693 202.426 206.91 Q199.325 210.105 193.677 215.868 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M219.857 185.244 L238.213 185.244 L238.213 189.179 L224.139 189.179 L224.139 197.651 Q225.158 197.304 226.176 197.142 Q227.195 196.956 228.213 196.956 Q234 196.956 237.38 200.128 Q240.76 203.299 240.76 208.716 Q240.76 214.294 237.287 217.396 Q233.815 220.475 227.496 220.475 Q225.32 220.475 223.051 220.104 Q220.806 219.734 218.399 218.993 L218.399 214.294 Q220.482 215.429 222.704 215.984 Q224.926 216.54 227.403 216.54 Q231.408 216.54 233.746 214.433 Q236.084 212.327 236.084 208.716 Q236.084 205.105 233.746 202.998 Q231.408 200.892 227.403 200.892 Q225.528 200.892 223.653 201.308 Q221.801 201.725 219.857 202.605 L219.857 185.244 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip752)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"335.514,1445.72 337.475,1445.55 339.435,1445.38 341.396,1445.22 343.356,1445.05 345.316,1444.88 347.277,1444.7 349.237,1444.53 351.198,1444.35 353.158,1444.17 355.119,1443.99 357.079,1443.81 359.04,1443.62 361,1443.44 362.961,1443.25 364.921,1443.06 366.881,1442.87 368.842,1442.68 370.802,1442.48 372.763,1442.28 374.723,1442.09 376.684,1441.89 378.644,1441.68 380.605,1441.48 382.565,1441.28 384.525,1441.07 386.486,1440.86 388.446,1440.65 390.407,1440.44 392.367,1440.23 394.328,1440.01 396.288,1439.79 398.249,1439.58 400.209,1439.36 402.169,1439.13 404.13,1438.91 406.09,1438.69 408.051,1438.46 410.011,1438.23 411.972,1438 413.932,1437.77 415.893,1437.54 417.853,1437.31 419.813,1437.07 421.774,1436.83 423.734,1436.6 425.695,1436.36 427.655,1436.12 429.616,1435.87 431.576,1435.63 433.537,1435.39 435.497,1435.14 437.458,1434.89 439.418,1434.64 441.378,1434.39 443.339,1434.14 445.299,1433.89 447.26,1433.63 449.22,1433.38 451.181,1433.12 453.141,1432.86 455.102,1432.6 457.062,1432.34 459.022,1432.08 460.983,1431.82 462.943,1431.56 464.904,1431.29 466.864,1431.03 468.825,1430.76 470.785,1430.49 472.746,1430.22 474.706,1429.95 476.666,1429.68 478.627,1429.41 480.587,1429.14 482.548,1428.87 484.508,1428.59 486.469,1428.32 488.429,1428.04 490.39,1427.76 492.35,1427.48 494.31,1427.21 496.271,1426.93 498.231,1426.65 500.192,1426.37 502.152,1426.08 504.113,1425.8 506.073,1425.52 508.034,1425.23 509.994,1424.95 511.955,1424.66 513.915,1424.38 515.875,1424.09 517.836,1423.8 519.796,1423.52 521.757,1423.23 523.717,1422.94 525.678,1422.65 527.638,1422.36 529.599,1422.07 531.559,1421.78 533.519,1421.49 535.48,1421.19 537.44,1420.9 539.401,1420.61 541.361,1420.32 543.322,1420.02 545.282,1419.73 547.243,1419.43 549.203,1419.14 551.163,1418.84 553.124,1418.55 555.084,1418.25 557.045,1417.95 559.005,1417.66 560.966,1417.36 562.926,1417.06 564.887,1416.76 566.847,1416.47 568.807,1416.17 570.768,1415.87 572.728,1415.57 574.689,1415.27 576.649,1414.97 578.61,1414.67 580.57,1414.37 582.531,1414.07 584.491,1413.77 586.452,1413.47 588.412,1413.17 590.372,1412.87 592.333,1412.57 594.293,1412.27 596.254,1411.97 598.214,1411.67 600.175,1411.36 602.135,1411.06 604.096,1410.76 606.056,1410.46 608.016,1410.15 609.977,1409.85 611.937,1409.55 613.898,1409.25 615.858,1408.94 617.819,1408.64 619.779,1408.34 621.74,1408.03 623.7,1407.73 625.66,1407.43 627.621,1407.12 629.581,1406.82 631.542,1406.51 633.502,1406.21 635.463,1405.9 637.423,1405.6 639.384,1405.29 641.344,1404.99 643.304,1404.68 645.265,1404.38 647.225,1404.07 649.186,1403.77 651.146,1403.46 653.107,1403.15 655.067,1402.85 657.028,1402.54 658.988,1402.23 660.949,1401.93 662.909,1401.62 664.869,1401.31 666.83,1401 668.79,1400.69 670.751,1400.39 672.711,1400.08 674.672,1399.77 676.632,1399.46 678.593,1399.15 680.553,1398.84 682.513,1398.53 684.474,1398.22 686.434,1397.91 688.395,1397.6 690.355,1397.28 692.316,1396.97 694.276,1396.66 696.237,1396.35 698.197,1396.03 700.157,1395.72 702.118,1395.4 704.078,1395.09 706.039,1394.77 707.999,1394.46 709.96,1394.14 711.92,1393.82 713.881,1393.51 715.841,1393.19 717.802,1392.87 719.762,1392.55 721.722,1392.23 723.683,1391.91 725.643,1391.59 727.604,1391.27 729.564,1390.95 731.525,1390.62 733.485,1390.3 735.446,1389.97 737.406,1389.65 739.366,1389.32 741.327,1388.99 743.287,1388.67 745.248,1388.34 747.208,1388.01 749.169,1387.68 751.129,1387.35 753.09,1387.01 755.05,1386.68 757.01,1386.35 758.971,1386.01 760.931,1385.67 762.892,1385.34 764.852,1385 766.813,1384.66 768.773,1384.32 770.734,1383.98 772.694,1383.63 774.654,1383.29 776.615,1382.94 778.575,1382.6 780.536,1382.25 782.496,1381.9 784.457,1381.55 786.417,1381.2 788.378,1380.84 790.338,1380.49 792.299,1380.13 794.259,1379.77 796.219,1379.41 798.18,1379.05 800.14,1378.69 802.101,1378.33 804.061,1377.96 806.022,1377.59 807.982,1377.22 809.943,1376.85 811.903,1376.48 813.863,1376.11 815.824,1375.73 817.784,1375.35 819.745,1374.97 821.705,1374.59 823.666,1374.21 825.626,1373.82 827.587,1373.44 829.547,1373.05 831.507,1372.65 833.468,1372.26 835.428,1371.87 837.389,1371.47 839.349,1371.07 841.31,1370.67 843.27,1370.26 845.231,1369.85 847.191,1369.44 849.151,1369.03 851.112,1368.62 853.072,1368.2 855.033,1367.78 856.993,1367.36 858.954,1366.94 860.914,1366.51 862.875,1366.08 864.835,1365.65 866.796,1365.21 868.756,1364.78 870.716,1364.34 872.677,1363.89 874.637,1363.45 876.598,1363 878.558,1362.55 880.519,1362.09 882.479,1361.63 884.44,1361.17 886.4,1360.71 888.36,1360.24 890.321,1359.77 892.281,1359.3 894.242,1358.82 896.202,1358.34 898.163,1357.85 900.123,1357.37 902.084,1356.87 904.044,1356.38 906.004,1355.88 907.965,1355.38 909.925,1354.87 911.886,1354.36 913.846,1353.85 915.807,1353.33 917.767,1352.81 919.728,1352.29 921.688,1351.76 923.648,1351.22 925.609,1350.69 927.569,1350.15 929.53,1349.6 931.49,1349.05 933.451,1348.5 935.411,1347.94 937.372,1347.37 939.332,1346.81 941.293,1346.23 943.253,1345.66 945.213,1345.07 947.174,1344.49 949.134,1343.9 951.095,1343.3 953.055,1342.7 955.016,1342.09 956.976,1341.48 958.937,1340.86 960.897,1340.24 962.857,1339.61 964.818,1338.98 966.778,1338.34 968.739,1337.7 970.699,1337.05 972.66,1336.4 974.62,1335.73 976.581,1335.07 978.541,1334.4 980.501,1333.72 982.462,1333.03 984.422,1332.34 986.383,1331.65 988.343,1330.94 990.304,1330.23 992.264,1329.52 994.225,1328.79 996.185,1328.07 998.145,1327.33 1000.11,1326.59 1002.07,1325.84 1004.03,1325.08 1005.99,1324.32 1007.95,1323.55 1009.91,1322.77 1011.87,1321.98 1013.83,1321.19 1015.79,1320.39 1017.75,1319.58 1019.71,1318.77 1021.67,1317.94 1023.63,1317.11 1025.59,1316.27 1027.55,1315.42 1029.51,1314.57 1031.47,1313.7 1033.43,1312.83 1035.39,1311.95 1037.35,1311.06 1039.31,1310.16 1041.28,1309.25 1043.24,1308.33 1045.2,1307.41 1047.16,1306.47 1049.12,1305.53 1051.08,1304.57 1053.04,1303.61 1055,1302.63 1056.96,1301.65 1058.92,1300.66 1060.88,1299.65 1062.84,1298.64 1064.8,1297.61 1066.76,1296.58 1068.72,1295.53 1070.68,1294.47 1072.64,1293.4 1074.6,1292.32 1076.56,1291.23 1078.52,1290.13 1080.48,1289.02 1082.44,1287.89 1084.41,1286.75 1086.37,1285.6 1088.33,1284.44 1090.29,1283.27 1092.25,1282.08 1094.21,1280.88 1096.17,1279.67 1098.13,1278.44 1100.09,1277.2 1102.05,1275.95 1104.01,1274.69 1105.97,1273.41 1107.93,1272.11 1109.89,1270.8 1111.85,1269.48 1113.81,1268.15 1115.77,1266.79 1117.73,1265.43 1119.69,1264.05 1121.65,1262.65 1123.61,1261.24 1125.57,1259.81 1127.54,1258.37 1129.5,1256.91 1131.46,1255.43 1133.42,1253.94 1135.38,1252.43 1137.34,1250.91 1139.3,1249.36 1141.26,1247.8 1143.22,1246.23 1145.18,1244.63 1147.14,1243.02 1149.1,1241.39 1151.06,1239.74 1153.02,1238.07 1154.98,1236.38 1156.94,1234.68 1158.9,1232.95 1160.86,1231.21 1162.82,1229.44 1164.78,1227.66 1166.74,1225.85 1168.7,1224.02 1170.66,1222.18 1172.63,1220.31 1174.59,1218.42 1176.55,1216.51 1178.51,1214.58 1180.47,1212.63 1182.43,1210.65 1184.39,1208.65 1186.35,1206.63 1188.31,1204.58 1190.27,1202.52 1192.23,1200.42 1194.19,1198.31 1196.15,1196.17 1198.11,1194 1200.07,1191.82 1202.03,1189.6 1203.99,1187.36 1205.95,1185.1 1207.91,1182.81 1209.87,1180.49 1211.83,1178.15 1213.79,1175.78 1215.76,1173.38 1217.72,1170.96 1219.68,1168.51 1221.64,1166.03 1223.6,1163.53 1225.56,1160.99 1227.52,1158.43 1229.48,1155.83 1231.44,1153.21 1233.4,1150.56 1235.36,1147.88 1237.32,1145.17 1239.28,1142.43 1241.24,1139.66 1243.2,1136.86 1245.16,1134.02 1247.12,1131.16 1249.08,1128.26 1251.04,1125.33 1253,1122.37 1254.96,1119.38 1256.92,1116.35 1258.89,1113.29 1260.85,1110.2 1262.81,1107.07 1264.77,1103.91 1266.73,1100.72 1268.69,1097.49 1270.65,1094.22 1272.61,1090.92 1274.57,1087.59 1276.53,1084.22 1278.49,1080.81 1280.45,1077.37 1282.41,1073.89 1284.37,1070.38 1286.33,1066.82 1288.29,1063.23 1290.25,1059.61 1292.21,1055.94 1294.17,1052.24 1296.13,1048.5 1298.09,1044.73 1300.05,1040.91 1302.01,1037.06 1303.98,1033.16 1305.94,1029.23 1307.9,1025.26 1309.86,1021.25 1311.82,1017.2 1313.78,1013.11 1315.74,1008.98 1317.7,1004.81 1319.66,1000.6 1321.62,996.347 1323.58,992.056 1325.54,987.724 1327.5,983.352 1329.46,978.939 1331.42,974.486 1333.38,969.991 1335.34,965.455 1337.3,960.879 1339.26,956.261 1341.22,951.602 1343.18,946.902 1345.14,942.16 1347.11,937.377 1349.07,932.553 1351.03,927.688 1352.99,922.782 1354.95,917.834 1356.91,912.846 1358.87,907.816 1360.83,902.745 1362.79,897.634 1364.75,892.482 1366.71,887.289 1368.67,882.056 1370.63,876.782 1372.59,871.468 1374.55,866.114 1376.51,860.72 1378.47,855.287 1380.43,849.815 1382.39,844.303 1384.35,838.752 1386.31,833.163 1388.27,827.536 1390.23,821.871 1392.2,816.168 1394.16,810.428 1396.12,804.651 1398.08,798.838 1400.04,792.988 1402,787.103 1403.96,781.183 1405.92,775.228 1407.88,769.239 1409.84,763.216 1411.8,757.16 1413.76,751.071 1415.72,744.95 1417.68,738.798 1419.64,732.615 1421.6,726.402 1423.56,720.159 1425.52,713.887 1427.48,707.587 1429.44,701.26 1431.4,694.906 1433.36,688.526 1435.33,682.121 1437.29,675.691 1439.25,669.238 1441.21,662.763 1443.17,656.265 1445.13,649.747 1447.09,643.208 1449.05,636.651 1451.01,630.075 1452.97,623.483 1454.93,616.874 1456.89,610.25 1458.85,603.612 1460.81,596.961 1462.77,590.298 1464.73,583.624 1466.69,576.941 1468.65,570.249 1470.61,563.549 1472.57,556.844 1474.53,550.133 1476.49,543.419 1478.46,536.702 1480.42,529.984 1482.38,523.266 1484.34,516.55 1486.3,509.836 1488.26,503.125 1490.22,496.421 1492.18,489.722 1494.14,483.032 1496.1,476.351 1498.06,469.681 1500.02,463.023 1501.98,456.379 1503.94,449.75 1505.9,443.137 1507.86,436.543 1509.82,429.968 1511.78,423.414 1513.74,416.882 1515.7,410.374 1517.66,403.892 1519.62,397.436 1521.58,391.009 1523.55,384.612 1525.51,378.247 1527.47,371.914 1529.43,365.616 1531.39,359.354 1533.35,353.13 1535.31,346.945 1537.27,340.801 1539.23,334.699 1541.19,328.641 1543.15,322.628 1545.11,316.662 1547.07,310.744 1549.03,304.876 1550.99,299.059 1552.95,293.296 1554.91,287.586 1556.87,281.933 1558.83,276.337 1560.79,270.799 1562.75,265.322 1564.71,259.906 1566.68,254.553 1568.64,249.265 1570.6,244.043 1572.56,238.888 1574.52,233.801 1576.48,228.784 1578.44,223.839 1580.4,218.966 1582.36,214.167 1584.32,209.442 1586.28,204.794 1588.24,200.224 1590.2,195.732 1592.16,191.32 1594.12,186.988 1596.08,182.739 1598.04,178.573 1600,174.491 1601.96,170.494 1603.92,166.583 1605.88,162.759 1607.84,159.024 1609.81,155.377 1611.77,151.82 1613.73,148.353 1615.69,144.978 1617.65,141.696 1619.61,138.506 1621.57,135.409 1623.53,132.407 1625.49,129.5 1627.45,126.688 1629.41,123.972 1631.37,121.353 1633.33,118.831 1635.29,116.406 1637.25,114.079 1639.21,111.851 1641.17,109.721 1643.13,107.69 1645.09,105.758 1647.05,103.926 1649.01,102.193 1650.97,100.56 1652.93,99.0266 1654.9,97.5932 1656.86,96.2599 1658.82,95.0265 1660.78,93.8931 1662.74,92.8595 1664.7,91.9258 1666.66,91.0916 1668.62,90.3569 1670.58,89.7214 1672.54,89.1849 1674.5,88.7472 1676.46,88.4078 1678.42,88.1664 1680.38,88.0227 1682.34,87.9763 1684.3,88.0266 1686.26,88.1732 1688.22,88.4156 1690.18,88.7533 1692.14,89.1856 1694.1,89.712 1696.06,90.3318 1698.03,91.0443 1699.99,91.849 1701.95,92.7449 1703.91,93.7315 1705.87,94.8079 1707.83,95.9733 1709.79,97.2269 1711.75,98.5678 1713.71,99.9953 1715.67,101.508 1717.63,103.106 1719.59,104.787 1721.55,106.552 1723.51,108.397 1725.47,110.324 1727.43,112.331 1729.39,114.416 1731.35,116.579 1733.31,118.819 1735.27,121.134 1737.23,123.523 1739.19,125.986 1741.16,128.521 1743.12,131.127 1745.08,133.803 1747.04,136.548 1749,139.361 1750.96,142.24 1752.92,145.184 1754.88,148.192 1756.84,151.263 1758.8,154.396 1760.76,157.589 1762.72,160.841 1764.68,164.151 1766.64,167.518 1768.6,170.941 1770.56,174.418 1772.52,177.948 1774.48,181.529 1776.44,185.162 1778.4,188.844 1780.36,192.574 1782.32,196.35 1784.28,200.173 1786.25,204.04 1788.21,207.95 1790.17,211.902 1792.13,215.896 1794.09,219.928 1796.05,223.999 1798.01,228.108 1799.97,232.252 1801.93,236.431 1803.89,240.644 1805.85,244.889 1807.81,249.166 1809.77,253.473 1811.73,257.809 1813.69,262.172 1815.65,266.563 1817.61,270.979 1819.57,275.42 1821.53,279.884 1823.49,284.371 1825.45,288.879 1827.41,293.407 1829.38,297.955 1831.34,302.52 1833.3,307.103 1835.26,311.702 1837.22,316.316 1839.18,320.944 1841.14,325.586 1843.1,330.239 1845.06,334.904 1847.02,339.579 1848.98,344.264 1850.94,348.957 1852.9,353.658 1854.86,358.366 1856.82,363.08 1858.78,367.798 1860.74,372.521 1862.7,377.247 1864.66,381.976 1866.62,386.707 1868.58,391.438 1870.54,396.17 1872.51,400.902 1874.47,405.632 1876.43,410.36 1878.39,415.086 1880.35,419.808 1882.31,424.526 1884.27,429.24 1886.23,433.948 1888.19,438.65 1890.15,443.346 1892.11,448.034 1894.07,452.715 1896.03,457.387 1897.99,462.051 1899.95,466.704 1901.91,471.348 1903.87,475.982 1905.83,480.604 1907.79,485.214 1909.75,489.813 1911.71,494.399 1913.67,498.972 1915.63,503.532 1917.6,508.078 1919.56,512.609 1921.52,517.126 1923.48,521.628 1925.44,526.114 1927.4,530.584 1929.36,535.038 1931.32,539.476 1933.28,543.897 1935.24,548.3 1937.2,552.686 1939.16,557.054 1941.12,561.404 1943.08,565.735 1945.04,570.048 1947,574.341 1948.96,578.616 1950.92,582.87 1952.88,587.106 1954.84,591.321 1956.8,595.516 1958.76,599.691 1960.73,603.845 1962.69,607.978 1964.65,612.09 1966.61,616.182 1968.57,620.252 1970.53,624.3 1972.49,628.327 1974.45,632.332 1976.41,636.316 1978.37,640.277 1980.33,644.217 1982.29,648.134 1984.25,652.029 1986.21,655.901 1988.17,659.751 1990.13,663.579 1992.09,667.384 1994.05,671.166 1996.01,674.926 1997.97,678.662 1999.93,682.376 2001.89,686.067 2003.86,689.735 2005.82,693.38 2007.78,697.002 2009.74,700.601 2011.7,704.177 2013.66,707.73 2015.62,711.26 2017.58,714.767 2019.54,718.25 2021.5,721.711 2023.46,725.149 2025.42,728.564 2027.38,731.956 2029.34,735.325 2031.3,738.671 2033.26,741.994 2035.22,745.294 2037.18,748.572 2039.14,751.826 2041.1,755.058 2043.06,758.268 2045.02,761.454 2046.98,764.619 2048.95,767.761 2050.91,770.88 2052.87,773.977 2054.83,777.052 2056.79,780.104 2058.75,783.135 2060.71,786.143 2062.67,789.129 2064.63,792.094 2066.59,795.037 2068.55,797.958 2070.51,800.857 2072.47,803.735 2074.43,806.591 2076.39,809.426 2078.35,812.24 2080.31,815.033 2082.27,817.805 2084.23,820.555 2086.19,823.285 2088.15,825.994 2090.11,828.683 2092.08,831.35 2094.04,833.998 2096,836.625 2097.96,839.232 2099.92,841.819 2101.88,844.386 2103.84,846.933 2105.8,849.46 2107.76,851.968 2109.72,854.456 2111.68,856.924 2113.64,859.374 2115.6,861.804 2117.56,864.215 2119.52,866.607 2121.48,868.981 2123.44,871.335 2125.4,873.672 2127.36,875.989 2129.32,878.289 2131.28,880.57 2133.24,882.833 2135.21,885.078 2137.17,887.305 2139.13,889.515 2141.09,891.707 2143.05,893.881 2145.01,896.038 2146.97,898.178 2148.93,900.301 2150.89,902.407 2152.85,904.496 2154.81,906.568 2156.77,908.624 2158.73,910.663 2160.69,912.686 2162.65,914.692 2164.61,916.682 2166.57,918.657 2168.53,920.615 2170.49,922.558 2172.45,924.485 2174.41,926.397 2176.37,928.293 2178.33,930.174 2180.3,932.04 2182.26,933.891 2184.22,935.727 2186.18,937.548 2188.14,939.354 2190.1,941.146 2192.06,942.923 2194.02,944.686 2195.98,946.435 2197.94,948.17 2199.9,949.891 2201.86,951.598 2203.82,953.292 2205.78,954.971 2207.74,956.638 2209.7,958.29 2211.66,959.93 2213.62,961.556 2215.58,963.17 2217.54,964.77 2219.5,966.358 2221.46,967.933 2223.43,969.495 2225.39,971.045 2227.35,972.583 2229.31,974.108 2231.27,975.621 2233.23,977.122 2235.19,978.611 2237.15,980.089 2239.11,981.554 2241.07,983.008 2243.03,984.451 2244.99,985.882 2246.95,987.301 2248.91,988.71 2250.87,990.107 2252.83,991.494 2254.79,992.869 2256.75,994.234 2258.71,995.588 2260.67,996.932 2262.63,998.265 2264.59,999.588 2266.56,1000.9 2268.52,1002.2 2270.48,1003.49 2272.44,1004.78 2274.4,1006.05 2276.36,1007.31 2278.32,1008.56 2280.28,1009.81 2282.24,1011.04 2284.2,1012.26 2286.16,1013.48 2288.12,1014.69 2290.08,1015.88 2292.04,1017.07 2294,1018.25 \"/>\n<path clip-path=\"url(#clip750)\" d=\"M345.96 198.898 L610.642 198.898 L610.642 95.2176 L345.96 95.2176  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip750)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"345.96,198.898 610.642,198.898 610.642,95.2176 345.96,95.2176 345.96,198.898 \"/>\n<polyline clip-path=\"url(#clip750)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"369.026,147.058 507.426,147.058 \"/>\n<path clip-path=\"url(#clip750)\" d=\"M558.363 132.44 L558.363 137.37 Q556.002 135.171 553.316 134.083 Q550.654 132.995 547.645 132.995 Q541.719 132.995 538.571 136.629 Q535.423 140.24 535.423 147.092 Q535.423 153.921 538.571 157.555 Q541.719 161.166 547.645 161.166 Q550.654 161.166 553.316 160.078 Q556.002 158.99 558.363 156.791 L558.363 161.676 Q555.909 163.342 553.154 164.176 Q550.423 165.009 547.367 165.009 Q539.52 165.009 535.006 160.217 Q530.493 155.402 530.493 147.092 Q530.493 138.759 535.006 133.967 Q539.52 129.153 547.367 129.153 Q550.469 129.153 553.201 129.986 Q555.955 130.796 558.363 132.44 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M562.344 138.412 L566.858 138.412 L574.96 160.171 L583.062 138.412 L587.576 138.412 L577.853 164.338 L572.066 164.338 L562.344 138.412 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /></svg>\n","category":"page"},{"location":"ne13/","page":"ne13.jl","title":"ne13.jl","text":"Plot of the heat capacity gradient against temperature:","category":"page"},{"location":"ne13/","page":"ne13.jl","title":"ne13.jl","text":"plot(T,dCv,label=\"dCv\")","category":"page"},{"location":"ne13/","page":"ne13.jl","title":"ne13.jl","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip780\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip780)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip781\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip780)\" d=\"M314.746 1486.45 L2352.76 1486.45 L2352.76 47.2441 L314.746 47.2441  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip782\">\n    <rect x=\"314\" y=\"47\" width=\"2039\" height=\"1440\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip782)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"532.806,1486.45 532.806,47.2441 \"/>\n<polyline clip-path=\"url(#clip782)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"933.76,1486.45 933.76,47.2441 \"/>\n<polyline clip-path=\"url(#clip782)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1334.71,1486.45 1334.71,47.2441 \"/>\n<polyline clip-path=\"url(#clip782)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1735.67,1486.45 1735.67,47.2441 \"/>\n<polyline clip-path=\"url(#clip782)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2136.62,1486.45 2136.62,47.2441 \"/>\n<polyline clip-path=\"url(#clip782)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"314.746,1451.38 2352.76,1451.38 \"/>\n<polyline clip-path=\"url(#clip782)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"314.746,1168 2352.76,1168 \"/>\n<polyline clip-path=\"url(#clip782)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"314.746,884.614 2352.76,884.614 \"/>\n<polyline clip-path=\"url(#clip782)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"314.746,601.233 2352.76,601.233 \"/>\n<polyline clip-path=\"url(#clip782)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"314.746,317.851 2352.76,317.851 \"/>\n<polyline clip-path=\"url(#clip780)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"314.746,1486.45 2352.76,1486.45 \"/>\n<polyline clip-path=\"url(#clip780)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"532.806,1486.45 532.806,1467.55 \"/>\n<polyline clip-path=\"url(#clip780)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"933.76,1486.45 933.76,1467.55 \"/>\n<polyline clip-path=\"url(#clip780)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1334.71,1486.45 1334.71,1467.55 \"/>\n<polyline clip-path=\"url(#clip780)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1735.67,1486.45 1735.67,1467.55 \"/>\n<polyline clip-path=\"url(#clip780)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2136.62,1486.45 2136.62,1467.55 \"/>\n<path clip-path=\"url(#clip780)\" d=\"M499.971 1514.29 L518.327 1514.29 L518.327 1518.22 L504.253 1518.22 L504.253 1526.7 Q505.272 1526.35 506.29 1526.19 Q507.309 1526 508.327 1526 Q514.114 1526 517.494 1529.17 Q520.874 1532.34 520.874 1537.76 Q520.874 1543.34 517.401 1546.44 Q513.929 1549.52 507.61 1549.52 Q505.434 1549.52 503.165 1549.15 Q500.92 1548.78 498.513 1548.04 L498.513 1543.34 Q500.596 1544.47 502.818 1545.03 Q505.04 1545.58 507.517 1545.58 Q511.522 1545.58 513.86 1543.48 Q516.198 1541.37 516.198 1537.76 Q516.198 1534.15 513.86 1532.04 Q511.522 1529.94 507.517 1529.94 Q505.642 1529.94 503.767 1530.35 Q501.915 1530.77 499.971 1531.65 L499.971 1514.29 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M530.087 1542.97 L534.971 1542.97 L534.971 1548.85 L530.087 1548.85 L530.087 1542.97 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M555.156 1517.37 Q551.545 1517.37 549.716 1520.93 Q547.91 1524.47 547.91 1531.6 Q547.91 1538.71 549.716 1542.27 Q551.545 1545.82 555.156 1545.82 Q558.79 1545.82 560.596 1542.27 Q562.424 1538.71 562.424 1531.6 Q562.424 1524.47 560.596 1520.93 Q558.79 1517.37 555.156 1517.37 M555.156 1513.66 Q560.966 1513.66 564.022 1518.27 Q567.1 1522.85 567.1 1531.6 Q567.1 1540.33 564.022 1544.94 Q560.966 1549.52 555.156 1549.52 Q549.346 1549.52 546.267 1544.94 Q543.211 1540.33 543.211 1531.6 Q543.211 1522.85 546.267 1518.27 Q549.346 1513.66 555.156 1513.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M900.079 1514.29 L922.301 1514.29 L922.301 1516.28 L909.755 1548.85 L904.871 1548.85 L916.676 1518.22 L900.079 1518.22 L900.079 1514.29 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M931.422 1542.97 L936.306 1542.97 L936.306 1548.85 L931.422 1548.85 L931.422 1542.97 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M946.537 1514.29 L964.894 1514.29 L964.894 1518.22 L950.82 1518.22 L950.82 1526.7 Q951.838 1526.35 952.857 1526.19 Q953.875 1526 954.894 1526 Q960.681 1526 964.06 1529.17 Q967.44 1532.34 967.44 1537.76 Q967.44 1543.34 963.968 1546.44 Q960.496 1549.52 954.176 1549.52 Q952 1549.52 949.732 1549.15 Q947.486 1548.78 945.079 1548.04 L945.079 1543.34 Q947.162 1544.47 949.385 1545.03 Q951.607 1545.58 954.084 1545.58 Q958.088 1545.58 960.426 1543.48 Q962.764 1541.37 962.764 1537.76 Q962.764 1534.15 960.426 1532.04 Q958.088 1529.94 954.084 1529.94 Q952.209 1529.94 950.334 1530.35 Q948.482 1530.77 946.537 1531.65 L946.537 1514.29 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M1286.79 1544.91 L1294.42 1544.91 L1294.42 1518.55 L1286.11 1520.21 L1286.11 1515.95 L1294.38 1514.29 L1299.05 1514.29 L1299.05 1544.91 L1306.69 1544.91 L1306.69 1548.85 L1286.79 1548.85 L1286.79 1544.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M1326.14 1517.37 Q1322.53 1517.37 1320.7 1520.93 Q1318.89 1524.47 1318.89 1531.6 Q1318.89 1538.71 1320.7 1542.27 Q1322.53 1545.82 1326.14 1545.82 Q1329.77 1545.82 1331.58 1542.27 Q1333.41 1538.71 1333.41 1531.6 Q1333.41 1524.47 1331.58 1520.93 Q1329.77 1517.37 1326.14 1517.37 M1326.14 1513.66 Q1331.95 1513.66 1335 1518.27 Q1338.08 1522.85 1338.08 1531.6 Q1338.08 1540.33 1335 1544.94 Q1331.95 1549.52 1326.14 1549.52 Q1320.33 1549.52 1317.25 1544.94 Q1314.19 1540.33 1314.19 1531.6 Q1314.19 1522.85 1317.25 1518.27 Q1320.33 1513.66 1326.14 1513.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M1346.3 1542.97 L1351.18 1542.97 L1351.18 1548.85 L1346.3 1548.85 L1346.3 1542.97 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M1371.37 1517.37 Q1367.76 1517.37 1365.93 1520.93 Q1364.12 1524.47 1364.12 1531.6 Q1364.12 1538.71 1365.93 1542.27 Q1367.76 1545.82 1371.37 1545.82 Q1375 1545.82 1376.81 1542.27 Q1378.64 1538.71 1378.64 1531.6 Q1378.64 1524.47 1376.81 1520.93 Q1375 1517.37 1371.37 1517.37 M1371.37 1513.66 Q1377.18 1513.66 1380.23 1518.27 Q1383.31 1522.85 1383.31 1531.6 Q1383.31 1540.33 1380.23 1544.94 Q1377.18 1549.52 1371.37 1549.52 Q1365.56 1549.52 1362.48 1544.94 Q1359.42 1540.33 1359.42 1531.6 Q1359.42 1522.85 1362.48 1518.27 Q1365.56 1513.66 1371.37 1513.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M1688.24 1544.91 L1695.87 1544.91 L1695.87 1518.55 L1687.56 1520.21 L1687.56 1515.95 L1695.83 1514.29 L1700.5 1514.29 L1700.5 1544.91 L1708.14 1544.91 L1708.14 1548.85 L1688.24 1548.85 L1688.24 1544.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M1721.62 1544.91 L1737.93 1544.91 L1737.93 1548.85 L1715.99 1548.85 L1715.99 1544.91 Q1718.65 1542.16 1723.24 1537.53 Q1727.84 1532.88 1729.02 1531.53 Q1731.27 1529.01 1732.15 1527.27 Q1733.05 1525.51 1733.05 1523.82 Q1733.05 1521.07 1731.11 1519.33 Q1729.18 1517.6 1726.08 1517.6 Q1723.88 1517.6 1721.43 1518.36 Q1719 1519.13 1716.22 1520.68 L1716.22 1515.95 Q1719.05 1514.82 1721.5 1514.24 Q1723.95 1513.66 1725.99 1513.66 Q1731.36 1513.66 1734.56 1516.35 Q1737.75 1519.03 1737.75 1523.52 Q1737.75 1525.65 1736.94 1527.57 Q1736.15 1529.47 1734.05 1532.07 Q1733.47 1532.74 1730.37 1535.95 Q1727.26 1539.15 1721.62 1544.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M1747.75 1542.97 L1752.63 1542.97 L1752.63 1548.85 L1747.75 1548.85 L1747.75 1542.97 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M1762.87 1514.29 L1781.22 1514.29 L1781.22 1518.22 L1767.15 1518.22 L1767.15 1526.7 Q1768.17 1526.35 1769.18 1526.19 Q1770.2 1526 1771.22 1526 Q1777.01 1526 1780.39 1529.17 Q1783.77 1532.34 1783.77 1537.76 Q1783.77 1543.34 1780.3 1546.44 Q1776.82 1549.52 1770.5 1549.52 Q1768.33 1549.52 1766.06 1549.15 Q1763.81 1548.78 1761.41 1548.04 L1761.41 1543.34 Q1763.49 1544.47 1765.71 1545.03 Q1767.93 1545.58 1770.41 1545.58 Q1774.42 1545.58 1776.75 1543.48 Q1779.09 1541.37 1779.09 1537.76 Q1779.09 1534.15 1776.75 1532.04 Q1774.42 1529.94 1770.41 1529.94 Q1768.54 1529.94 1766.66 1530.35 Q1764.81 1530.77 1762.87 1531.65 L1762.87 1514.29 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M2088.69 1544.91 L2096.33 1544.91 L2096.33 1518.55 L2088.02 1520.21 L2088.02 1515.95 L2096.28 1514.29 L2100.96 1514.29 L2100.96 1544.91 L2108.6 1544.91 L2108.6 1548.85 L2088.69 1548.85 L2088.69 1544.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M2118.09 1514.29 L2136.45 1514.29 L2136.45 1518.22 L2122.37 1518.22 L2122.37 1526.7 Q2123.39 1526.35 2124.41 1526.19 Q2125.43 1526 2126.45 1526 Q2132.23 1526 2135.61 1529.17 Q2138.99 1532.34 2138.99 1537.76 Q2138.99 1543.34 2135.52 1546.44 Q2132.05 1549.52 2125.73 1549.52 Q2123.55 1549.52 2121.28 1549.15 Q2119.04 1548.78 2116.63 1548.04 L2116.63 1543.34 Q2118.71 1544.47 2120.94 1545.03 Q2123.16 1545.58 2125.64 1545.58 Q2129.64 1545.58 2131.98 1543.48 Q2134.32 1541.37 2134.32 1537.76 Q2134.32 1534.15 2131.98 1532.04 Q2129.64 1529.94 2125.64 1529.94 Q2123.76 1529.94 2121.89 1530.35 Q2120.03 1530.77 2118.09 1531.65 L2118.09 1514.29 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M2148.21 1542.97 L2153.09 1542.97 L2153.09 1548.85 L2148.21 1548.85 L2148.21 1542.97 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M2173.27 1517.37 Q2169.66 1517.37 2167.83 1520.93 Q2166.03 1524.47 2166.03 1531.6 Q2166.03 1538.71 2167.83 1542.27 Q2169.66 1545.82 2173.27 1545.82 Q2176.91 1545.82 2178.71 1542.27 Q2180.54 1538.71 2180.54 1531.6 Q2180.54 1524.47 2178.71 1520.93 Q2176.91 1517.37 2173.27 1517.37 M2173.27 1513.66 Q2179.08 1513.66 2182.14 1518.27 Q2185.22 1522.85 2185.22 1531.6 Q2185.22 1540.33 2182.14 1544.94 Q2179.08 1549.52 2173.27 1549.52 Q2167.46 1549.52 2164.39 1544.94 Q2161.33 1540.33 2161.33 1531.6 Q2161.33 1522.85 2164.39 1518.27 Q2167.46 1513.66 2173.27 1513.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip780)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"314.746,1486.45 314.746,47.2441 \"/>\n<polyline clip-path=\"url(#clip780)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"314.746,1451.38 333.643,1451.38 \"/>\n<polyline clip-path=\"url(#clip780)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"314.746,1168 333.643,1168 \"/>\n<polyline clip-path=\"url(#clip780)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"314.746,884.614 333.643,884.614 \"/>\n<polyline clip-path=\"url(#clip780)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"314.746,601.233 333.643,601.233 \"/>\n<polyline clip-path=\"url(#clip780)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"314.746,317.851 333.643,317.851 \"/>\n<path clip-path=\"url(#clip780)\" d=\"M50.9921 1451.83 L80.6679 1451.83 L80.6679 1455.76 L50.9921 1455.76 L50.9921 1451.83 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M100.76 1437.18 Q97.1493 1437.18 95.3206 1440.74 Q93.515 1444.28 93.515 1451.41 Q93.515 1458.52 95.3206 1462.08 Q97.1493 1465.63 100.76 1465.63 Q104.395 1465.63 106.2 1462.08 Q108.029 1458.52 108.029 1451.41 Q108.029 1444.28 106.2 1440.74 Q104.395 1437.18 100.76 1437.18 M100.76 1433.47 Q106.571 1433.47 109.626 1438.08 Q112.705 1442.66 112.705 1451.41 Q112.705 1460.14 109.626 1464.75 Q106.571 1469.33 100.76 1469.33 Q94.9502 1469.33 91.8715 1464.75 Q88.816 1460.14 88.816 1451.41 Q88.816 1442.66 91.8715 1438.08 Q94.9502 1433.47 100.76 1433.47 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M120.922 1462.78 L125.807 1462.78 L125.807 1468.66 L120.922 1468.66 L120.922 1462.78 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M145.992 1437.18 Q142.381 1437.18 140.552 1440.74 Q138.746 1444.28 138.746 1451.41 Q138.746 1458.52 140.552 1462.08 Q142.381 1465.63 145.992 1465.63 Q149.626 1465.63 151.431 1462.08 Q153.26 1458.52 153.26 1451.41 Q153.26 1444.28 151.431 1440.74 Q149.626 1437.18 145.992 1437.18 M145.992 1433.47 Q151.802 1433.47 154.857 1438.08 Q157.936 1442.66 157.936 1451.41 Q157.936 1460.14 154.857 1464.75 Q151.802 1469.33 145.992 1469.33 Q140.181 1469.33 137.103 1464.75 Q134.047 1460.14 134.047 1451.41 Q134.047 1442.66 137.103 1438.08 Q140.181 1433.47 145.992 1433.47 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M176.153 1437.18 Q172.542 1437.18 170.714 1440.74 Q168.908 1444.28 168.908 1451.41 Q168.908 1458.52 170.714 1462.08 Q172.542 1465.63 176.153 1465.63 Q179.788 1465.63 181.593 1462.08 Q183.422 1458.52 183.422 1451.41 Q183.422 1444.28 181.593 1440.74 Q179.788 1437.18 176.153 1437.18 M176.153 1433.47 Q181.964 1433.47 185.019 1438.08 Q188.098 1442.66 188.098 1451.41 Q188.098 1460.14 185.019 1464.75 Q181.964 1469.33 176.153 1469.33 Q170.343 1469.33 167.265 1464.75 Q164.209 1460.14 164.209 1451.41 Q164.209 1442.66 167.265 1438.08 Q170.343 1433.47 176.153 1433.47 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M206.315 1437.18 Q202.704 1437.18 200.876 1440.74 Q199.07 1444.28 199.07 1451.41 Q199.07 1458.52 200.876 1462.08 Q202.704 1465.63 206.315 1465.63 Q209.95 1465.63 211.755 1462.08 Q213.584 1458.52 213.584 1451.41 Q213.584 1444.28 211.755 1440.74 Q209.95 1437.18 206.315 1437.18 M206.315 1433.47 Q212.126 1433.47 215.181 1438.08 Q218.26 1442.66 218.26 1451.41 Q218.26 1460.14 215.181 1464.75 Q212.126 1469.33 206.315 1469.33 Q200.505 1469.33 197.427 1464.75 Q194.371 1460.14 194.371 1451.41 Q194.371 1442.66 197.427 1438.08 Q200.505 1433.47 206.315 1433.47 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M236.477 1437.18 Q232.866 1437.18 231.037 1440.74 Q229.232 1444.28 229.232 1451.41 Q229.232 1458.52 231.037 1462.08 Q232.866 1465.63 236.477 1465.63 Q240.111 1465.63 241.917 1462.08 Q243.746 1458.52 243.746 1451.41 Q243.746 1444.28 241.917 1440.74 Q240.111 1437.18 236.477 1437.18 M236.477 1433.47 Q242.287 1433.47 245.343 1438.08 Q248.422 1442.66 248.422 1451.41 Q248.422 1460.14 245.343 1464.75 Q242.287 1469.33 236.477 1469.33 Q230.667 1469.33 227.588 1464.75 Q224.533 1460.14 224.533 1451.41 Q224.533 1442.66 227.588 1438.08 Q230.667 1433.47 236.477 1433.47 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M267.218 1449.51 Q264.07 1449.51 262.218 1451.67 Q260.389 1453.82 260.389 1457.57 Q260.389 1461.3 262.218 1463.47 Q264.07 1465.63 267.218 1465.63 Q270.366 1465.63 272.195 1463.47 Q274.046 1461.3 274.046 1457.57 Q274.046 1453.82 272.195 1451.67 Q270.366 1449.51 267.218 1449.51 M276.5 1434.86 L276.5 1439.12 Q274.741 1438.29 272.935 1437.85 Q271.153 1437.41 269.394 1437.41 Q264.764 1437.41 262.31 1440.53 Q259.88 1443.66 259.533 1449.98 Q260.898 1447.96 262.959 1446.9 Q265.019 1445.81 267.496 1445.81 Q272.704 1445.81 275.713 1448.98 Q278.746 1452.13 278.746 1457.57 Q278.746 1462.89 275.597 1466.11 Q272.449 1469.33 267.218 1469.33 Q261.222 1469.33 258.051 1464.75 Q254.88 1460.14 254.88 1451.41 Q254.88 1443.22 258.769 1438.36 Q262.658 1433.47 269.209 1433.47 Q270.968 1433.47 272.75 1433.82 Q274.556 1434.17 276.5 1434.86 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M51.8023 1168.45 L81.4781 1168.45 L81.4781 1172.38 L51.8023 1172.38 L51.8023 1168.45 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M101.571 1153.79 Q97.9595 1153.79 96.1308 1157.36 Q94.3252 1160.9 94.3252 1168.03 Q94.3252 1175.14 96.1308 1178.7 Q97.9595 1182.24 101.571 1182.24 Q105.205 1182.24 107.01 1178.7 Q108.839 1175.14 108.839 1168.03 Q108.839 1160.9 107.01 1157.36 Q105.205 1153.79 101.571 1153.79 M101.571 1150.09 Q107.381 1150.09 110.436 1154.7 Q113.515 1159.28 113.515 1168.03 Q113.515 1176.76 110.436 1181.36 Q107.381 1185.95 101.571 1185.95 Q95.7604 1185.95 92.6817 1181.36 Q89.6262 1176.76 89.6262 1168.03 Q89.6262 1159.28 92.6817 1154.7 Q95.7604 1150.09 101.571 1150.09 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M121.732 1179.4 L126.617 1179.4 L126.617 1185.28 L121.732 1185.28 L121.732 1179.4 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M146.802 1153.79 Q143.191 1153.79 141.362 1157.36 Q139.556 1160.9 139.556 1168.03 Q139.556 1175.14 141.362 1178.7 Q143.191 1182.24 146.802 1182.24 Q150.436 1182.24 152.242 1178.7 Q154.07 1175.14 154.07 1168.03 Q154.07 1160.9 152.242 1157.36 Q150.436 1153.79 146.802 1153.79 M146.802 1150.09 Q152.612 1150.09 155.667 1154.7 Q158.746 1159.28 158.746 1168.03 Q158.746 1176.76 155.667 1181.36 Q152.612 1185.95 146.802 1185.95 Q140.992 1185.95 137.913 1181.36 Q134.857 1176.76 134.857 1168.03 Q134.857 1159.28 137.913 1154.7 Q140.992 1150.09 146.802 1150.09 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M176.964 1153.79 Q173.353 1153.79 171.524 1157.36 Q169.718 1160.9 169.718 1168.03 Q169.718 1175.14 171.524 1178.7 Q173.353 1182.24 176.964 1182.24 Q180.598 1182.24 182.403 1178.7 Q184.232 1175.14 184.232 1168.03 Q184.232 1160.9 182.403 1157.36 Q180.598 1153.79 176.964 1153.79 M176.964 1150.09 Q182.774 1150.09 185.829 1154.7 Q188.908 1159.28 188.908 1168.03 Q188.908 1176.76 185.829 1181.36 Q182.774 1185.95 176.964 1185.95 Q171.154 1185.95 168.075 1181.36 Q165.019 1176.76 165.019 1168.03 Q165.019 1159.28 168.075 1154.7 Q171.154 1150.09 176.964 1150.09 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M207.126 1153.79 Q203.514 1153.79 201.686 1157.36 Q199.88 1160.9 199.88 1168.03 Q199.88 1175.14 201.686 1178.7 Q203.514 1182.24 207.126 1182.24 Q210.76 1182.24 212.565 1178.7 Q214.394 1175.14 214.394 1168.03 Q214.394 1160.9 212.565 1157.36 Q210.76 1153.79 207.126 1153.79 M207.126 1150.09 Q212.936 1150.09 215.991 1154.7 Q219.07 1159.28 219.07 1168.03 Q219.07 1176.76 215.991 1181.36 Q212.936 1185.95 207.126 1185.95 Q201.315 1185.95 198.237 1181.36 Q195.181 1176.76 195.181 1168.03 Q195.181 1159.28 198.237 1154.7 Q201.315 1150.09 207.126 1150.09 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M237.287 1153.79 Q233.676 1153.79 231.848 1157.36 Q230.042 1160.9 230.042 1168.03 Q230.042 1175.14 231.848 1178.7 Q233.676 1182.24 237.287 1182.24 Q240.922 1182.24 242.727 1178.7 Q244.556 1175.14 244.556 1168.03 Q244.556 1160.9 242.727 1157.36 Q240.922 1153.79 237.287 1153.79 M237.287 1150.09 Q243.098 1150.09 246.153 1154.7 Q249.232 1159.28 249.232 1168.03 Q249.232 1176.76 246.153 1181.36 Q243.098 1185.95 237.287 1185.95 Q231.477 1185.95 228.399 1181.36 Q225.343 1176.76 225.343 1168.03 Q225.343 1159.28 228.399 1154.7 Q231.477 1150.09 237.287 1150.09 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M271.616 1166.64 Q274.972 1167.36 276.847 1169.63 Q278.746 1171.9 278.746 1175.23 Q278.746 1180.35 275.227 1183.15 Q271.709 1185.95 265.227 1185.95 Q263.051 1185.95 260.736 1185.51 Q258.445 1185.09 255.991 1184.23 L255.991 1179.72 Q257.935 1180.85 260.25 1181.43 Q262.565 1182.01 265.088 1182.01 Q269.486 1182.01 271.778 1180.28 Q274.093 1178.54 274.093 1175.23 Q274.093 1172.17 271.94 1170.46 Q269.81 1168.73 265.991 1168.73 L261.963 1168.73 L261.963 1164.88 L266.176 1164.88 Q269.625 1164.88 271.454 1163.52 Q273.283 1162.13 273.283 1159.54 Q273.283 1156.87 271.384 1155.46 Q269.509 1154.03 265.991 1154.03 Q264.07 1154.03 261.871 1154.44 Q259.672 1154.86 257.033 1155.74 L257.033 1151.57 Q259.695 1150.83 262.01 1150.46 Q264.347 1150.09 266.408 1150.09 Q271.732 1150.09 274.834 1152.52 Q277.935 1154.93 277.935 1159.05 Q277.935 1161.92 276.292 1163.91 Q274.648 1165.88 271.616 1166.64 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M100.922 870.413 Q97.3113 870.413 95.4826 873.978 Q93.6771 877.52 93.6771 884.649 Q93.6771 891.756 95.4826 895.32 Q97.3113 898.862 100.922 898.862 Q104.557 898.862 106.362 895.32 Q108.191 891.756 108.191 884.649 Q108.191 877.52 106.362 873.978 Q104.557 870.413 100.922 870.413 M100.922 866.709 Q106.733 866.709 109.788 871.316 Q112.867 875.899 112.867 884.649 Q112.867 893.376 109.788 897.982 Q106.733 902.566 100.922 902.566 Q95.1123 902.566 92.0336 897.982 Q88.978 893.376 88.978 884.649 Q88.978 875.899 92.0336 871.316 Q95.1123 866.709 100.922 866.709 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M121.084 896.015 L125.969 896.015 L125.969 901.894 L121.084 901.894 L121.084 896.015 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M146.154 870.413 Q142.543 870.413 140.714 873.978 Q138.908 877.52 138.908 884.649 Q138.908 891.756 140.714 895.32 Q142.543 898.862 146.154 898.862 Q149.788 898.862 151.593 895.32 Q153.422 891.756 153.422 884.649 Q153.422 877.52 151.593 873.978 Q149.788 870.413 146.154 870.413 M146.154 866.709 Q151.964 866.709 155.019 871.316 Q158.098 875.899 158.098 884.649 Q158.098 893.376 155.019 897.982 Q151.964 902.566 146.154 902.566 Q140.343 902.566 137.265 897.982 Q134.209 893.376 134.209 884.649 Q134.209 875.899 137.265 871.316 Q140.343 866.709 146.154 866.709 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M176.316 870.413 Q172.704 870.413 170.876 873.978 Q169.07 877.52 169.07 884.649 Q169.07 891.756 170.876 895.32 Q172.704 898.862 176.316 898.862 Q179.95 898.862 181.755 895.32 Q183.584 891.756 183.584 884.649 Q183.584 877.52 181.755 873.978 Q179.95 870.413 176.316 870.413 M176.316 866.709 Q182.126 866.709 185.181 871.316 Q188.26 875.899 188.26 884.649 Q188.26 893.376 185.181 897.982 Q182.126 902.566 176.316 902.566 Q170.505 902.566 167.427 897.982 Q164.371 893.376 164.371 884.649 Q164.371 875.899 167.427 871.316 Q170.505 866.709 176.316 866.709 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M206.477 870.413 Q202.866 870.413 201.038 873.978 Q199.232 877.52 199.232 884.649 Q199.232 891.756 201.038 895.32 Q202.866 898.862 206.477 898.862 Q210.112 898.862 211.917 895.32 Q213.746 891.756 213.746 884.649 Q213.746 877.52 211.917 873.978 Q210.112 870.413 206.477 870.413 M206.477 866.709 Q212.288 866.709 215.343 871.316 Q218.422 875.899 218.422 884.649 Q218.422 893.376 215.343 897.982 Q212.288 902.566 206.477 902.566 Q200.667 902.566 197.589 897.982 Q194.533 893.376 194.533 884.649 Q194.533 875.899 197.589 871.316 Q200.667 866.709 206.477 866.709 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M236.639 870.413 Q233.028 870.413 231.199 873.978 Q229.394 877.52 229.394 884.649 Q229.394 891.756 231.199 895.32 Q233.028 898.862 236.639 898.862 Q240.274 898.862 242.079 895.32 Q243.908 891.756 243.908 884.649 Q243.908 877.52 242.079 873.978 Q240.274 870.413 236.639 870.413 M236.639 866.709 Q242.449 866.709 245.505 871.316 Q248.584 875.899 248.584 884.649 Q248.584 893.376 245.505 897.982 Q242.449 902.566 236.639 902.566 Q230.829 902.566 227.75 897.982 Q224.695 893.376 224.695 884.649 Q224.695 875.899 227.75 871.316 Q230.829 866.709 236.639 866.709 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M266.801 870.413 Q263.19 870.413 261.361 873.978 Q259.556 877.52 259.556 884.649 Q259.556 891.756 261.361 895.32 Q263.19 898.862 266.801 898.862 Q270.435 898.862 272.241 895.32 Q274.07 891.756 274.07 884.649 Q274.07 877.52 272.241 873.978 Q270.435 870.413 266.801 870.413 M266.801 866.709 Q272.611 866.709 275.667 871.316 Q278.746 875.899 278.746 884.649 Q278.746 893.376 275.667 897.982 Q272.611 902.566 266.801 902.566 Q260.991 902.566 257.912 897.982 Q254.857 893.376 254.857 884.649 Q254.857 875.899 257.912 871.316 Q260.991 866.709 266.801 866.709 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M101.571 587.032 Q97.9595 587.032 96.1308 590.596 Q94.3252 594.138 94.3252 601.268 Q94.3252 608.374 96.1308 611.939 Q97.9595 615.481 101.571 615.481 Q105.205 615.481 107.01 611.939 Q108.839 608.374 108.839 601.268 Q108.839 594.138 107.01 590.596 Q105.205 587.032 101.571 587.032 M101.571 583.328 Q107.381 583.328 110.436 587.934 Q113.515 592.518 113.515 601.268 Q113.515 609.994 110.436 614.601 Q107.381 619.184 101.571 619.184 Q95.7604 619.184 92.6817 614.601 Q89.6262 609.994 89.6262 601.268 Q89.6262 592.518 92.6817 587.934 Q95.7604 583.328 101.571 583.328 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M121.732 612.633 L126.617 612.633 L126.617 618.513 L121.732 618.513 L121.732 612.633 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M146.802 587.032 Q143.191 587.032 141.362 590.596 Q139.556 594.138 139.556 601.268 Q139.556 608.374 141.362 611.939 Q143.191 615.481 146.802 615.481 Q150.436 615.481 152.242 611.939 Q154.07 608.374 154.07 601.268 Q154.07 594.138 152.242 590.596 Q150.436 587.032 146.802 587.032 M146.802 583.328 Q152.612 583.328 155.667 587.934 Q158.746 592.518 158.746 601.268 Q158.746 609.994 155.667 614.601 Q152.612 619.184 146.802 619.184 Q140.992 619.184 137.913 614.601 Q134.857 609.994 134.857 601.268 Q134.857 592.518 137.913 587.934 Q140.992 583.328 146.802 583.328 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M176.964 587.032 Q173.353 587.032 171.524 590.596 Q169.718 594.138 169.718 601.268 Q169.718 608.374 171.524 611.939 Q173.353 615.481 176.964 615.481 Q180.598 615.481 182.403 611.939 Q184.232 608.374 184.232 601.268 Q184.232 594.138 182.403 590.596 Q180.598 587.032 176.964 587.032 M176.964 583.328 Q182.774 583.328 185.829 587.934 Q188.908 592.518 188.908 601.268 Q188.908 609.994 185.829 614.601 Q182.774 619.184 176.964 619.184 Q171.154 619.184 168.075 614.601 Q165.019 609.994 165.019 601.268 Q165.019 592.518 168.075 587.934 Q171.154 583.328 176.964 583.328 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M207.126 587.032 Q203.514 587.032 201.686 590.596 Q199.88 594.138 199.88 601.268 Q199.88 608.374 201.686 611.939 Q203.514 615.481 207.126 615.481 Q210.76 615.481 212.565 611.939 Q214.394 608.374 214.394 601.268 Q214.394 594.138 212.565 590.596 Q210.76 587.032 207.126 587.032 M207.126 583.328 Q212.936 583.328 215.991 587.934 Q219.07 592.518 219.07 601.268 Q219.07 609.994 215.991 614.601 Q212.936 619.184 207.126 619.184 Q201.315 619.184 198.237 614.601 Q195.181 609.994 195.181 601.268 Q195.181 592.518 198.237 587.934 Q201.315 583.328 207.126 583.328 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M237.287 587.032 Q233.676 587.032 231.848 590.596 Q230.042 594.138 230.042 601.268 Q230.042 608.374 231.848 611.939 Q233.676 615.481 237.287 615.481 Q240.922 615.481 242.727 611.939 Q244.556 608.374 244.556 601.268 Q244.556 594.138 242.727 590.596 Q240.922 587.032 237.287 587.032 M237.287 583.328 Q243.098 583.328 246.153 587.934 Q249.232 592.518 249.232 601.268 Q249.232 609.994 246.153 614.601 Q243.098 619.184 237.287 619.184 Q231.477 619.184 228.399 614.601 Q225.343 609.994 225.343 601.268 Q225.343 592.518 228.399 587.934 Q231.477 583.328 237.287 583.328 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M271.616 599.879 Q274.972 600.596 276.847 602.865 Q278.746 605.133 278.746 608.467 Q278.746 613.582 275.227 616.383 Q271.709 619.184 265.227 619.184 Q263.051 619.184 260.736 618.744 Q258.445 618.328 255.991 617.471 L255.991 612.957 Q257.935 614.092 260.25 614.67 Q262.565 615.249 265.088 615.249 Q269.486 615.249 271.778 613.513 Q274.093 611.777 274.093 608.467 Q274.093 605.411 271.94 603.698 Q269.81 601.962 265.991 601.962 L261.963 601.962 L261.963 598.12 L266.176 598.12 Q269.625 598.12 271.454 596.754 Q273.283 595.365 273.283 592.772 Q273.283 590.11 271.384 588.698 Q269.509 587.263 265.991 587.263 Q264.07 587.263 261.871 587.68 Q259.672 588.096 257.033 588.976 L257.033 584.809 Q259.695 584.069 262.01 583.698 Q264.347 583.328 266.408 583.328 Q271.732 583.328 274.834 585.758 Q277.935 588.166 277.935 592.286 Q277.935 595.157 276.292 597.147 Q274.648 599.115 271.616 599.879 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M100.76 303.65 Q97.1493 303.65 95.3206 307.215 Q93.515 310.757 93.515 317.886 Q93.515 324.993 95.3206 328.557 Q97.1493 332.099 100.76 332.099 Q104.395 332.099 106.2 328.557 Q108.029 324.993 108.029 317.886 Q108.029 310.757 106.2 307.215 Q104.395 303.65 100.76 303.65 M100.76 299.946 Q106.571 299.946 109.626 304.553 Q112.705 309.136 112.705 317.886 Q112.705 326.613 109.626 331.219 Q106.571 335.803 100.76 335.803 Q94.9502 335.803 91.8715 331.219 Q88.816 326.613 88.816 317.886 Q88.816 309.136 91.8715 304.553 Q94.9502 299.946 100.76 299.946 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M120.922 329.252 L125.807 329.252 L125.807 335.131 L120.922 335.131 L120.922 329.252 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M145.992 303.65 Q142.381 303.65 140.552 307.215 Q138.746 310.757 138.746 317.886 Q138.746 324.993 140.552 328.557 Q142.381 332.099 145.992 332.099 Q149.626 332.099 151.431 328.557 Q153.26 324.993 153.26 317.886 Q153.26 310.757 151.431 307.215 Q149.626 303.65 145.992 303.65 M145.992 299.946 Q151.802 299.946 154.857 304.553 Q157.936 309.136 157.936 317.886 Q157.936 326.613 154.857 331.219 Q151.802 335.803 145.992 335.803 Q140.181 335.803 137.103 331.219 Q134.047 326.613 134.047 317.886 Q134.047 309.136 137.103 304.553 Q140.181 299.946 145.992 299.946 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M176.153 303.65 Q172.542 303.65 170.714 307.215 Q168.908 310.757 168.908 317.886 Q168.908 324.993 170.714 328.557 Q172.542 332.099 176.153 332.099 Q179.788 332.099 181.593 328.557 Q183.422 324.993 183.422 317.886 Q183.422 310.757 181.593 307.215 Q179.788 303.65 176.153 303.65 M176.153 299.946 Q181.964 299.946 185.019 304.553 Q188.098 309.136 188.098 317.886 Q188.098 326.613 185.019 331.219 Q181.964 335.803 176.153 335.803 Q170.343 335.803 167.265 331.219 Q164.209 326.613 164.209 317.886 Q164.209 309.136 167.265 304.553 Q170.343 299.946 176.153 299.946 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M206.315 303.65 Q202.704 303.65 200.876 307.215 Q199.07 310.757 199.07 317.886 Q199.07 324.993 200.876 328.557 Q202.704 332.099 206.315 332.099 Q209.95 332.099 211.755 328.557 Q213.584 324.993 213.584 317.886 Q213.584 310.757 211.755 307.215 Q209.95 303.65 206.315 303.65 M206.315 299.946 Q212.126 299.946 215.181 304.553 Q218.26 309.136 218.26 317.886 Q218.26 326.613 215.181 331.219 Q212.126 335.803 206.315 335.803 Q200.505 335.803 197.427 331.219 Q194.371 326.613 194.371 317.886 Q194.371 309.136 197.427 304.553 Q200.505 299.946 206.315 299.946 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M236.477 303.65 Q232.866 303.65 231.037 307.215 Q229.232 310.757 229.232 317.886 Q229.232 324.993 231.037 328.557 Q232.866 332.099 236.477 332.099 Q240.111 332.099 241.917 328.557 Q243.746 324.993 243.746 317.886 Q243.746 310.757 241.917 307.215 Q240.111 303.65 236.477 303.65 M236.477 299.946 Q242.287 299.946 245.343 304.553 Q248.422 309.136 248.422 317.886 Q248.422 326.613 245.343 331.219 Q242.287 335.803 236.477 335.803 Q230.667 335.803 227.588 331.219 Q224.533 326.613 224.533 317.886 Q224.533 309.136 227.588 304.553 Q230.667 299.946 236.477 299.946 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M267.218 315.988 Q264.07 315.988 262.218 318.141 Q260.389 320.294 260.389 324.043 Q260.389 327.77 262.218 329.946 Q264.07 332.099 267.218 332.099 Q270.366 332.099 272.195 329.946 Q274.046 327.77 274.046 324.043 Q274.046 320.294 272.195 318.141 Q270.366 315.988 267.218 315.988 M276.5 301.335 L276.5 305.595 Q274.741 304.761 272.935 304.321 Q271.153 303.882 269.394 303.882 Q264.764 303.882 262.31 307.007 Q259.88 310.132 259.533 316.451 Q260.898 314.437 262.959 313.372 Q265.019 312.284 267.496 312.284 Q272.704 312.284 275.713 315.456 Q278.746 318.604 278.746 324.043 Q278.746 329.368 275.597 332.585 Q272.449 335.803 267.218 335.803 Q261.222 335.803 258.051 331.219 Q254.88 326.613 254.88 317.886 Q254.88 309.692 258.769 304.831 Q262.658 299.946 269.209 299.946 Q270.968 299.946 272.75 300.294 Q274.556 300.641 276.5 301.335 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip782)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"372.425,865.207 374.35,864.996 376.274,864.784 378.199,864.572 380.123,864.36 382.048,864.148 383.973,863.936 385.897,863.724 387.822,863.512 389.746,863.301 391.671,863.09 393.595,862.879 395.52,862.669 397.445,862.459 399.369,862.25 401.294,862.041 403.218,861.833 405.143,861.626 407.067,861.42 408.992,861.214 410.917,861.009 412.841,860.805 414.766,860.602 416.69,860.4 418.615,860.199 420.539,860 422.464,859.801 424.389,859.603 426.313,859.407 428.238,859.212 430.162,859.018 432.087,858.826 434.012,858.635 435.936,858.446 437.861,858.257 439.785,858.071 441.71,857.886 443.634,857.702 445.559,857.52 447.484,857.34 449.408,857.161 451.333,856.985 453.257,856.809 455.182,856.636 457.106,856.464 459.031,856.294 460.956,856.126 462.88,855.96 464.805,855.796 466.729,855.633 468.654,855.473 470.578,855.314 472.503,855.158 474.428,855.003 476.352,854.85 478.277,854.7 480.201,854.551 482.126,854.405 484.05,854.26 485.975,854.118 487.9,853.977 489.824,853.839 491.749,853.703 493.673,853.569 495.598,853.437 497.523,853.307 499.447,853.18 501.372,853.054 503.296,852.931 505.221,852.809 507.145,852.69 509.07,852.573 510.995,852.458 512.919,852.346 514.844,852.235 516.768,852.126 518.693,852.02 520.617,851.916 522.542,851.814 524.467,851.714 526.391,851.616 528.316,851.52 530.24,851.426 532.165,851.334 534.089,851.244 536.014,851.156 537.939,851.071 539.863,850.987 541.788,850.905 543.712,850.826 545.637,850.748 547.561,850.672 549.486,850.598 551.411,850.526 553.335,850.455 555.26,850.387 557.184,850.32 559.109,850.256 561.034,850.192 562.958,850.131 564.883,850.072 566.807,850.014 568.732,849.957 570.656,849.903 572.581,849.85 574.506,849.798 576.43,849.748 578.355,849.7 580.279,849.653 582.204,849.608 584.128,849.564 586.053,849.521 587.978,849.48 589.902,849.44 591.827,849.401 593.751,849.363 595.676,849.327 597.6,849.292 599.525,849.258 601.45,849.225 603.374,849.193 605.299,849.163 607.223,849.133 609.148,849.104 611.072,849.076 612.997,849.049 614.922,849.023 616.846,848.997 618.771,848.972 620.695,848.948 622.62,848.925 624.545,848.902 626.469,848.88 628.394,848.859 630.318,848.837 632.243,848.817 634.167,848.796 636.092,848.777 638.017,848.757 639.941,848.738 641.866,848.719 643.79,848.7 645.715,848.681 647.639,848.663 649.564,848.644 651.489,848.626 653.413,848.607 655.338,848.589 657.262,848.57 659.187,848.551 661.111,848.532 663.036,848.513 664.961,848.494 666.885,848.474 668.81,848.454 670.734,848.433 672.659,848.412 674.583,848.391 676.508,848.369 678.433,848.346 680.357,848.323 682.282,848.299 684.206,848.274 686.131,848.249 688.056,848.223 689.98,848.196 691.905,848.168 693.829,848.139 695.754,848.109 697.678,848.079 699.603,848.047 701.528,848.014 703.452,847.98 705.377,847.945 707.301,847.909 709.226,847.871 711.15,847.832 713.075,847.792 715,847.751 716.924,847.708 718.849,847.663 720.773,847.618 722.698,847.57 724.622,847.521 726.547,847.471 728.472,847.418 730.396,847.365 732.321,847.309 734.245,847.252 736.17,847.192 738.094,847.132 740.019,847.069 741.944,847.004 743.868,846.937 745.793,846.869 747.717,846.798 749.642,846.725 751.567,846.65 753.491,846.573 755.416,846.494 757.34,846.413 759.265,846.329 761.189,846.244 763.114,846.156 765.039,846.065 766.963,845.972 768.888,845.877 770.812,845.779 772.737,845.679 774.661,845.577 776.586,845.471 778.511,845.364 780.435,845.253 782.36,845.14 784.284,845.024 786.209,844.906 788.133,844.785 790.058,844.661 791.983,844.534 793.907,844.404 795.832,844.272 797.756,844.136 799.681,843.998 801.605,843.857 803.53,843.712 805.455,843.565 807.379,843.414 809.304,843.261 811.228,843.104 813.153,842.944 815.078,842.781 817.002,842.615 818.927,842.445 820.851,842.272 822.776,842.095 824.7,841.916 826.625,841.733 828.55,841.546 830.474,841.356 832.399,841.162 834.323,840.965 836.248,840.764 838.172,840.56 840.097,840.352 842.022,840.14 843.946,839.925 845.871,839.706 847.795,839.483 849.72,839.256 851.644,839.025 853.569,838.791 855.494,838.552 857.418,838.31 859.343,838.063 861.267,837.813 863.192,837.558 865.116,837.299 867.041,837.036 868.966,836.769 870.89,836.498 872.815,836.222 874.739,835.942 876.664,835.658 878.589,835.369 880.513,835.076 882.438,834.778 884.362,834.476 886.287,834.169 888.211,833.857 890.136,833.541 892.061,833.22 893.985,832.895 895.91,832.564 897.834,832.229 899.759,831.889 901.683,831.543 903.608,831.193 905.533,830.838 907.457,830.478 909.382,830.112 911.306,829.741 913.231,829.366 915.155,828.984 917.08,828.598 919.005,828.206 920.929,827.808 922.854,827.405 924.778,826.996 926.703,826.582 928.628,826.162 930.552,825.736 932.477,825.304 934.401,824.866 936.326,824.423 938.25,823.973 940.175,823.517 942.1,823.055 944.024,822.587 945.949,822.113 947.873,821.632 949.798,821.144 951.722,820.65 953.647,820.15 955.572,819.643 957.496,819.129 959.421,818.608 961.345,818.08 963.27,817.545 965.194,817.003 967.119,816.454 969.044,815.898 970.968,815.334 972.893,814.763 974.817,814.184 976.742,813.598 978.666,813.004 980.591,812.402 982.516,811.792 984.44,811.174 986.365,810.548 988.289,809.914 990.214,809.271 992.139,808.62 994.063,807.961 995.988,807.293 997.912,806.616 999.837,805.93 1001.76,805.235 1003.69,804.531 1005.61,803.818 1007.54,803.096 1009.46,802.364 1011.38,801.622 1013.31,800.871 1015.23,800.11 1017.16,799.339 1019.08,798.558 1021.01,797.767 1022.93,796.965 1024.86,796.153 1026.78,795.33 1028.71,794.496 1030.63,793.652 1032.55,792.796 1034.48,791.929 1036.4,791.051 1038.33,790.161 1040.25,789.259 1042.18,788.346 1044.1,787.421 1046.03,786.483 1047.95,785.534 1049.88,784.571 1051.8,783.596 1053.72,782.609 1055.65,781.608 1057.57,780.594 1059.5,779.567 1061.42,778.526 1063.35,777.471 1065.27,776.403 1067.2,775.321 1069.12,774.224 1071.05,773.113 1072.97,771.987 1074.9,770.847 1076.82,769.691 1078.74,768.52 1080.67,767.334 1082.59,766.132 1084.52,764.915 1086.44,763.681 1088.37,762.431 1090.29,761.165 1092.22,759.882 1094.14,758.582 1096.07,757.265 1097.99,755.931 1099.91,754.579 1101.84,753.21 1103.76,751.822 1105.69,750.417 1107.61,748.993 1109.54,747.55 1111.46,746.089 1113.39,744.608 1115.31,743.108 1117.24,741.588 1119.16,740.049 1121.09,738.489 1123.01,736.91 1124.93,735.309 1126.86,733.688 1128.78,732.046 1130.71,730.383 1132.63,728.698 1134.56,726.991 1136.48,725.263 1138.41,723.512 1140.33,721.738 1142.26,719.942 1144.18,718.123 1146.1,716.28 1148.03,714.414 1149.95,712.524 1151.88,710.61 1153.8,708.672 1155.73,706.709 1157.65,704.722 1159.58,702.709 1161.5,700.671 1163.43,698.608 1165.35,696.518 1167.27,694.403 1169.2,692.261 1171.12,690.093 1173.05,687.898 1174.97,685.676 1176.9,683.426 1178.82,681.149 1180.75,678.844 1182.67,676.511 1184.6,674.15 1186.52,671.76 1188.45,669.341 1190.37,666.893 1192.29,664.416 1194.22,661.91 1196.14,659.373 1198.07,656.807 1199.99,654.211 1201.92,651.584 1203.84,648.927 1205.77,646.239 1207.69,643.519 1209.62,640.769 1211.54,637.987 1213.46,635.174 1215.39,632.329 1217.31,629.451 1219.24,626.542 1221.16,623.6 1223.09,620.626 1225.01,617.62 1226.94,614.58 1228.86,611.508 1230.79,608.402 1232.71,605.263 1234.64,602.091 1236.56,598.886 1238.48,595.647 1240.41,592.375 1242.33,589.068 1244.26,585.728 1246.18,582.355 1248.11,578.947 1250.03,575.506 1251.96,572.03 1253.88,568.521 1255.81,564.977 1257.73,561.4 1259.65,557.788 1261.58,554.143 1263.5,550.464 1265.43,546.751 1267.35,543.005 1269.28,539.224 1271.2,535.411 1273.13,531.563 1275.05,527.683 1276.98,523.769 1278.9,519.823 1280.82,515.844 1282.75,511.832 1284.67,507.787 1286.6,503.711 1288.52,499.603 1290.45,495.463 1292.37,491.292 1294.3,487.09 1296.22,482.858 1298.15,478.595 1300.07,474.303 1302,469.981 1303.92,465.63 1305.84,461.25 1307.77,456.842 1309.69,452.407 1311.62,447.945 1313.54,443.456 1315.47,438.942 1317.39,434.402 1319.32,429.837 1321.24,425.249 1323.17,420.637 1325.09,416.003 1327.01,411.346 1328.94,406.669 1330.86,401.971 1332.79,397.254 1334.71,392.518 1336.64,387.765 1338.56,382.995 1340.49,378.209 1342.41,373.408 1344.34,368.593 1346.26,363.766 1348.19,358.927 1350.11,354.077 1352.03,349.218 1353.96,344.35 1355.88,339.476 1357.81,334.596 1359.73,329.711 1361.66,324.823 1363.58,319.934 1365.51,315.043 1367.43,310.154 1369.36,305.268 1371.28,300.385 1373.2,295.508 1375.13,290.638 1377.05,285.776 1378.98,280.925 1380.9,276.085 1382.83,271.26 1384.75,266.449 1386.68,261.656 1388.6,256.882 1390.53,252.128 1392.45,247.398 1394.37,242.691 1396.3,238.012 1398.22,233.361 1400.15,228.74 1402.07,224.152 1404,219.598 1405.92,215.082 1407.85,210.604 1409.77,206.167 1411.7,201.773 1413.62,197.425 1415.55,193.125 1417.47,188.874 1419.39,184.676 1421.32,180.532 1423.24,176.446 1425.17,172.418 1427.09,168.453 1429.02,164.551 1430.94,160.716 1432.87,156.951 1434.79,153.256 1436.72,149.636 1438.64,146.093 1440.56,142.628 1442.49,139.245 1444.41,135.946 1446.34,132.734 1448.26,129.611 1450.19,126.58 1452.11,123.643 1454.04,120.803 1455.96,118.063 1457.89,115.425 1459.81,112.891 1461.74,110.465 1463.66,108.149 1465.58,105.945 1467.51,103.855 1469.43,101.884 1471.36,100.032 1473.28,98.3026 1475.21,96.6982 1477.13,95.2212 1479.06,93.8739 1480.98,92.6589 1482.91,91.5784 1484.83,90.6349 1486.75,89.8306 1488.68,89.1679 1490.6,88.6489 1492.53,88.2758 1494.45,88.0509 1496.38,87.9763 1498.3,88.0539 1500.23,88.2859 1502.15,88.6742 1504.08,89.2206 1506,89.9272 1507.92,90.7956 1509.85,91.8275 1511.77,93.0248 1513.7,94.3889 1515.62,95.9214 1517.55,97.6238 1519.47,99.4975 1521.4,101.544 1523.32,103.764 1525.25,106.159 1527.17,108.73 1529.1,111.478 1531.02,114.405 1532.94,117.51 1534.87,120.794 1536.79,124.259 1538.72,127.905 1540.64,131.731 1542.57,135.74 1544.49,139.93 1546.42,144.302 1548.34,148.856 1550.27,153.593 1552.19,158.511 1554.11,163.611 1556.04,168.892 1557.96,174.355 1559.89,179.997 1561.81,185.819 1563.74,191.82 1565.66,198 1567.59,204.356 1569.51,210.888 1571.44,217.595 1573.36,224.475 1575.28,231.528 1577.21,238.751 1579.13,246.143 1581.06,253.702 1582.98,261.426 1584.91,269.314 1586.83,277.363 1588.76,285.571 1590.68,293.936 1592.61,302.456 1594.53,311.127 1596.46,319.949 1598.38,328.917 1600.3,338.029 1602.23,347.282 1604.15,356.674 1606.08,366.2 1608,375.859 1609.93,385.647 1611.85,395.561 1613.78,405.597 1615.7,415.752 1617.63,426.022 1619.55,436.403 1621.47,446.893 1623.4,457.487 1625.32,468.182 1627.25,478.973 1629.17,489.857 1631.1,500.83 1633.02,511.887 1634.95,523.025 1636.87,534.239 1638.8,545.526 1640.72,556.881 1642.65,568.3 1644.57,579.778 1646.49,591.312 1648.42,602.896 1650.34,614.528 1652.27,626.201 1654.19,637.912 1656.12,649.657 1658.04,661.431 1659.97,673.229 1661.89,685.048 1663.82,696.882 1665.74,708.728 1667.66,720.581 1669.59,732.436 1671.51,744.29 1673.44,756.138 1675.36,767.975 1677.29,779.798 1679.21,791.602 1681.14,803.382 1683.06,815.136 1684.99,826.857 1686.91,838.544 1688.83,850.19 1690.76,861.793 1692.68,873.349 1694.61,884.853 1696.53,896.301 1698.46,907.691 1700.38,919.017 1702.31,930.277 1704.23,941.467 1706.16,952.583 1708.08,963.622 1710.01,974.581 1711.93,985.455 1713.85,996.243 1715.78,1006.94 1717.7,1017.54 1719.63,1028.05 1721.55,1038.46 1723.48,1048.77 1725.4,1058.97 1727.33,1069.06 1729.25,1079.05 1731.18,1088.92 1733.1,1098.68 1735.02,1108.32 1736.95,1117.84 1738.87,1127.23 1740.8,1136.51 1742.72,1145.66 1744.65,1154.68 1746.57,1163.57 1748.5,1172.33 1750.42,1180.96 1752.35,1189.46 1754.27,1197.82 1756.2,1206.04 1758.12,1214.13 1760.04,1222.07 1761.97,1229.88 1763.89,1237.54 1765.82,1245.07 1767.74,1252.45 1769.67,1259.69 1771.59,1266.78 1773.52,1273.73 1775.44,1280.53 1777.37,1287.19 1779.29,1293.7 1781.21,1300.07 1783.14,1306.29 1785.06,1312.36 1786.99,1318.29 1788.91,1324.07 1790.84,1329.71 1792.76,1335.2 1794.69,1340.54 1796.61,1345.74 1798.54,1350.8 1800.46,1355.71 1802.38,1360.48 1804.31,1365.11 1806.23,1369.59 1808.16,1373.93 1810.08,1378.13 1812.01,1382.19 1813.93,1386.11 1815.86,1389.9 1817.78,1393.54 1819.71,1397.06 1821.63,1400.43 1823.56,1403.67 1825.48,1406.78 1827.4,1409.76 1829.33,1412.61 1831.25,1415.33 1833.18,1417.92 1835.1,1420.38 1837.03,1422.72 1838.95,1424.94 1840.88,1427.04 1842.8,1429.01 1844.73,1430.87 1846.65,1432.6 1848.57,1434.22 1850.5,1435.73 1852.42,1437.13 1854.35,1438.41 1856.27,1439.58 1858.2,1440.65 1860.12,1441.6 1862.05,1442.46 1863.97,1443.21 1865.9,1443.86 1867.82,1444.41 1869.75,1444.86 1871.67,1445.21 1873.59,1445.47 1875.52,1445.64 1877.44,1445.72 1879.37,1445.7 1881.29,1445.6 1883.22,1445.41 1885.14,1445.14 1887.07,1444.78 1888.99,1444.35 1890.92,1443.83 1892.84,1443.24 1894.76,1442.56 1896.69,1441.82 1898.61,1441 1900.54,1440.11 1902.46,1439.15 1904.39,1438.13 1906.31,1437.04 1908.24,1435.88 1910.16,1434.66 1912.09,1433.38 1914.01,1432.03 1915.93,1430.63 1917.86,1429.18 1919.78,1427.66 1921.71,1426.1 1923.63,1424.48 1925.56,1422.81 1927.48,1421.09 1929.41,1419.32 1931.33,1417.51 1933.26,1415.65 1935.18,1413.75 1937.11,1411.8 1939.03,1409.82 1940.95,1407.79 1942.88,1405.73 1944.8,1403.63 1946.73,1401.49 1948.65,1399.32 1950.58,1397.11 1952.5,1394.88 1954.43,1392.61 1956.35,1390.31 1958.28,1387.99 1960.2,1385.63 1962.12,1383.26 1964.05,1380.85 1965.97,1378.42 1967.9,1375.97 1969.82,1373.5 1971.75,1371.01 1973.67,1368.49 1975.6,1365.96 1977.52,1363.41 1979.45,1360.84 1981.37,1358.26 1983.3,1355.66 1985.22,1353.05 1987.14,1350.43 1989.07,1347.79 1990.99,1345.14 1992.92,1342.48 1994.84,1339.81 1996.77,1337.13 1998.69,1334.45 2000.62,1331.75 2002.54,1329.05 2004.47,1326.35 2006.39,1323.63 2008.31,1320.92 2010.24,1318.19 2012.16,1315.47 2014.09,1312.74 2016.01,1310.01 2017.94,1307.28 2019.86,1304.55 2021.79,1301.82 2023.71,1299.09 2025.64,1296.36 2027.56,1293.63 2029.48,1290.9 2031.41,1288.18 2033.33,1285.45 2035.26,1282.74 2037.18,1280.02 2039.11,1277.31 2041.03,1274.61 2042.96,1271.9 2044.88,1269.21 2046.81,1266.52 2048.73,1263.84 2050.66,1261.16 2052.58,1258.49 2054.5,1255.83 2056.43,1253.18 2058.35,1250.53 2060.28,1247.9 2062.2,1245.27 2064.13,1242.65 2066.05,1240.04 2067.98,1237.44 2069.9,1234.85 2071.83,1232.27 2073.75,1229.7 2075.67,1227.14 2077.6,1224.59 2079.52,1222.06 2081.45,1219.53 2083.37,1217.02 2085.3,1214.51 2087.22,1212.02 2089.15,1209.54 2091.07,1207.08 2093,1204.63 2094.92,1202.18 2096.85,1199.76 2098.77,1197.34 2100.69,1194.94 2102.62,1192.55 2104.54,1190.17 2106.47,1187.81 2108.39,1185.46 2110.32,1183.12 2112.24,1180.8 2114.17,1178.49 2116.09,1176.2 2118.02,1173.92 2119.94,1171.65 2121.86,1169.4 2123.79,1167.16 2125.71,1164.94 2127.64,1162.73 2129.56,1160.54 2131.49,1158.35 2133.41,1156.19 2135.34,1154.04 2137.26,1151.9 2139.19,1149.78 2141.11,1147.67 2143.03,1145.57 2144.96,1143.49 2146.88,1141.43 2148.81,1139.38 2150.73,1137.34 2152.66,1135.32 2154.58,1133.32 2156.51,1131.32 2158.43,1129.35 2160.36,1127.38 2162.28,1125.44 2164.21,1123.5 2166.13,1121.58 2168.05,1119.68 2169.98,1117.79 2171.9,1115.92 2173.83,1114.05 2175.75,1112.21 2177.68,1110.38 2179.6,1108.56 2181.53,1106.76 2183.45,1104.97 2185.38,1103.19 2187.3,1101.43 2189.22,1099.68 2191.15,1097.95 2193.07,1096.23 2195,1094.53 2196.92,1092.84 2198.85,1091.16 2200.77,1089.5 2202.7,1087.85 2204.62,1086.22 2206.55,1084.6 2208.47,1082.99 2210.4,1081.4 2212.32,1079.82 2214.24,1078.25 2216.17,1076.7 2218.09,1075.16 2220.02,1073.63 2221.94,1072.12 2223.87,1070.62 2225.79,1069.13 2227.72,1067.66 2229.64,1066.2 2231.57,1064.75 2233.49,1063.32 2235.41,1061.9 2237.34,1060.49 2239.26,1059.09 2241.19,1057.71 2243.11,1056.34 2245.04,1054.98 2246.96,1053.63 2248.89,1052.3 2250.81,1050.98 2252.74,1049.67 2254.66,1048.37 2256.58,1047.09 2258.51,1045.81 2260.43,1044.55 2262.36,1043.3 2264.28,1042.07 2266.21,1040.84 2268.13,1039.63 2270.06,1038.43 2271.98,1037.24 2273.91,1036.06 2275.83,1034.89 2277.76,1033.73 2279.68,1032.59 2281.6,1031.45 2283.53,1030.33 2285.45,1029.22 2287.38,1028.12 2289.3,1027.03 2291.23,1025.95 2293.15,1024.88 2295.08,1023.82 \"/>\n<path clip-path=\"url(#clip780)\" d=\"M1993.8 198.898 L2284.82 198.898 L2284.82 95.2176 L1993.8 95.2176  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip780)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1993.8,198.898 2284.82,198.898 2284.82,95.2176 1993.8,95.2176 1993.8,198.898 \"/>\n<polyline clip-path=\"url(#clip780)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2016.44,147.058 2152.31,147.058 \"/>\n<path clip-path=\"url(#clip780)\" d=\"M2193.87 142.347 L2193.87 128.319 L2198.13 128.319 L2198.13 164.338 L2193.87 164.338 L2193.87 160.449 Q2192.53 162.763 2190.47 163.898 Q2188.43 165.009 2185.56 165.009 Q2180.86 165.009 2177.9 161.259 Q2174.96 157.509 2174.96 151.398 Q2174.96 145.287 2177.9 141.537 Q2180.86 137.787 2185.56 137.787 Q2188.43 137.787 2190.47 138.921 Q2192.53 140.032 2193.87 142.347 M2179.35 151.398 Q2179.35 156.097 2181.28 158.782 Q2183.22 161.444 2186.6 161.444 Q2189.98 161.444 2191.92 158.782 Q2193.87 156.097 2193.87 151.398 Q2193.87 146.699 2191.92 144.037 Q2189.98 141.352 2186.6 141.352 Q2183.22 141.352 2181.28 144.037 Q2179.35 146.699 2179.35 151.398 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M2232.96 132.44 L2232.96 137.37 Q2230.6 135.171 2227.92 134.083 Q2225.26 132.995 2222.25 132.995 Q2216.32 132.995 2213.17 136.629 Q2210.03 140.24 2210.03 147.092 Q2210.03 153.921 2213.17 157.555 Q2216.32 161.166 2222.25 161.166 Q2225.26 161.166 2227.92 160.078 Q2230.6 158.99 2232.96 156.791 L2232.96 161.676 Q2230.51 163.342 2227.76 164.176 Q2225.03 165.009 2221.97 165.009 Q2214.12 165.009 2209.61 160.217 Q2205.09 155.402 2205.09 147.092 Q2205.09 138.759 2209.61 133.967 Q2214.12 129.153 2221.97 129.153 Q2225.07 129.153 2227.8 129.986 Q2230.56 130.796 2232.96 132.44 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M2236.95 138.412 L2241.46 138.412 L2249.56 160.171 L2257.66 138.412 L2262.18 138.412 L2252.46 164.338 L2246.67 164.338 L2236.95 138.412 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /></svg>\n","category":"page"},{"location":"ne13/","page":"ne13.jl","title":"ne13.jl","text":"Plot of the partition function against temperature:","category":"page"},{"location":"ne13/","page":"ne13.jl","title":"ne13.jl","text":"plot(T,Z,label=\"Z\")","category":"page"},{"location":"ne13/","page":"ne13.jl","title":"ne13.jl","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip810\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip810)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip811\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip810)\" d=\"M141.853 1486.45 L2352.76 1486.45 L2352.76 47.2441 L141.853 47.2441  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip812\">\n    <rect x=\"141\" y=\"47\" width=\"2212\" height=\"1440\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip812)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"378.413,1486.45 378.413,47.2441 \"/>\n<polyline clip-path=\"url(#clip812)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"813.381,1486.45 813.381,47.2441 \"/>\n<polyline clip-path=\"url(#clip812)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1248.35,1486.45 1248.35,47.2441 \"/>\n<polyline clip-path=\"url(#clip812)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1683.32,1486.45 1683.32,47.2441 \"/>\n<polyline clip-path=\"url(#clip812)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2118.28,1486.45 2118.28,47.2441 \"/>\n<polyline clip-path=\"url(#clip812)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"141.853,1460.93 2352.76,1460.93 \"/>\n<polyline clip-path=\"url(#clip812)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"141.853,1156.84 2352.76,1156.84 \"/>\n<polyline clip-path=\"url(#clip812)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"141.853,852.763 2352.76,852.763 \"/>\n<polyline clip-path=\"url(#clip812)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"141.853,548.681 2352.76,548.681 \"/>\n<polyline clip-path=\"url(#clip812)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"141.853,244.599 2352.76,244.599 \"/>\n<polyline clip-path=\"url(#clip810)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"141.853,1486.45 2352.76,1486.45 \"/>\n<polyline clip-path=\"url(#clip810)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"378.413,1486.45 378.413,1467.55 \"/>\n<polyline clip-path=\"url(#clip810)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"813.381,1486.45 813.381,1467.55 \"/>\n<polyline clip-path=\"url(#clip810)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1248.35,1486.45 1248.35,1467.55 \"/>\n<polyline clip-path=\"url(#clip810)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1683.32,1486.45 1683.32,1467.55 \"/>\n<polyline clip-path=\"url(#clip810)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2118.28,1486.45 2118.28,1467.55 \"/>\n<path clip-path=\"url(#clip810)\" d=\"M345.577 1514.29 L363.934 1514.29 L363.934 1518.22 L349.86 1518.22 L349.86 1526.7 Q350.878 1526.35 351.897 1526.19 Q352.915 1526 353.934 1526 Q359.721 1526 363.1 1529.17 Q366.48 1532.34 366.48 1537.76 Q366.48 1543.34 363.008 1546.44 Q359.536 1549.52 353.216 1549.52 Q351.04 1549.52 348.772 1549.15 Q346.526 1548.78 344.119 1548.04 L344.119 1543.34 Q346.202 1544.47 348.425 1545.03 Q350.647 1545.58 353.124 1545.58 Q357.128 1545.58 359.466 1543.48 Q361.804 1541.37 361.804 1537.76 Q361.804 1534.15 359.466 1532.04 Q357.128 1529.94 353.124 1529.94 Q351.249 1529.94 349.374 1530.35 Q347.522 1530.77 345.577 1531.65 L345.577 1514.29 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M375.693 1542.97 L380.577 1542.97 L380.577 1548.85 L375.693 1548.85 L375.693 1542.97 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M400.762 1517.37 Q397.151 1517.37 395.322 1520.93 Q393.517 1524.47 393.517 1531.6 Q393.517 1538.71 395.322 1542.27 Q397.151 1545.82 400.762 1545.82 Q404.396 1545.82 406.202 1542.27 Q408.031 1538.71 408.031 1531.6 Q408.031 1524.47 406.202 1520.93 Q404.396 1517.37 400.762 1517.37 M400.762 1513.66 Q406.572 1513.66 409.628 1518.27 Q412.707 1522.85 412.707 1531.6 Q412.707 1540.33 409.628 1544.94 Q406.572 1549.52 400.762 1549.52 Q394.952 1549.52 391.873 1544.94 Q388.818 1540.33 388.818 1531.6 Q388.818 1522.85 391.873 1518.27 Q394.952 1513.66 400.762 1513.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M779.7 1514.29 L801.922 1514.29 L801.922 1516.28 L789.376 1548.85 L784.492 1548.85 L796.297 1518.22 L779.7 1518.22 L779.7 1514.29 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M811.043 1542.97 L815.927 1542.97 L815.927 1548.85 L811.043 1548.85 L811.043 1542.97 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M826.158 1514.29 L844.515 1514.29 L844.515 1518.22 L830.441 1518.22 L830.441 1526.7 Q831.459 1526.35 832.478 1526.19 Q833.496 1526 834.515 1526 Q840.302 1526 843.681 1529.17 Q847.061 1532.34 847.061 1537.76 Q847.061 1543.34 843.589 1546.44 Q840.117 1549.52 833.797 1549.52 Q831.621 1549.52 829.353 1549.15 Q827.107 1548.78 824.7 1548.04 L824.7 1543.34 Q826.783 1544.47 829.005 1545.03 Q831.228 1545.58 833.705 1545.58 Q837.709 1545.58 840.047 1543.48 Q842.385 1541.37 842.385 1537.76 Q842.385 1534.15 840.047 1532.04 Q837.709 1529.94 833.705 1529.94 Q831.83 1529.94 829.955 1530.35 Q828.103 1530.77 826.158 1531.65 L826.158 1514.29 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M1200.42 1544.91 L1208.06 1544.91 L1208.06 1518.55 L1199.75 1520.21 L1199.75 1515.95 L1208.01 1514.29 L1212.69 1514.29 L1212.69 1544.91 L1220.33 1544.91 L1220.33 1548.85 L1200.42 1548.85 L1200.42 1544.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M1239.77 1517.37 Q1236.16 1517.37 1234.33 1520.93 Q1232.53 1524.47 1232.53 1531.6 Q1232.53 1538.71 1234.33 1542.27 Q1236.16 1545.82 1239.77 1545.82 Q1243.41 1545.82 1245.21 1542.27 Q1247.04 1538.71 1247.04 1531.6 Q1247.04 1524.47 1245.21 1520.93 Q1243.41 1517.37 1239.77 1517.37 M1239.77 1513.66 Q1245.58 1513.66 1248.64 1518.27 Q1251.72 1522.85 1251.72 1531.6 Q1251.72 1540.33 1248.64 1544.94 Q1245.58 1549.52 1239.77 1549.52 Q1233.96 1549.52 1230.88 1544.94 Q1227.83 1540.33 1227.83 1531.6 Q1227.83 1522.85 1230.88 1518.27 Q1233.96 1513.66 1239.77 1513.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M1259.93 1542.97 L1264.82 1542.97 L1264.82 1548.85 L1259.93 1548.85 L1259.93 1542.97 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M1285 1517.37 Q1281.39 1517.37 1279.56 1520.93 Q1277.76 1524.47 1277.76 1531.6 Q1277.76 1538.71 1279.56 1542.27 Q1281.39 1545.82 1285 1545.82 Q1288.64 1545.82 1290.44 1542.27 Q1292.27 1538.71 1292.27 1531.6 Q1292.27 1524.47 1290.44 1520.93 Q1288.64 1517.37 1285 1517.37 M1285 1513.66 Q1290.81 1513.66 1293.87 1518.27 Q1296.95 1522.85 1296.95 1531.6 Q1296.95 1540.33 1293.87 1544.94 Q1290.81 1549.52 1285 1549.52 Q1279.19 1549.52 1276.11 1544.94 Q1273.06 1540.33 1273.06 1531.6 Q1273.06 1522.85 1276.11 1518.27 Q1279.19 1513.66 1285 1513.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M1635.89 1544.91 L1643.52 1544.91 L1643.52 1518.55 L1635.21 1520.21 L1635.21 1515.95 L1643.48 1514.29 L1648.15 1514.29 L1648.15 1544.91 L1655.79 1544.91 L1655.79 1548.85 L1635.89 1548.85 L1635.89 1544.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M1669.27 1544.91 L1685.58 1544.91 L1685.58 1548.85 L1663.64 1548.85 L1663.64 1544.91 Q1666.3 1542.16 1670.89 1537.53 Q1675.49 1532.88 1676.67 1531.53 Q1678.92 1529.01 1679.8 1527.27 Q1680.7 1525.51 1680.7 1523.82 Q1680.7 1521.07 1678.76 1519.33 Q1676.83 1517.6 1673.73 1517.6 Q1671.53 1517.6 1669.08 1518.36 Q1666.65 1519.13 1663.87 1520.68 L1663.87 1515.95 Q1666.7 1514.82 1669.15 1514.24 Q1671.6 1513.66 1673.64 1513.66 Q1679.01 1513.66 1682.21 1516.35 Q1685.4 1519.03 1685.4 1523.52 Q1685.4 1525.65 1684.59 1527.57 Q1683.8 1529.47 1681.7 1532.07 Q1681.12 1532.74 1678.02 1535.95 Q1674.91 1539.15 1669.27 1544.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M1695.4 1542.97 L1700.28 1542.97 L1700.28 1548.85 L1695.4 1548.85 L1695.4 1542.97 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M1710.52 1514.29 L1728.87 1514.29 L1728.87 1518.22 L1714.8 1518.22 L1714.8 1526.7 Q1715.82 1526.35 1716.83 1526.19 Q1717.85 1526 1718.87 1526 Q1724.66 1526 1728.04 1529.17 Q1731.42 1532.34 1731.42 1537.76 Q1731.42 1543.34 1727.95 1546.44 Q1724.47 1549.52 1718.15 1549.52 Q1715.98 1549.52 1713.71 1549.15 Q1711.46 1548.78 1709.06 1548.04 L1709.06 1543.34 Q1711.14 1544.47 1713.36 1545.03 Q1715.58 1545.58 1718.06 1545.58 Q1722.07 1545.58 1724.4 1543.48 Q1726.74 1541.37 1726.74 1537.76 Q1726.74 1534.15 1724.4 1532.04 Q1722.07 1529.94 1718.06 1529.94 Q1716.19 1529.94 1714.31 1530.35 Q1712.46 1530.77 1710.52 1531.65 L1710.52 1514.29 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M2070.36 1544.91 L2077.99 1544.91 L2077.99 1518.55 L2069.68 1520.21 L2069.68 1515.95 L2077.95 1514.29 L2082.62 1514.29 L2082.62 1544.91 L2090.26 1544.91 L2090.26 1548.85 L2070.36 1548.85 L2070.36 1544.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M2099.75 1514.29 L2118.11 1514.29 L2118.11 1518.22 L2104.04 1518.22 L2104.04 1526.7 Q2105.05 1526.35 2106.07 1526.19 Q2107.09 1526 2108.11 1526 Q2113.9 1526 2117.28 1529.17 Q2120.66 1532.34 2120.66 1537.76 Q2120.66 1543.34 2117.18 1546.44 Q2113.71 1549.52 2107.39 1549.52 Q2105.22 1549.52 2102.95 1549.15 Q2100.7 1548.78 2098.3 1548.04 L2098.3 1543.34 Q2100.38 1544.47 2102.6 1545.03 Q2104.82 1545.58 2107.3 1545.58 Q2111.3 1545.58 2113.64 1543.48 Q2115.98 1541.37 2115.98 1537.76 Q2115.98 1534.15 2113.64 1532.04 Q2111.3 1529.94 2107.3 1529.94 Q2105.43 1529.94 2103.55 1530.35 Q2101.7 1530.77 2099.75 1531.65 L2099.75 1514.29 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M2129.87 1542.97 L2134.75 1542.97 L2134.75 1548.85 L2129.87 1548.85 L2129.87 1542.97 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M2154.94 1517.37 Q2151.33 1517.37 2149.5 1520.93 Q2147.69 1524.47 2147.69 1531.6 Q2147.69 1538.71 2149.5 1542.27 Q2151.33 1545.82 2154.94 1545.82 Q2158.57 1545.82 2160.38 1542.27 Q2162.21 1538.71 2162.21 1531.6 Q2162.21 1524.47 2160.38 1520.93 Q2158.57 1517.37 2154.94 1517.37 M2154.94 1513.66 Q2160.75 1513.66 2163.8 1518.27 Q2166.88 1522.85 2166.88 1531.6 Q2166.88 1540.33 2163.8 1544.94 Q2160.75 1549.52 2154.94 1549.52 Q2149.13 1549.52 2146.05 1544.94 Q2142.99 1540.33 2142.99 1531.6 Q2142.99 1522.85 2146.05 1518.27 Q2149.13 1513.66 2154.94 1513.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip810)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"141.853,1486.45 141.853,47.2441 \"/>\n<polyline clip-path=\"url(#clip810)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"141.853,1460.93 160.751,1460.93 \"/>\n<polyline clip-path=\"url(#clip810)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"141.853,1156.84 160.751,1156.84 \"/>\n<polyline clip-path=\"url(#clip810)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"141.853,852.763 160.751,852.763 \"/>\n<polyline clip-path=\"url(#clip810)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"141.853,548.681 160.751,548.681 \"/>\n<polyline clip-path=\"url(#clip810)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"141.853,244.599 160.751,244.599 \"/>\n<path clip-path=\"url(#clip810)\" d=\"M93.9086 1446.73 Q90.2975 1446.73 88.4688 1450.29 Q86.6632 1453.83 86.6632 1460.96 Q86.6632 1468.07 88.4688 1471.63 Q90.2975 1475.17 93.9086 1475.17 Q97.5428 1475.17 99.3483 1471.63 Q101.177 1468.07 101.177 1460.96 Q101.177 1453.83 99.3483 1450.29 Q97.5428 1446.73 93.9086 1446.73 M93.9086 1443.02 Q99.7187 1443.02 102.774 1447.63 Q105.853 1452.21 105.853 1460.96 Q105.853 1469.69 102.774 1474.29 Q99.7187 1478.88 93.9086 1478.88 Q88.0984 1478.88 85.0197 1474.29 Q81.9642 1469.69 81.9642 1460.96 Q81.9642 1452.21 85.0197 1447.63 Q88.0984 1443.02 93.9086 1443.02 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M57.7745 1170.19 L74.0939 1170.19 L74.0939 1174.12 L52.1495 1174.12 L52.1495 1170.19 Q54.8115 1167.44 59.3949 1162.81 Q64.0013 1158.15 65.1819 1156.81 Q67.4272 1154.29 68.3068 1152.55 Q69.2096 1150.79 69.2096 1149.1 Q69.2096 1146.35 67.2652 1144.61 Q65.3439 1142.88 62.2421 1142.88 Q60.043 1142.88 57.5893 1143.64 Q55.1588 1144.4 52.381 1145.95 L52.381 1141.23 Q55.2051 1140.1 57.6588 1139.52 Q60.1124 1138.94 62.1495 1138.94 Q67.5198 1138.94 70.7142 1141.63 Q73.9087 1144.31 73.9087 1148.8 Q73.9087 1150.93 73.0985 1152.85 Q72.3115 1154.75 70.205 1157.34 Q69.6263 1158.01 66.5245 1161.23 Q63.4226 1164.43 57.7745 1170.19 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M93.9086 1142.64 Q90.2975 1142.64 88.4688 1146.21 Q86.6632 1149.75 86.6632 1156.88 Q86.6632 1163.99 88.4688 1167.55 Q90.2975 1171.09 93.9086 1171.09 Q97.5428 1171.09 99.3483 1167.55 Q101.177 1163.99 101.177 1156.88 Q101.177 1149.75 99.3483 1146.21 Q97.5428 1142.64 93.9086 1142.64 M93.9086 1138.94 Q99.7187 1138.94 102.774 1143.55 Q105.853 1148.13 105.853 1156.88 Q105.853 1165.61 102.774 1170.21 Q99.7187 1174.8 93.9086 1174.8 Q88.0984 1174.8 85.0197 1170.21 Q81.9642 1165.61 81.9642 1156.88 Q81.9642 1148.13 85.0197 1143.55 Q88.0984 1138.94 93.9086 1138.94 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M66.5939 839.557 L54.7884 858.006 L66.5939 858.006 L66.5939 839.557 M65.367 835.483 L71.2466 835.483 L71.2466 858.006 L76.1772 858.006 L76.1772 861.895 L71.2466 861.895 L71.2466 870.043 L66.5939 870.043 L66.5939 861.895 L50.9921 861.895 L50.9921 857.381 L65.367 835.483 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M93.9086 838.562 Q90.2975 838.562 88.4688 842.126 Q86.6632 845.668 86.6632 852.798 Q86.6632 859.904 88.4688 863.469 Q90.2975 867.011 93.9086 867.011 Q97.5428 867.011 99.3483 863.469 Q101.177 859.904 101.177 852.798 Q101.177 845.668 99.3483 842.126 Q97.5428 838.562 93.9086 838.562 M93.9086 834.858 Q99.7187 834.858 102.774 839.464 Q105.853 844.048 105.853 852.798 Q105.853 861.524 102.774 866.131 Q99.7187 870.714 93.9086 870.714 Q88.0984 870.714 85.0197 866.131 Q81.9642 861.524 81.9642 852.798 Q81.9642 844.048 85.0197 839.464 Q88.0984 834.858 93.9086 834.858 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M64.3254 546.817 Q61.1773 546.817 59.3254 548.97 Q57.4967 551.123 57.4967 554.873 Q57.4967 558.6 59.3254 560.776 Q61.1773 562.929 64.3254 562.929 Q67.4735 562.929 69.3022 560.776 Q71.1541 558.6 71.1541 554.873 Q71.1541 551.123 69.3022 548.97 Q67.4735 546.817 64.3254 546.817 M73.6077 532.165 L73.6077 536.424 Q71.8485 535.591 70.0429 535.151 Q68.2606 534.711 66.5013 534.711 Q61.8717 534.711 59.418 537.836 Q56.9875 540.961 56.6402 547.28 Q58.006 545.267 60.0662 544.202 Q62.1263 543.114 64.6032 543.114 Q69.8115 543.114 72.8207 546.285 Q75.8531 549.433 75.8531 554.873 Q75.8531 560.197 72.705 563.415 Q69.5568 566.632 64.3254 566.632 Q58.33 566.632 55.1588 562.049 Q51.9875 557.442 51.9875 548.716 Q51.9875 540.521 55.8764 535.66 Q59.7652 530.776 66.3161 530.776 Q68.0754 530.776 69.8578 531.123 Q71.6633 531.47 73.6077 532.165 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M93.9086 534.48 Q90.2975 534.48 88.4688 538.044 Q86.6632 541.586 86.6632 548.716 Q86.6632 555.822 88.4688 559.387 Q90.2975 562.929 93.9086 562.929 Q97.5428 562.929 99.3483 559.387 Q101.177 555.822 101.177 548.716 Q101.177 541.586 99.3483 538.044 Q97.5428 534.48 93.9086 534.48 M93.9086 530.776 Q99.7187 530.776 102.774 535.382 Q105.853 539.966 105.853 548.716 Q105.853 557.442 102.774 562.049 Q99.7187 566.632 93.9086 566.632 Q88.0984 566.632 85.0197 562.049 Q81.9642 557.442 81.9642 548.716 Q81.9642 539.966 85.0197 535.382 Q88.0984 530.776 93.9086 530.776 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M63.7467 245.467 Q60.4134 245.467 58.4921 247.249 Q56.5939 249.032 56.5939 252.157 Q56.5939 255.282 58.4921 257.064 Q60.4134 258.846 63.7467 258.846 Q67.08 258.846 69.0013 257.064 Q70.9226 255.259 70.9226 252.157 Q70.9226 249.032 69.0013 247.249 Q67.1032 245.467 63.7467 245.467 M59.0708 243.476 Q56.0615 242.735 54.3717 240.675 Q52.7051 238.615 52.7051 235.652 Q52.7051 231.509 55.6449 229.101 Q58.6078 226.694 63.7467 226.694 Q68.9087 226.694 71.8485 229.101 Q74.7883 231.509 74.7883 235.652 Q74.7883 238.615 73.0985 240.675 Q71.4318 242.735 68.4457 243.476 Q71.8253 244.263 73.7003 246.555 Q75.5985 248.847 75.5985 252.157 Q75.5985 257.18 72.5198 259.865 Q69.4642 262.55 63.7467 262.55 Q58.0291 262.55 54.9504 259.865 Q51.8949 257.18 51.8949 252.157 Q51.8949 248.847 53.793 246.555 Q55.6912 244.263 59.0708 243.476 M57.3578 236.092 Q57.3578 238.777 59.0245 240.282 Q60.7143 241.786 63.7467 241.786 Q66.7559 241.786 68.4457 240.282 Q70.1587 238.777 70.1587 236.092 Q70.1587 233.407 68.4457 231.902 Q66.7559 230.398 63.7467 230.398 Q60.7143 230.398 59.0245 231.902 Q57.3578 233.407 57.3578 236.092 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M93.9086 230.398 Q90.2975 230.398 88.4688 233.962 Q86.6632 237.504 86.6632 244.634 Q86.6632 251.74 88.4688 255.305 Q90.2975 258.846 93.9086 258.846 Q97.5428 258.846 99.3483 255.305 Q101.177 251.74 101.177 244.634 Q101.177 237.504 99.3483 233.962 Q97.5428 230.398 93.9086 230.398 M93.9086 226.694 Q99.7187 226.694 102.774 231.3 Q105.853 235.884 105.853 244.634 Q105.853 253.36 102.774 257.967 Q99.7187 262.55 93.9086 262.55 Q88.0984 262.55 85.0197 257.967 Q81.9642 253.36 81.9642 244.634 Q81.9642 235.884 85.0197 231.3 Q88.0984 226.694 93.9086 226.694 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip812)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"204.426,87.9763 206.514,1080.85 208.601,1354.88 210.689,1431.11 212.777,1437.96 214.865,1443.1 216.953,1423.03 219.041,1431.07 221.128,1437.23 223.216,1441.98 225.304,1445.66 227.392,1427.26 229.48,1433.41 231.568,1438.28 233.656,1442.16 235.743,1445.26 237.831,1425.14 239.919,1430.64 242.007,1435.13 244.095,1438.8 246.183,1441.82 248.27,1444.31 250.358,1421.41 252.446,1426.12 254.534,1430.08 256.622,1433.4 258.71,1436.21 260.797,1438.6 262.885,1440.63 264.973,1442.36 267.061,1443.83 269.149,1445.1 271.237,1420.83 273.325,1423.34 275.412,1425.49 277.5,1427.31 279.588,1428.86 281.676,1430.15 283.764,1431.23 285.852,1432.1 287.939,1432.78 290.027,1433.3 292.115,1433.65 294.203,1433.85 296.291,1433.91 298.379,1433.81 300.467,1433.57 302.554,1433.17 304.642,1432.62 306.73,1431.91 308.818,1431.03 310.906,1429.95 312.994,1428.68 315.081,1427.17 317.169,1425.42 319.257,1423.39 321.345,1421.05 323.433,1445.26 325.521,1444.12 327.609,1442.8 329.696,1441.29 331.784,1439.55 333.872,1437.54 335.96,1435.23 338.048,1432.55 340.136,1429.45 342.223,1425.84 344.311,1421.65 346.399,1444.68 348.487,1442.57 350.575,1440.09 352.663,1437.17 354.751,1433.73 356.838,1429.65 358.926,1424.8 361.014,1445.51 363.102,1442.97 365.19,1439.92 367.278,1436.24 369.365,1431.8 371.453,1426.42 373.541,1419.88 375.629,1442.89 377.717,1439.29 379.805,1434.87 381.893,1429.42 383.98,1422.68 386.068,1443.78 388.156,1439.95 390.244,1435.16 392.332,1429.15 394.42,1421.6 396.507,1442.95 398.595,1438.5 400.683,1432.85 402.771,1425.65 404.859,1444.56 406.947,1440.2 409.035,1434.6 411.122,1427.35 413.21,1445.12 415.298,1440.62 417.386,1434.75 419.474,1427.07 421.562,1444.76 423.649,1439.87 425.737,1433.4 427.825,1424.82 429.913,1443.44 432.001,1437.84 434.089,1430.34 436.177,1420.26 438.264,1440.97 440.352,1434.22 442.44,1425.07 444.528,1443.16 446.616,1436.91 448.704,1428.37 450.791,1444.64 452.879,1438.7 454.967,1430.51 457.055,1445.56 459.143,1439.77 461.231,1431.69 463.318,1420.42 465.406,1440.21 467.494,1432.05 469.582,1420.55 471.67,1440.09 473.758,1431.62 475.846,1445.72 477.933,1439.4 480.021,1430.38 482.109,1444.94 484.197,1438.1 486.285,1428.26 488.373,1443.68 490.46,1436.1 492.548,1425.09 494.636,1441.84 496.724,1433.22 498.812,1420.61 500.9,1439.28 502.988,1429.25 505.075,1443.83 507.163,1435.77 509.251,1423.81 511.339,1440.73 513.427,1430.98 515.515,1444.55 517.602,1436.51 519.69,1424.44 521.778,1440.81 523.866,1430.71 525.954,1444.19 528.042,1435.66 530.13,1422.68 532.217,1439.58 534.305,1428.46 536.393,1442.71 538.481,1433.09 540.569,1445.24 542.657,1436.83 544.744,1423.83 546.832,1439.86 548.92,1428.35 551.008,1442.34 553.096,1432.05 555.184,1444.38 557.272,1435.09 559.359,1420.5 561.447,1437.6 563.535,1424.26 565.623,1439.67 567.711,1427.37 569.799,1441.39 571.886,1429.94 573.974,1442.81 576.062,1432.06 578.15,1443.97 580.238,1433.8 582.326,1444.93 584.414,1435.22 586.501,1445.7 588.589,1436.36 590.677,1421.2 592.765,1437.24 594.853,1422.47 596.941,1437.91 599.028,1423.4 601.116,1438.37 603.204,1424.01 605.292,1438.65 607.38,1424.31 609.468,1438.74 611.556,1424.32 613.643,1438.66 615.731,1424.04 617.819,1438.4 619.907,1423.47 621.995,1437.97 624.083,1422.6 626.17,1437.34 628.258,1421.41 630.346,1436.52 632.434,1419.87 634.522,1435.47 636.61,1445.12 638.698,1434.19 640.785,1444.26 642.873,1432.63 644.961,1443.22 647.049,1430.77 649.137,1441.99 651.225,1428.55 653.312,1440.53 655.4,1425.92 657.488,1438.79 659.576,1422.82 661.664,1436.75 663.752,1445.56 665.839,1434.33 667.927,1443.96 670.015,1431.47 672.103,1442.08 674.191,1428.08 676.279,1439.84 678.367,1424.06 680.454,1437.18 682.542,1445.6 684.63,1434.01 686.718,1443.5 688.806,1430.21 690.894,1440.98 692.981,1425.66 695.069,1437.95 697.157,1420.17 699.245,1434.29 701.333,1443.49 703.421,1429.86 705.509,1440.53 707.596,1424.46 709.684,1436.91 711.772,1445.09 713.86,1432.48 715.948,1442.11 718.036,1427.03 720.123,1438.44 722.211,1420.3 724.299,1433.89 726.387,1442.91 728.475,1428.23 730.563,1439.07 732.651,1421.16 734.738,1434.27 736.826,1443.03 738.914,1428.22 741.002,1438.91 743.09,1420.57 745.178,1433.68 747.265,1442.51 749.353,1427.03 751.441,1437.95 753.529,1445.33 755.617,1432.1 757.705,1441.31 759.793,1424.57 761.88,1436.11 763.968,1443.97 766.056,1429.38 768.144,1439.31 770.232,1420.6 772.32,1433.22 774.407,1441.87 776.495,1425.24 778.583,1436.31 780.671,1443.93 782.759,1428.97 784.847,1438.8 786.935,1445.59 789.022,1431.98 791.11,1440.81 793.198,1422.87 795.286,1434.41 797.374,1442.43 799.462,1425.81 801.549,1436.37 803.637,1443.73 805.725,1428.16 807.813,1437.93 809.901,1444.77 811.989,1430.03 814.077,1439.16 816.164,1445.58 818.252,1431.47 820.34,1440.1 822.428,1420.87 824.516,1432.55 826.604,1440.8 828.691,1422.07 830.779,1433.3 832.867,1441.27 834.955,1422.84 837.043,1433.76 839.131,1441.53 841.219,1423.22 843.306,1433.94 845.394,1441.59 847.482,1423.22 849.57,1433.85 851.658,1441.46 853.746,1422.85 855.833,1433.49 857.921,1441.14 860.009,1422.1 862.097,1432.86 864.185,1440.62 866.273,1420.95 868.36,1431.94 870.448,1439.89 872.536,1445.64 874.624,1430.71 876.712,1438.92 878.8,1444.89 880.888,1429.13 882.975,1437.7 885.063,1443.95 887.151,1427.16 889.239,1436.19 891.327,1442.79 893.415,1424.74 895.502,1434.34 897.59,1441.37 899.678,1421.8 901.766,1432.1 903.854,1439.66 905.942,1445.23 908.03,1429.39 910.117,1437.6 912.205,1443.66 914.293,1426.14 916.381,1435.12 918.469,1441.76 920.557,1422.21 922.644,1432.13 924.732,1439.48 926.82,1444.95 928.908,1428.52 930.996,1436.73 933.084,1442.85 935.172,1424.16 937.259,1433.4 939.347,1440.3 941.435,1445.46 943.523,1429.36 945.611,1437.21 947.699,1443.09 949.786,1424.43 951.874,1433.43 953.962,1440.2 956.05,1445.28 958.138,1428.81 960.226,1436.65 962.314,1442.56 964.401,1423.11 966.489,1432.27 968.577,1439.19 970.665,1444.42 972.753,1426.84 974.841,1435 976.928,1441.2 979.016,1420.07 981.104,1429.78 983.192,1437.16 985.28,1442.78 987.368,1423.23 989.456,1432.09 991.543,1438.86 993.631,1444.02 995.719,1425.69 997.807,1433.89 999.895,1440.16 1001.98,1444.97 1004.07,1427.57 1006.16,1435.25 1008.25,1441.14 1010.33,1445.68 1012.42,1428.94 1014.51,1436.23 1016.6,1441.84 1018.69,1420.81 1020.77,1429.88 1022.86,1436.88 1024.95,1442.29 1027.04,1421.63 1029.12,1430.42 1031.21,1437.23 1033.3,1442.5 1035.39,1421.97 1037.48,1430.59 1039.56,1437.29 1041.65,1442.5 1043.74,1421.84 1045.83,1430.41 1047.92,1437.08 1050,1442.28 1052.09,1421.26 1054.18,1429.86 1056.27,1436.58 1058.35,1441.84 1060.44,1420.2 1062.53,1428.94 1064.62,1435.79 1066.71,1441.16 1068.79,1445.37 1070.88,1427.63 1072.97,1434.69 1075.06,1440.23 1077.15,1444.6 1079.23,1425.87 1081.32,1433.23 1083.41,1439.02 1085.5,1443.6 1087.58,1423.62 1089.67,1431.37 1091.76,1437.49 1093.85,1442.33 1095.94,1420.8 1098.02,1429.05 1100.11,1435.58 1102.2,1440.77 1104.29,1444.88 1106.37,1426.18 1108.46,1433.23 1110.55,1438.84 1112.64,1443.3 1114.73,1422.67 1116.81,1430.35 1118.9,1436.48 1120.99,1441.37 1123.08,1445.27 1125.17,1426.83 1127.25,1433.59 1129.34,1439 1131.43,1443.33 1133.52,1422.51 1135.6,1430.06 1137.69,1436.1 1139.78,1440.96 1141.87,1444.85 1143.96,1425.72 1146.04,1432.55 1148.13,1438.04 1150.22,1442.46 1152.31,1420.38 1154.4,1428.17 1156.48,1434.44 1158.57,1439.5 1160.66,1443.59 1162.75,1422.75 1164.83,1429.99 1166.92,1435.84 1169.01,1440.58 1171.1,1444.41 1173.19,1424.45 1175.27,1431.28 1177.36,1436.82 1179.45,1441.31 1181.54,1444.96 1183.63,1425.57 1185.71,1432.11 1187.8,1437.43 1189.89,1441.75 1191.98,1445.27 1194.06,1426.17 1196.15,1432.52 1198.24,1437.69 1200.33,1441.92 1202.42,1445.36 1204.5,1426.27 1206.59,1432.53 1208.68,1437.64 1210.77,1441.82 1212.85,1445.24 1214.94,1425.91 1217.03,1432.15 1219.12,1437.26 1221.21,1441.46 1223.29,1444.9 1225.38,1425.06 1227.47,1431.37 1229.56,1436.56 1231.65,1440.83 1233.73,1444.34 1235.82,1423.7 1237.91,1430.17 1240,1435.51 1242.08,1439.9 1244.17,1443.53 1246.26,1421.78 1248.35,1428.51 1250.44,1434.06 1252.52,1438.65 1254.61,1442.45 1256.7,1445.59 1258.79,1426.31 1260.88,1432.17 1262.96,1437.02 1265.05,1441.05 1267.14,1444.39 1269.23,1423.5 1271.31,1429.76 1273.4,1434.95 1275.49,1439.27 1277.58,1442.87 1279.67,1419.96 1281.75,1426.72 1283.84,1432.36 1285.93,1437.05 1288.02,1440.96 1290.11,1444.23 1292.19,1422.94 1294.28,1429.12 1296.37,1434.28 1298.46,1438.59 1300.54,1442.2 1302.63,1445.22 1304.72,1425.09 1306.81,1430.83 1308.9,1435.64 1310.98,1439.68 1313.07,1443.06 1315.16,1420.07 1317.25,1426.54 1319.34,1431.97 1321.42,1436.53 1323.51,1440.37 1325.6,1443.59 1327.69,1421.17 1329.77,1427.38 1331.86,1432.6 1333.95,1437 1336.04,1440.7 1338.13,1443.83 1340.21,1421.61 1342.3,1427.66 1344.39,1432.76 1346.48,1437.07 1348.56,1440.71 1350.65,1443.79 1352.74,1421.41 1354.83,1427.4 1356.92,1432.47 1359,1436.76 1361.09,1440.39 1363.18,1443.47 1365.27,1420.58 1367.36,1426.6 1369.44,1431.71 1371.53,1436.05 1373.62,1439.74 1375.71,1442.87 1377.79,1445.53 1379.88,1425.23 1381.97,1430.47 1384.06,1434.93 1386.15,1438.72 1388.23,1441.96 1390.32,1444.71 1392.41,1423.24 1394.5,1428.69 1396.59,1433.34 1398.67,1437.31 1400.76,1440.7 1402.85,1443.59 1404.94,1420.53 1407.02,1426.29 1409.11,1431.21 1411.2,1435.42 1413.29,1439.03 1415.38,1442.11 1417.46,1444.76 1419.55,1423.15 1421.64,1428.44 1423.73,1432.97 1425.82,1436.87 1427.9,1440.21 1429.99,1443.08 1432.08,1445.55 1434.17,1424.89 1436.25,1429.84 1438.34,1434.11 1440.43,1437.78 1442.52,1440.94 1444.61,1443.66 1446.69,1420.37 1448.78,1425.87 1450.87,1430.61 1452.96,1434.7 1455.05,1438.22 1457.13,1441.27 1459.22,1443.9 1461.31,1420.82 1463.4,1426.16 1465.48,1430.78 1467.57,1434.78 1469.66,1438.23 1471.75,1441.22 1473.84,1443.82 1475.92,1420.51 1478.01,1425.8 1480.1,1430.39 1482.19,1434.36 1484.27,1437.81 1486.36,1440.81 1488.45,1443.41 1490.54,1445.66 1492.63,1424.77 1494.71,1429.41 1496.8,1433.44 1498.89,1436.95 1500.98,1440 1503.07,1442.66 1505.15,1444.97 1507.24,1423.03 1509.33,1427.81 1511.42,1431.97 1513.5,1435.6 1515.59,1438.77 1517.68,1441.53 1519.77,1443.95 1521.86,1420.5 1523.94,1425.5 1526.03,1429.88 1528.12,1433.7 1530.21,1437.05 1532.3,1439.97 1534.38,1442.53 1536.47,1444.78 1538.56,1422.37 1540.65,1427.04 1542.73,1431.14 1544.82,1434.74 1546.91,1437.89 1549,1440.66 1551.09,1443.09 1553.17,1445.22 1555.26,1423.32 1557.35,1427.79 1559.44,1431.72 1561.53,1435.17 1563.61,1438.21 1565.7,1440.88 1567.79,1443.24 1569.88,1445.31 1571.96,1423.43 1574.05,1427.8 1576.14,1431.65 1578.23,1435.04 1580.32,1438.03 1582.4,1440.67 1584.49,1443 1586.58,1445.06 1588.67,1422.73 1590.75,1427.09 1592.84,1430.94 1594.93,1434.35 1597.02,1437.36 1599.11,1440.02 1601.19,1442.38 1603.28,1444.47 1605.37,1421.2 1607.46,1425.64 1609.55,1429.58 1611.63,1433.07 1613.72,1436.16 1615.81,1438.9 1617.9,1441.34 1619.98,1443.49 1622.07,1445.41 1624.16,1423.37 1626.25,1427.48 1628.34,1431.13 1630.42,1434.37 1632.51,1437.25 1634.6,1439.81 1636.69,1442.09 1638.78,1444.12 1640.86,1420.15 1642.95,1424.52 1645.04,1428.41 1647.13,1431.88 1649.21,1434.97 1651.3,1437.72 1653.39,1440.18 1655.48,1442.37 1657.57,1444.32 1659.65,1420.53 1661.74,1424.76 1663.83,1428.54 1665.92,1431.92 1668.01,1434.93 1670.09,1437.63 1672.18,1440.04 1674.27,1442.2 1676.36,1444.12 1678.44,1419.94 1680.53,1424.14 1682.62,1427.9 1684.71,1431.26 1686.8,1434.28 1688.88,1436.98 1690.97,1439.4 1693.06,1441.57 1695.15,1443.52 1697.24,1445.27 1699.32,1422.63 1701.41,1426.46 1703.5,1429.89 1705.59,1432.98 1707.67,1435.75 1709.76,1438.24 1711.85,1440.48 1713.94,1442.49 1716.03,1444.3 1718.11,1420.16 1720.2,1424.14 1722.29,1427.73 1724.38,1430.95 1726.46,1433.86 1728.55,1436.48 1730.64,1438.84 1732.73,1440.97 1734.82,1442.88 1736.9,1444.61 1738.99,1420.82 1741.08,1424.64 1743.17,1428.09 1745.26,1431.21 1747.34,1434.02 1749.43,1436.56 1751.52,1438.85 1753.61,1440.93 1755.69,1442.8 1757.78,1444.5 1759.87,1420.43 1761.96,1424.2 1764.05,1427.61 1766.13,1430.69 1768.22,1433.49 1770.31,1436.02 1772.4,1438.31 1774.49,1440.38 1776.57,1442.26 1778.66,1443.96 1780.75,1445.51 1782.84,1422.82 1784.92,1426.28 1787.01,1429.41 1789.1,1432.25 1791.19,1434.83 1793.28,1437.17 1795.36,1439.3 1797.45,1441.23 1799.54,1442.99 1801.63,1444.58 1803.72,1420.44 1805.8,1424.03 1807.89,1427.28 1809.98,1430.25 1812.07,1432.94 1814.15,1435.4 1816.24,1437.63 1818.33,1439.66 1820.42,1441.51 1822.51,1443.2 1824.59,1444.74 1826.68,1420.72 1828.77,1424.19 1830.86,1427.35 1832.95,1430.23 1835.03,1432.86 1837.12,1435.26 1839.21,1437.45 1841.3,1439.44 1843.38,1441.27 1845.47,1442.93 1847.56,1444.45 1849.65,1419.91 1851.74,1423.36 1853.82,1426.51 1855.91,1429.39 1858,1432.03 1860.09,1434.43 1862.17,1436.64 1864.26,1438.65 1866.35,1440.49 1868.44,1442.18 1870.53,1443.72 1872.61,1445.14 1874.7,1421.53 1876.79,1424.75 1878.88,1427.7 1880.97,1430.41 1883.05,1432.89 1885.14,1435.16 1887.23,1437.24 1889.32,1439.16 1891.4,1440.91 1893.49,1442.52 1895.58,1443.99 1897.67,1445.35 1899.76,1421.96 1901.84,1425.06 1903.93,1427.91 1906.02,1430.53 1908.11,1432.93 1910.2,1435.14 1912.28,1437.17 1914.37,1439.04 1916.46,1440.75 1918.55,1442.33 1920.63,1443.78 1922.72,1445.12 1924.81,1421.3 1926.9,1424.37 1928.99,1427.2 1931.07,1429.8 1933.16,1432.2 1935.25,1434.41 1937.34,1436.44 1939.43,1438.31 1941.51,1440.04 1943.6,1441.63 1945.69,1443.1 1947.78,1444.45 1949.86,1445.7 1951.95,1422.66 1954.04,1425.55 1956.13,1428.21 1958.22,1430.66 1960.3,1432.93 1962.39,1435.02 1964.48,1436.95 1966.57,1438.74 1968.65,1440.38 1970.74,1441.91 1972.83,1443.31 1974.92,1444.61 1977.01,1419.84 1979.09,1422.86 1981.18,1425.65 1983.27,1428.23 1985.36,1430.62 1987.45,1432.82 1989.53,1434.87 1991.62,1436.76 1993.71,1438.51 1995.8,1440.12 1997.88,1441.62 1999.97,1443.01 2002.06,1444.3 2004.15,1445.49 2006.24,1421.96 2008.32,1424.74 2010.41,1427.31 2012.5,1429.7 2014.59,1431.91 2016.68,1433.97 2018.76,1435.87 2020.85,1437.63 2022.94,1439.27 2025.03,1440.79 2027.11,1442.2 2029.2,1443.51 2031.29,1444.72 2033.38,1419.94 2035.47,1422.78 2037.55,1425.42 2039.64,1427.88 2041.73,1430.16 2043.82,1432.28 2045.91,1434.24 2047.99,1436.07 2050.08,1437.77 2052.17,1439.35 2054.26,1440.82 2056.34,1442.19 2058.43,1443.46 2060.52,1444.65 2062.61,1419.66 2064.7,1422.44 2066.78,1425.03 2068.87,1427.44 2070.96,1429.69 2073.05,1431.78 2075.14,1433.72 2077.22,1435.54 2079.31,1437.22 2081.4,1438.8 2083.49,1440.26 2085.57,1441.63 2087.66,1442.9 2089.75,1444.09 2091.84,1445.19 2093.93,1420.96 2096.01,1423.58 2098.1,1426.02 2100.19,1428.29 2102.28,1430.41 2104.36,1432.4 2106.45,1434.24 2108.54,1435.97 2110.63,1437.58 2112.72,1439.08 2114.8,1440.49 2116.89,1441.8 2118.98,1443.02 2121.07,1444.17 2123.16,1445.23 2125.24,1420.98 2127.33,1423.52 2129.42,1425.89 2131.51,1428.11 2133.59,1430.18 2135.68,1432.12 2137.77,1433.93 2139.86,1435.62 2141.95,1437.21 2144.03,1438.69 2146.12,1440.08 2148.21,1441.37 2150.3,1442.59 2152.39,1443.73 2154.47,1444.79 2156.56,1419.78 2158.65,1422.31 2160.74,1424.69 2162.82,1426.92 2164.91,1429 2167,1430.95 2169.09,1432.78 2171.18,1434.5 2173.26,1436.11 2175.35,1437.61 2177.44,1439.03 2179.53,1440.35 2181.62,1441.59 2183.7,1442.76 2185.79,1443.85 2187.88,1444.87 2189.97,1419.91 2192.05,1422.36 2194.14,1424.66 2196.23,1426.82 2198.32,1428.85 2200.41,1430.75 2202.49,1432.54 2204.58,1434.21 2206.67,1435.79 2208.76,1437.27 2210.85,1438.66 2212.93,1439.96 2215.02,1441.19 2217.11,1442.34 2219.2,1443.43 2221.28,1444.45 2223.37,1445.4 2225.46,1421.18 2227.55,1423.48 2229.64,1425.64 2231.72,1427.68 2233.81,1429.59 2235.9,1431.39 2237.99,1433.08 2240.07,1434.68 2242.16,1436.17 2244.25,1437.59 2246.34,1438.91 2248.43,1440.16 2250.51,1441.34 2252.6,1442.45 2254.69,1443.49 2256.78,1444.48 2258.87,1445.4 2260.95,1421.09 2263.04,1423.32 2265.13,1425.43 2267.22,1427.41 2269.3,1429.28 2271.39,1431.04 2273.48,1432.7 2275.57,1434.26 2277.66,1435.74 2279.74,1437.13 2281.83,1438.44 2283.92,1439.68 2286.01,1440.84 2288.1,1441.95 2290.18,1442.98 \"/>\n<path clip-path=\"url(#clip810)\" d=\"M2029.75 198.898 L2279.06 198.898 L2279.06 95.2176 L2029.75 95.2176  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip810)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2029.75,198.898 2279.06,198.898 2279.06,95.2176 2029.75,95.2176 2029.75,198.898 \"/>\n<polyline clip-path=\"url(#clip810)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2054.32,147.058 2201.71,147.058 \"/>\n<path clip-path=\"url(#clip810)\" d=\"M2226.81 129.778 L2253.96 129.778 L2253.96 133.342 L2232.11 160.402 L2254.49 160.402 L2254.49 164.338 L2226.28 164.338 L2226.28 160.773 L2248.13 133.713 L2226.81 133.713 L2226.81 129.778 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /></svg>\n","category":"page"},{"location":"ne13/","page":"ne13.jl","title":"ne13.jl","text":"Plot of the entropy of the system against temperature:","category":"page"},{"location":"ne13/","page":"ne13.jl","title":"ne13.jl","text":"plot(T,S,label=\"S\")","category":"page"},{"location":"ne13/","page":"ne13.jl","title":"ne13.jl","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip840\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip840)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip841\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip840)\" d=\"M314.583 1486.45 L2352.76 1486.45 L2352.76 47.2441 L314.583 47.2441  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip842\">\n    <rect x=\"314\" y=\"47\" width=\"2039\" height=\"1440\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip842)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"532.662,1486.45 532.662,47.2441 \"/>\n<polyline clip-path=\"url(#clip842)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"933.647,1486.45 933.647,47.2441 \"/>\n<polyline clip-path=\"url(#clip842)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1334.63,1486.45 1334.63,47.2441 \"/>\n<polyline clip-path=\"url(#clip842)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1735.62,1486.45 1735.62,47.2441 \"/>\n<polyline clip-path=\"url(#clip842)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2136.6,1486.45 2136.6,47.2441 \"/>\n<polyline clip-path=\"url(#clip842)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"314.583,1289.41 2352.76,1289.41 \"/>\n<polyline clip-path=\"url(#clip842)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"314.583,1083.44 2352.76,1083.44 \"/>\n<polyline clip-path=\"url(#clip842)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"314.583,877.474 2352.76,877.474 \"/>\n<polyline clip-path=\"url(#clip842)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"314.583,671.508 2352.76,671.508 \"/>\n<polyline clip-path=\"url(#clip842)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"314.583,465.541 2352.76,465.541 \"/>\n<polyline clip-path=\"url(#clip842)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"314.583,259.574 2352.76,259.574 \"/>\n<polyline clip-path=\"url(#clip842)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"314.583,53.6079 2352.76,53.6079 \"/>\n<polyline clip-path=\"url(#clip840)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"314.583,1486.45 2352.76,1486.45 \"/>\n<polyline clip-path=\"url(#clip840)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"532.662,1486.45 532.662,1467.55 \"/>\n<polyline clip-path=\"url(#clip840)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"933.647,1486.45 933.647,1467.55 \"/>\n<polyline clip-path=\"url(#clip840)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1334.63,1486.45 1334.63,1467.55 \"/>\n<polyline clip-path=\"url(#clip840)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1735.62,1486.45 1735.62,1467.55 \"/>\n<polyline clip-path=\"url(#clip840)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2136.6,1486.45 2136.6,1467.55 \"/>\n<path clip-path=\"url(#clip840)\" d=\"M499.826 1514.29 L518.183 1514.29 L518.183 1518.22 L504.109 1518.22 L504.109 1526.7 Q505.127 1526.35 506.146 1526.19 Q507.164 1526 508.183 1526 Q513.97 1526 517.349 1529.17 Q520.729 1532.34 520.729 1537.76 Q520.729 1543.34 517.257 1546.44 Q513.784 1549.52 507.465 1549.52 Q505.289 1549.52 503.021 1549.15 Q500.775 1548.78 498.368 1548.04 L498.368 1543.34 Q500.451 1544.47 502.673 1545.03 Q504.896 1545.58 507.372 1545.58 Q511.377 1545.58 513.715 1543.48 Q516.053 1541.37 516.053 1537.76 Q516.053 1534.15 513.715 1532.04 Q511.377 1529.94 507.372 1529.94 Q505.497 1529.94 503.623 1530.35 Q501.771 1530.77 499.826 1531.65 L499.826 1514.29 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip840)\" d=\"M529.942 1542.97 L534.826 1542.97 L534.826 1548.85 L529.942 1548.85 L529.942 1542.97 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip840)\" d=\"M555.011 1517.37 Q551.4 1517.37 549.571 1520.93 Q547.766 1524.47 547.766 1531.6 Q547.766 1538.71 549.571 1542.27 Q551.4 1545.82 555.011 1545.82 Q558.645 1545.82 560.451 1542.27 Q562.28 1538.71 562.28 1531.6 Q562.28 1524.47 560.451 1520.93 Q558.645 1517.37 555.011 1517.37 M555.011 1513.66 Q560.821 1513.66 563.877 1518.27 Q566.955 1522.85 566.955 1531.6 Q566.955 1540.33 563.877 1544.94 Q560.821 1549.52 555.011 1549.52 Q549.201 1549.52 546.122 1544.94 Q543.067 1540.33 543.067 1531.6 Q543.067 1522.85 546.122 1518.27 Q549.201 1513.66 555.011 1513.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip840)\" d=\"M899.967 1514.29 L922.189 1514.29 L922.189 1516.28 L909.642 1548.85 L904.758 1548.85 L916.564 1518.22 L899.967 1518.22 L899.967 1514.29 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip840)\" d=\"M931.309 1542.97 L936.193 1542.97 L936.193 1548.85 L931.309 1548.85 L931.309 1542.97 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip840)\" d=\"M946.425 1514.29 L964.781 1514.29 L964.781 1518.22 L950.707 1518.22 L950.707 1526.7 Q951.725 1526.35 952.744 1526.19 Q953.763 1526 954.781 1526 Q960.568 1526 963.948 1529.17 Q967.327 1532.34 967.327 1537.76 Q967.327 1543.34 963.855 1546.44 Q960.383 1549.52 954.063 1549.52 Q951.888 1549.52 949.619 1549.15 Q947.374 1548.78 944.966 1548.04 L944.966 1543.34 Q947.05 1544.47 949.272 1545.03 Q951.494 1545.58 953.971 1545.58 Q957.975 1545.58 960.313 1543.48 Q962.651 1541.37 962.651 1537.76 Q962.651 1534.15 960.313 1532.04 Q957.975 1529.94 953.971 1529.94 Q952.096 1529.94 950.221 1530.35 Q948.369 1530.77 946.425 1531.65 L946.425 1514.29 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip840)\" d=\"M1286.7 1544.91 L1294.34 1544.91 L1294.34 1518.55 L1286.03 1520.21 L1286.03 1515.95 L1294.3 1514.29 L1298.97 1514.29 L1298.97 1544.91 L1306.61 1544.91 L1306.61 1548.85 L1286.7 1548.85 L1286.7 1544.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip840)\" d=\"M1326.06 1517.37 Q1322.44 1517.37 1320.62 1520.93 Q1318.81 1524.47 1318.81 1531.6 Q1318.81 1538.71 1320.62 1542.27 Q1322.44 1545.82 1326.06 1545.82 Q1329.69 1545.82 1331.5 1542.27 Q1333.32 1538.71 1333.32 1531.6 Q1333.32 1524.47 1331.5 1520.93 Q1329.69 1517.37 1326.06 1517.37 M1326.06 1513.66 Q1331.87 1513.66 1334.92 1518.27 Q1338 1522.85 1338 1531.6 Q1338 1540.33 1334.92 1544.94 Q1331.87 1549.52 1326.06 1549.52 Q1320.25 1549.52 1317.17 1544.94 Q1314.11 1540.33 1314.11 1531.6 Q1314.11 1522.85 1317.17 1518.27 Q1320.25 1513.66 1326.06 1513.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip840)\" d=\"M1346.22 1542.97 L1351.1 1542.97 L1351.1 1548.85 L1346.22 1548.85 L1346.22 1542.97 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip840)\" d=\"M1371.29 1517.37 Q1367.68 1517.37 1365.85 1520.93 Q1364.04 1524.47 1364.04 1531.6 Q1364.04 1538.71 1365.85 1542.27 Q1367.68 1545.82 1371.29 1545.82 Q1374.92 1545.82 1376.73 1542.27 Q1378.56 1538.71 1378.56 1531.6 Q1378.56 1524.47 1376.73 1520.93 Q1374.92 1517.37 1371.29 1517.37 M1371.29 1513.66 Q1377.1 1513.66 1380.15 1518.27 Q1383.23 1522.85 1383.23 1531.6 Q1383.23 1540.33 1380.15 1544.94 Q1377.1 1549.52 1371.29 1549.52 Q1365.48 1549.52 1362.4 1544.94 Q1359.34 1540.33 1359.34 1531.6 Q1359.34 1522.85 1362.4 1518.27 Q1365.48 1513.66 1371.29 1513.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip840)\" d=\"M1688.19 1544.91 L1695.83 1544.91 L1695.83 1518.55 L1687.52 1520.21 L1687.52 1515.95 L1695.78 1514.29 L1700.46 1514.29 L1700.46 1544.91 L1708.09 1544.91 L1708.09 1548.85 L1688.19 1548.85 L1688.19 1544.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip840)\" d=\"M1721.57 1544.91 L1737.89 1544.91 L1737.89 1548.85 L1715.94 1548.85 L1715.94 1544.91 Q1718.6 1542.16 1723.19 1537.53 Q1727.79 1532.88 1728.97 1531.53 Q1731.22 1529.01 1732.1 1527.27 Q1733 1525.51 1733 1523.82 Q1733 1521.07 1731.06 1519.33 Q1729.14 1517.6 1726.03 1517.6 Q1723.83 1517.6 1721.38 1518.36 Q1718.95 1519.13 1716.17 1520.68 L1716.17 1515.95 Q1719 1514.82 1721.45 1514.24 Q1723.9 1513.66 1725.94 1513.66 Q1731.31 1513.66 1734.51 1516.35 Q1737.7 1519.03 1737.7 1523.52 Q1737.7 1525.65 1736.89 1527.57 Q1736.1 1529.47 1734 1532.07 Q1733.42 1532.74 1730.32 1535.95 Q1727.21 1539.15 1721.57 1544.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip840)\" d=\"M1747.7 1542.97 L1752.58 1542.97 L1752.58 1548.85 L1747.7 1548.85 L1747.7 1542.97 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip840)\" d=\"M1762.82 1514.29 L1781.17 1514.29 L1781.17 1518.22 L1767.1 1518.22 L1767.1 1526.7 Q1768.12 1526.35 1769.14 1526.19 Q1770.15 1526 1771.17 1526 Q1776.96 1526 1780.34 1529.17 Q1783.72 1532.34 1783.72 1537.76 Q1783.72 1543.34 1780.25 1546.44 Q1776.77 1549.52 1770.46 1549.52 Q1768.28 1549.52 1766.01 1549.15 Q1763.77 1548.78 1761.36 1548.04 L1761.36 1543.34 Q1763.44 1544.47 1765.66 1545.03 Q1767.89 1545.58 1770.36 1545.58 Q1774.37 1545.58 1776.7 1543.48 Q1779.04 1541.37 1779.04 1537.76 Q1779.04 1534.15 1776.7 1532.04 Q1774.37 1529.94 1770.36 1529.94 Q1768.49 1529.94 1766.61 1530.35 Q1764.76 1530.77 1762.82 1531.65 L1762.82 1514.29 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip840)\" d=\"M2088.67 1544.91 L2096.31 1544.91 L2096.31 1518.55 L2088 1520.21 L2088 1515.95 L2096.27 1514.29 L2100.94 1514.29 L2100.94 1544.91 L2108.58 1544.91 L2108.58 1548.85 L2088.67 1548.85 L2088.67 1544.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip840)\" d=\"M2118.07 1514.29 L2136.43 1514.29 L2136.43 1518.22 L2122.35 1518.22 L2122.35 1526.7 Q2123.37 1526.35 2124.39 1526.19 Q2125.41 1526 2126.43 1526 Q2132.22 1526 2135.6 1529.17 Q2138.98 1532.34 2138.98 1537.76 Q2138.98 1543.34 2135.5 1546.44 Q2132.03 1549.52 2125.71 1549.52 Q2123.54 1549.52 2121.27 1549.15 Q2119.02 1548.78 2116.61 1548.04 L2116.61 1543.34 Q2118.7 1544.47 2120.92 1545.03 Q2123.14 1545.58 2125.62 1545.58 Q2129.62 1545.58 2131.96 1543.48 Q2134.3 1541.37 2134.3 1537.76 Q2134.3 1534.15 2131.96 1532.04 Q2129.62 1529.94 2125.62 1529.94 Q2123.74 1529.94 2121.87 1530.35 Q2120.02 1530.77 2118.07 1531.65 L2118.07 1514.29 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip840)\" d=\"M2148.19 1542.97 L2153.07 1542.97 L2153.07 1548.85 L2148.19 1548.85 L2148.19 1542.97 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip840)\" d=\"M2173.26 1517.37 Q2169.65 1517.37 2167.82 1520.93 Q2166.01 1524.47 2166.01 1531.6 Q2166.01 1538.71 2167.82 1542.27 Q2169.65 1545.82 2173.26 1545.82 Q2176.89 1545.82 2178.7 1542.27 Q2180.53 1538.71 2180.53 1531.6 Q2180.53 1524.47 2178.7 1520.93 Q2176.89 1517.37 2173.26 1517.37 M2173.26 1513.66 Q2179.07 1513.66 2182.12 1518.27 Q2185.2 1522.85 2185.2 1531.6 Q2185.2 1540.33 2182.12 1544.94 Q2179.07 1549.52 2173.26 1549.52 Q2167.45 1549.52 2164.37 1544.94 Q2161.31 1540.33 2161.31 1531.6 Q2161.31 1522.85 2164.37 1518.27 Q2167.45 1513.66 2173.26 1513.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip840)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"314.583,1486.45 314.583,47.2441 \"/>\n<polyline clip-path=\"url(#clip840)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"314.583,1289.41 333.481,1289.41 \"/>\n<polyline clip-path=\"url(#clip840)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"314.583,1083.44 333.481,1083.44 \"/>\n<polyline clip-path=\"url(#clip840)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"314.583,877.474 333.481,877.474 \"/>\n<polyline clip-path=\"url(#clip840)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"314.583,671.508 333.481,671.508 \"/>\n<polyline clip-path=\"url(#clip840)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"314.583,465.541 333.481,465.541 \"/>\n<polyline clip-path=\"url(#clip840)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"314.583,259.574 333.481,259.574 \"/>\n<polyline clip-path=\"url(#clip840)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"314.583,53.6079 333.481,53.6079 \"/>\n<path clip-path=\"url(#clip840)\" d=\"M51.9875 1289.86 L81.6633 1289.86 L81.6633 1293.79 L51.9875 1293.79 L51.9875 1289.86 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip840)\" d=\"M101.756 1275.21 Q98.1447 1275.21 96.316 1278.77 Q94.5104 1282.31 94.5104 1289.44 Q94.5104 1296.55 96.316 1300.11 Q98.1447 1303.65 101.756 1303.65 Q105.39 1303.65 107.196 1300.11 Q109.024 1296.55 109.024 1289.44 Q109.024 1282.31 107.196 1278.77 Q105.39 1275.21 101.756 1275.21 M101.756 1271.5 Q107.566 1271.5 110.621 1276.11 Q113.7 1280.69 113.7 1289.44 Q113.7 1298.17 110.621 1302.78 Q107.566 1307.36 101.756 1307.36 Q95.9456 1307.36 92.8669 1302.78 Q89.8114 1298.17 89.8114 1289.44 Q89.8114 1280.69 92.8669 1276.11 Q95.9456 1271.5 101.756 1271.5 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip840)\" d=\"M121.918 1300.81 L126.802 1300.81 L126.802 1306.69 L121.918 1306.69 L121.918 1300.81 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip840)\" d=\"M146.987 1275.21 Q143.376 1275.21 141.547 1278.77 Q139.742 1282.31 139.742 1289.44 Q139.742 1296.55 141.547 1300.11 Q143.376 1303.65 146.987 1303.65 Q150.621 1303.65 152.427 1300.11 Q154.255 1296.55 154.255 1289.44 Q154.255 1282.31 152.427 1278.77 Q150.621 1275.21 146.987 1275.21 M146.987 1271.5 Q152.797 1271.5 155.853 1276.11 Q158.931 1280.69 158.931 1289.44 Q158.931 1298.17 155.853 1302.78 Q152.797 1307.36 146.987 1307.36 Q141.177 1307.36 138.098 1302.78 Q135.043 1298.17 135.043 1289.44 Q135.043 1280.69 138.098 1276.11 Q141.177 1271.5 146.987 1271.5 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip840)\" d=\"M177.149 1275.21 Q173.538 1275.21 171.709 1278.77 Q169.904 1282.31 169.904 1289.44 Q169.904 1296.55 171.709 1300.11 Q173.538 1303.65 177.149 1303.65 Q180.783 1303.65 182.589 1300.11 Q184.417 1296.55 184.417 1289.44 Q184.417 1282.31 182.589 1278.77 Q180.783 1275.21 177.149 1275.21 M177.149 1271.5 Q182.959 1271.5 186.015 1276.11 Q189.093 1280.69 189.093 1289.44 Q189.093 1298.17 186.015 1302.78 Q182.959 1307.36 177.149 1307.36 Q171.339 1307.36 168.26 1302.78 Q165.204 1298.17 165.204 1289.44 Q165.204 1280.69 168.26 1276.11 Q171.339 1271.5 177.149 1271.5 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip840)\" d=\"M197.357 1272.13 L215.713 1272.13 L215.713 1276.06 L201.639 1276.06 L201.639 1284.53 Q202.658 1284.19 203.676 1284.03 Q204.695 1283.84 205.714 1283.84 Q211.501 1283.84 214.88 1287.01 Q218.26 1290.18 218.26 1295.6 Q218.26 1301.18 214.788 1304.28 Q211.315 1307.36 204.996 1307.36 Q202.82 1307.36 200.552 1306.99 Q198.306 1306.62 195.899 1305.88 L195.899 1301.18 Q197.982 1302.31 200.204 1302.87 Q202.426 1303.42 204.903 1303.42 Q208.908 1303.42 211.246 1301.32 Q213.584 1299.21 213.584 1295.6 Q213.584 1291.99 211.246 1289.88 Q208.908 1287.78 204.903 1287.78 Q203.028 1287.78 201.153 1288.19 Q199.302 1288.61 197.357 1289.49 L197.357 1272.13 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip840)\" d=\"M231.5 1302.75 L247.82 1302.75 L247.82 1306.69 L225.875 1306.69 L225.875 1302.75 Q228.537 1300 233.121 1295.37 Q237.727 1290.72 238.908 1289.37 Q241.153 1286.85 242.033 1285.11 Q242.936 1283.35 242.936 1281.66 Q242.936 1278.91 240.991 1277.17 Q239.07 1275.44 235.968 1275.44 Q233.769 1275.44 231.315 1276.2 Q228.885 1276.97 226.107 1278.52 L226.107 1273.79 Q228.931 1272.66 231.385 1272.08 Q233.838 1271.5 235.875 1271.5 Q241.246 1271.5 244.44 1274.19 Q247.635 1276.87 247.635 1281.36 Q247.635 1283.49 246.824 1285.41 Q246.037 1287.31 243.931 1289.9 Q243.352 1290.58 240.25 1293.79 Q237.149 1296.99 231.5 1302.75 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip840)\" d=\"M257.681 1272.13 L276.037 1272.13 L276.037 1276.06 L261.963 1276.06 L261.963 1284.53 Q262.982 1284.19 264 1284.03 Q265.019 1283.84 266.037 1283.84 Q271.824 1283.84 275.204 1287.01 Q278.583 1290.18 278.583 1295.6 Q278.583 1301.18 275.111 1304.28 Q271.639 1307.36 265.32 1307.36 Q263.144 1307.36 260.875 1306.99 Q258.63 1306.62 256.223 1305.88 L256.223 1301.18 Q258.306 1302.31 260.528 1302.87 Q262.75 1303.42 265.227 1303.42 Q269.232 1303.42 271.57 1301.32 Q273.908 1299.21 273.908 1295.6 Q273.908 1291.99 271.57 1289.88 Q269.232 1287.78 265.227 1287.78 Q263.352 1287.78 261.477 1288.19 Q259.625 1288.61 257.681 1289.49 L257.681 1272.13 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip840)\" d=\"M50.9921 1083.89 L80.6679 1083.89 L80.6679 1087.83 L50.9921 1087.83 L50.9921 1083.89 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip840)\" d=\"M100.76 1069.24 Q97.1493 1069.24 95.3206 1072.8 Q93.515 1076.35 93.515 1083.48 Q93.515 1090.58 95.3206 1094.15 Q97.1493 1097.69 100.76 1097.69 Q104.395 1097.69 106.2 1094.15 Q108.029 1090.58 108.029 1083.48 Q108.029 1076.35 106.2 1072.8 Q104.395 1069.24 100.76 1069.24 M100.76 1065.54 Q106.571 1065.54 109.626 1070.14 Q112.705 1074.73 112.705 1083.48 Q112.705 1092.2 109.626 1096.81 Q106.571 1101.39 100.76 1101.39 Q94.9502 1101.39 91.8715 1096.81 Q88.816 1092.2 88.816 1083.48 Q88.816 1074.73 91.8715 1070.14 Q94.9502 1065.54 100.76 1065.54 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip840)\" d=\"M120.922 1094.84 L125.807 1094.84 L125.807 1100.72 L120.922 1100.72 L120.922 1094.84 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip840)\" d=\"M145.992 1069.24 Q142.381 1069.24 140.552 1072.8 Q138.746 1076.35 138.746 1083.48 Q138.746 1090.58 140.552 1094.15 Q142.381 1097.69 145.992 1097.69 Q149.626 1097.69 151.431 1094.15 Q153.26 1090.58 153.26 1083.48 Q153.26 1076.35 151.431 1072.8 Q149.626 1069.24 145.992 1069.24 M145.992 1065.54 Q151.802 1065.54 154.857 1070.14 Q157.936 1074.73 157.936 1083.48 Q157.936 1092.2 154.857 1096.81 Q151.802 1101.39 145.992 1101.39 Q140.181 1101.39 137.103 1096.81 Q134.047 1092.2 134.047 1083.48 Q134.047 1074.73 137.103 1070.14 Q140.181 1065.54 145.992 1065.54 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip840)\" d=\"M176.153 1069.24 Q172.542 1069.24 170.714 1072.8 Q168.908 1076.35 168.908 1083.48 Q168.908 1090.58 170.714 1094.15 Q172.542 1097.69 176.153 1097.69 Q179.788 1097.69 181.593 1094.15 Q183.422 1090.58 183.422 1083.48 Q183.422 1076.35 181.593 1072.8 Q179.788 1069.24 176.153 1069.24 M176.153 1065.54 Q181.964 1065.54 185.019 1070.14 Q188.098 1074.73 188.098 1083.48 Q188.098 1092.2 185.019 1096.81 Q181.964 1101.39 176.153 1101.39 Q170.343 1101.39 167.265 1096.81 Q164.209 1092.2 164.209 1083.48 Q164.209 1074.73 167.265 1070.14 Q170.343 1065.54 176.153 1065.54 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip840)\" d=\"M196.362 1066.16 L214.718 1066.16 L214.718 1070.1 L200.644 1070.1 L200.644 1078.57 Q201.663 1078.22 202.681 1078.06 Q203.7 1077.87 204.718 1077.87 Q210.505 1077.87 213.885 1081.04 Q217.264 1084.22 217.264 1089.63 Q217.264 1095.21 213.792 1098.31 Q210.32 1101.39 204.001 1101.39 Q201.825 1101.39 199.556 1101.02 Q197.311 1100.65 194.903 1099.91 L194.903 1095.21 Q196.987 1096.35 199.209 1096.9 Q201.431 1097.46 203.908 1097.46 Q207.913 1097.46 210.251 1095.35 Q212.588 1093.24 212.588 1089.63 Q212.588 1086.02 210.251 1083.92 Q207.913 1081.81 203.908 1081.81 Q202.033 1081.81 200.158 1082.23 Q198.306 1082.64 196.362 1083.52 L196.362 1066.16 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip840)\" d=\"M236.477 1069.24 Q232.866 1069.24 231.037 1072.8 Q229.232 1076.35 229.232 1083.48 Q229.232 1090.58 231.037 1094.15 Q232.866 1097.69 236.477 1097.69 Q240.111 1097.69 241.917 1094.15 Q243.746 1090.58 243.746 1083.48 Q243.746 1076.35 241.917 1072.8 Q240.111 1069.24 236.477 1069.24 M236.477 1065.54 Q242.287 1065.54 245.343 1070.14 Q248.422 1074.73 248.422 1083.48 Q248.422 1092.2 245.343 1096.81 Q242.287 1101.39 236.477 1101.39 Q230.667 1101.39 227.588 1096.81 Q224.533 1092.2 224.533 1083.48 Q224.533 1074.73 227.588 1070.14 Q230.667 1065.54 236.477 1065.54 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip840)\" d=\"M266.639 1069.24 Q263.028 1069.24 261.199 1072.8 Q259.394 1076.35 259.394 1083.48 Q259.394 1090.58 261.199 1094.15 Q263.028 1097.69 266.639 1097.69 Q270.273 1097.69 272.079 1094.15 Q273.908 1090.58 273.908 1083.48 Q273.908 1076.35 272.079 1072.8 Q270.273 1069.24 266.639 1069.24 M266.639 1065.54 Q272.449 1065.54 275.505 1070.14 Q278.583 1074.73 278.583 1083.48 Q278.583 1092.2 275.505 1096.81 Q272.449 1101.39 266.639 1101.39 Q260.829 1101.39 257.75 1096.81 Q254.695 1092.2 254.695 1083.48 Q254.695 1074.73 257.75 1070.14 Q260.829 1065.54 266.639 1065.54 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip840)\" d=\"M51.9875 877.926 L81.6633 877.926 L81.6633 881.861 L51.9875 881.861 L51.9875 877.926 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip840)\" d=\"M101.756 863.273 Q98.1447 863.273 96.316 866.838 Q94.5104 870.379 94.5104 877.509 Q94.5104 884.615 96.316 888.18 Q98.1447 891.722 101.756 891.722 Q105.39 891.722 107.196 888.18 Q109.024 884.615 109.024 877.509 Q109.024 870.379 107.196 866.838 Q105.39 863.273 101.756 863.273 M101.756 859.569 Q107.566 859.569 110.621 864.176 Q113.7 868.759 113.7 877.509 Q113.7 886.236 110.621 890.842 Q107.566 895.425 101.756 895.425 Q95.9456 895.425 92.8669 890.842 Q89.8114 886.236 89.8114 877.509 Q89.8114 868.759 92.8669 864.176 Q95.9456 859.569 101.756 859.569 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip840)\" d=\"M121.918 888.875 L126.802 888.875 L126.802 894.754 L121.918 894.754 L121.918 888.875 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip840)\" d=\"M146.987 863.273 Q143.376 863.273 141.547 866.838 Q139.742 870.379 139.742 877.509 Q139.742 884.615 141.547 888.18 Q143.376 891.722 146.987 891.722 Q150.621 891.722 152.427 888.18 Q154.255 884.615 154.255 877.509 Q154.255 870.379 152.427 866.838 Q150.621 863.273 146.987 863.273 M146.987 859.569 Q152.797 859.569 155.853 864.176 Q158.931 868.759 158.931 877.509 Q158.931 886.236 155.853 890.842 Q152.797 895.425 146.987 895.425 Q141.177 895.425 138.098 890.842 Q135.043 886.236 135.043 877.509 Q135.043 868.759 138.098 864.176 Q141.177 859.569 146.987 859.569 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip840)\" d=\"M177.149 863.273 Q173.538 863.273 171.709 866.838 Q169.904 870.379 169.904 877.509 Q169.904 884.615 171.709 888.18 Q173.538 891.722 177.149 891.722 Q180.783 891.722 182.589 888.18 Q184.417 884.615 184.417 877.509 Q184.417 870.379 182.589 866.838 Q180.783 863.273 177.149 863.273 M177.149 859.569 Q182.959 859.569 186.015 864.176 Q189.093 868.759 189.093 877.509 Q189.093 886.236 186.015 890.842 Q182.959 895.425 177.149 895.425 Q171.339 895.425 168.26 890.842 Q165.204 886.236 165.204 877.509 Q165.204 868.759 168.26 864.176 Q171.339 859.569 177.149 859.569 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip840)\" d=\"M210.158 864.268 L198.352 882.717 L210.158 882.717 L210.158 864.268 M208.931 860.194 L214.811 860.194 L214.811 882.717 L219.741 882.717 L219.741 886.606 L214.811 886.606 L214.811 894.754 L210.158 894.754 L210.158 886.606 L194.556 886.606 L194.556 882.092 L208.931 860.194 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip840)\" d=\"M226.292 860.194 L248.514 860.194 L248.514 862.185 L235.968 894.754 L231.084 894.754 L242.889 864.129 L226.292 864.129 L226.292 860.194 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip840)\" d=\"M257.681 860.194 L276.037 860.194 L276.037 864.129 L261.963 864.129 L261.963 872.601 Q262.982 872.254 264 872.092 Q265.019 871.907 266.037 871.907 Q271.824 871.907 275.204 875.078 Q278.583 878.25 278.583 883.666 Q278.583 889.245 275.111 892.347 Q271.639 895.425 265.32 895.425 Q263.144 895.425 260.875 895.055 Q258.63 894.685 256.223 893.944 L256.223 889.245 Q258.306 890.379 260.528 890.935 Q262.75 891.49 265.227 891.49 Q269.232 891.49 271.57 889.384 Q273.908 887.277 273.908 883.666 Q273.908 880.055 271.57 877.949 Q269.232 875.842 265.227 875.842 Q263.352 875.842 261.477 876.259 Q259.625 876.676 257.681 877.555 L257.681 860.194 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip840)\" d=\"M50.9921 671.959 L80.6679 671.959 L80.6679 675.894 L50.9921 675.894 L50.9921 671.959 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip840)\" d=\"M100.76 657.306 Q97.1493 657.306 95.3206 660.871 Q93.515 664.413 93.515 671.542 Q93.515 678.649 95.3206 682.214 Q97.1493 685.755 100.76 685.755 Q104.395 685.755 106.2 682.214 Q108.029 678.649 108.029 671.542 Q108.029 664.413 106.2 660.871 Q104.395 657.306 100.76 657.306 M100.76 653.603 Q106.571 653.603 109.626 658.209 Q112.705 662.792 112.705 671.542 Q112.705 680.269 109.626 684.876 Q106.571 689.459 100.76 689.459 Q94.9502 689.459 91.8715 684.876 Q88.816 680.269 88.816 671.542 Q88.816 662.792 91.8715 658.209 Q94.9502 653.603 100.76 653.603 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip840)\" d=\"M120.922 682.908 L125.807 682.908 L125.807 688.788 L120.922 688.788 L120.922 682.908 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip840)\" d=\"M145.992 657.306 Q142.381 657.306 140.552 660.871 Q138.746 664.413 138.746 671.542 Q138.746 678.649 140.552 682.214 Q142.381 685.755 145.992 685.755 Q149.626 685.755 151.431 682.214 Q153.26 678.649 153.26 671.542 Q153.26 664.413 151.431 660.871 Q149.626 657.306 145.992 657.306 M145.992 653.603 Q151.802 653.603 154.857 658.209 Q157.936 662.792 157.936 671.542 Q157.936 680.269 154.857 684.876 Q151.802 689.459 145.992 689.459 Q140.181 689.459 137.103 684.876 Q134.047 680.269 134.047 671.542 Q134.047 662.792 137.103 658.209 Q140.181 653.603 145.992 653.603 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip840)\" d=\"M176.153 657.306 Q172.542 657.306 170.714 660.871 Q168.908 664.413 168.908 671.542 Q168.908 678.649 170.714 682.214 Q172.542 685.755 176.153 685.755 Q179.788 685.755 181.593 682.214 Q183.422 678.649 183.422 671.542 Q183.422 664.413 181.593 660.871 Q179.788 657.306 176.153 657.306 M176.153 653.603 Q181.964 653.603 185.019 658.209 Q188.098 662.792 188.098 671.542 Q188.098 680.269 185.019 684.876 Q181.964 689.459 176.153 689.459 Q170.343 689.459 167.265 684.876 Q164.209 680.269 164.209 671.542 Q164.209 662.792 167.265 658.209 Q170.343 653.603 176.153 653.603 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip840)\" d=\"M209.163 658.302 L197.357 676.751 L209.163 676.751 L209.163 658.302 M207.936 654.228 L213.815 654.228 L213.815 676.751 L218.746 676.751 L218.746 680.639 L213.815 680.639 L213.815 688.788 L209.163 688.788 L209.163 680.639 L193.561 680.639 L193.561 676.126 L207.936 654.228 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip840)\" d=\"M226.524 654.228 L244.88 654.228 L244.88 658.163 L230.806 658.163 L230.806 666.635 Q231.824 666.288 232.843 666.126 Q233.862 665.94 234.88 665.94 Q240.667 665.94 244.047 669.112 Q247.426 672.283 247.426 677.7 Q247.426 683.278 243.954 686.38 Q240.482 689.459 234.162 689.459 Q231.987 689.459 229.718 689.088 Q227.473 688.718 225.065 687.977 L225.065 683.278 Q227.149 684.413 229.371 684.968 Q231.593 685.524 234.07 685.524 Q238.074 685.524 240.412 683.417 Q242.75 681.311 242.75 677.7 Q242.75 674.089 240.412 671.982 Q238.074 669.876 234.07 669.876 Q232.195 669.876 230.32 670.292 Q228.468 670.709 226.524 671.589 L226.524 654.228 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip840)\" d=\"M266.639 657.306 Q263.028 657.306 261.199 660.871 Q259.394 664.413 259.394 671.542 Q259.394 678.649 261.199 682.214 Q263.028 685.755 266.639 685.755 Q270.273 685.755 272.079 682.214 Q273.908 678.649 273.908 671.542 Q273.908 664.413 272.079 660.871 Q270.273 657.306 266.639 657.306 M266.639 653.603 Q272.449 653.603 275.505 658.209 Q278.583 662.792 278.583 671.542 Q278.583 680.269 275.505 684.876 Q272.449 689.459 266.639 689.459 Q260.829 689.459 257.75 684.876 Q254.695 680.269 254.695 671.542 Q254.695 662.792 257.75 658.209 Q260.829 653.603 266.639 653.603 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip840)\" d=\"M51.9875 465.992 L81.6633 465.992 L81.6633 469.928 L51.9875 469.928 L51.9875 465.992 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip840)\" d=\"M101.756 451.34 Q98.1447 451.34 96.316 454.904 Q94.5104 458.446 94.5104 465.576 Q94.5104 472.682 96.316 476.247 Q98.1447 479.789 101.756 479.789 Q105.39 479.789 107.196 476.247 Q109.024 472.682 109.024 465.576 Q109.024 458.446 107.196 454.904 Q105.39 451.34 101.756 451.34 M101.756 447.636 Q107.566 447.636 110.621 452.242 Q113.7 456.826 113.7 465.576 Q113.7 474.303 110.621 478.909 Q107.566 483.492 101.756 483.492 Q95.9456 483.492 92.8669 478.909 Q89.8114 474.303 89.8114 465.576 Q89.8114 456.826 92.8669 452.242 Q95.9456 447.636 101.756 447.636 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip840)\" d=\"M121.918 476.941 L126.802 476.941 L126.802 482.821 L121.918 482.821 L121.918 476.941 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip840)\" d=\"M146.987 451.34 Q143.376 451.34 141.547 454.904 Q139.742 458.446 139.742 465.576 Q139.742 472.682 141.547 476.247 Q143.376 479.789 146.987 479.789 Q150.621 479.789 152.427 476.247 Q154.255 472.682 154.255 465.576 Q154.255 458.446 152.427 454.904 Q150.621 451.34 146.987 451.34 M146.987 447.636 Q152.797 447.636 155.853 452.242 Q158.931 456.826 158.931 465.576 Q158.931 474.303 155.853 478.909 Q152.797 483.492 146.987 483.492 Q141.177 483.492 138.098 478.909 Q135.043 474.303 135.043 465.576 Q135.043 456.826 138.098 452.242 Q141.177 447.636 146.987 447.636 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip840)\" d=\"M177.149 451.34 Q173.538 451.34 171.709 454.904 Q169.904 458.446 169.904 465.576 Q169.904 472.682 171.709 476.247 Q173.538 479.789 177.149 479.789 Q180.783 479.789 182.589 476.247 Q184.417 472.682 184.417 465.576 Q184.417 458.446 182.589 454.904 Q180.783 451.34 177.149 451.34 M177.149 447.636 Q182.959 447.636 186.015 452.242 Q189.093 456.826 189.093 465.576 Q189.093 474.303 186.015 478.909 Q182.959 483.492 177.149 483.492 Q171.339 483.492 168.26 478.909 Q165.204 474.303 165.204 465.576 Q165.204 456.826 168.26 452.242 Q171.339 447.636 177.149 447.636 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip840)\" d=\"M210.158 452.335 L198.352 470.784 L210.158 470.784 L210.158 452.335 M208.931 448.261 L214.811 448.261 L214.811 470.784 L219.741 470.784 L219.741 474.673 L214.811 474.673 L214.811 482.821 L210.158 482.821 L210.158 474.673 L194.556 474.673 L194.556 470.159 L208.931 448.261 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip840)\" d=\"M231.5 478.886 L247.82 478.886 L247.82 482.821 L225.875 482.821 L225.875 478.886 Q228.537 476.131 233.121 471.502 Q237.727 466.849 238.908 465.506 Q241.153 462.983 242.033 461.247 Q242.936 459.488 242.936 457.798 Q242.936 455.043 240.991 453.307 Q239.07 451.571 235.968 451.571 Q233.769 451.571 231.315 452.335 Q228.885 453.099 226.107 454.65 L226.107 449.928 Q228.931 448.793 231.385 448.215 Q233.838 447.636 235.875 447.636 Q241.246 447.636 244.44 450.321 Q247.635 453.006 247.635 457.497 Q247.635 459.627 246.824 461.548 Q246.037 463.446 243.931 466.039 Q243.352 466.71 240.25 469.928 Q237.149 473.122 231.5 478.886 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip840)\" d=\"M257.681 448.261 L276.037 448.261 L276.037 452.196 L261.963 452.196 L261.963 460.668 Q262.982 460.321 264 460.159 Q265.019 459.974 266.037 459.974 Q271.824 459.974 275.204 463.145 Q278.583 466.316 278.583 471.733 Q278.583 477.312 275.111 480.414 Q271.639 483.492 265.32 483.492 Q263.144 483.492 260.875 483.122 Q258.63 482.752 256.223 482.011 L256.223 477.312 Q258.306 478.446 260.528 479.002 Q262.75 479.557 265.227 479.557 Q269.232 479.557 271.57 477.451 Q273.908 475.344 273.908 471.733 Q273.908 468.122 271.57 466.016 Q269.232 463.909 265.227 463.909 Q263.352 463.909 261.477 464.326 Q259.625 464.742 257.681 465.622 L257.681 448.261 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip840)\" d=\"M50.9921 260.026 L80.6679 260.026 L80.6679 263.961 L50.9921 263.961 L50.9921 260.026 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip840)\" d=\"M100.76 245.373 Q97.1493 245.373 95.3206 248.938 Q93.515 252.48 93.515 259.609 Q93.515 266.716 95.3206 270.28 Q97.1493 273.822 100.76 273.822 Q104.395 273.822 106.2 270.28 Q108.029 266.716 108.029 259.609 Q108.029 252.48 106.2 248.938 Q104.395 245.373 100.76 245.373 M100.76 241.669 Q106.571 241.669 109.626 246.276 Q112.705 250.859 112.705 259.609 Q112.705 268.336 109.626 272.942 Q106.571 277.526 100.76 277.526 Q94.9502 277.526 91.8715 272.942 Q88.816 268.336 88.816 259.609 Q88.816 250.859 91.8715 246.276 Q94.9502 241.669 100.76 241.669 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip840)\" d=\"M120.922 270.975 L125.807 270.975 L125.807 276.854 L120.922 276.854 L120.922 270.975 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip840)\" d=\"M145.992 245.373 Q142.381 245.373 140.552 248.938 Q138.746 252.48 138.746 259.609 Q138.746 266.716 140.552 270.28 Q142.381 273.822 145.992 273.822 Q149.626 273.822 151.431 270.28 Q153.26 266.716 153.26 259.609 Q153.26 252.48 151.431 248.938 Q149.626 245.373 145.992 245.373 M145.992 241.669 Q151.802 241.669 154.857 246.276 Q157.936 250.859 157.936 259.609 Q157.936 268.336 154.857 272.942 Q151.802 277.526 145.992 277.526 Q140.181 277.526 137.103 272.942 Q134.047 268.336 134.047 259.609 Q134.047 250.859 137.103 246.276 Q140.181 241.669 145.992 241.669 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip840)\" d=\"M176.153 245.373 Q172.542 245.373 170.714 248.938 Q168.908 252.48 168.908 259.609 Q168.908 266.716 170.714 270.28 Q172.542 273.822 176.153 273.822 Q179.788 273.822 181.593 270.28 Q183.422 266.716 183.422 259.609 Q183.422 252.48 181.593 248.938 Q179.788 245.373 176.153 245.373 M176.153 241.669 Q181.964 241.669 185.019 246.276 Q188.098 250.859 188.098 259.609 Q188.098 268.336 185.019 272.942 Q181.964 277.526 176.153 277.526 Q170.343 277.526 167.265 272.942 Q164.209 268.336 164.209 259.609 Q164.209 250.859 167.265 246.276 Q170.343 241.669 176.153 241.669 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip840)\" d=\"M209.163 246.368 L197.357 264.817 L209.163 264.817 L209.163 246.368 M207.936 242.294 L213.815 242.294 L213.815 264.817 L218.746 264.817 L218.746 268.706 L213.815 268.706 L213.815 276.854 L209.163 276.854 L209.163 268.706 L193.561 268.706 L193.561 264.192 L207.936 242.294 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip840)\" d=\"M236.477 245.373 Q232.866 245.373 231.037 248.938 Q229.232 252.48 229.232 259.609 Q229.232 266.716 231.037 270.28 Q232.866 273.822 236.477 273.822 Q240.111 273.822 241.917 270.28 Q243.746 266.716 243.746 259.609 Q243.746 252.48 241.917 248.938 Q240.111 245.373 236.477 245.373 M236.477 241.669 Q242.287 241.669 245.343 246.276 Q248.422 250.859 248.422 259.609 Q248.422 268.336 245.343 272.942 Q242.287 277.526 236.477 277.526 Q230.667 277.526 227.588 272.942 Q224.533 268.336 224.533 259.609 Q224.533 250.859 227.588 246.276 Q230.667 241.669 236.477 241.669 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip840)\" d=\"M266.639 245.373 Q263.028 245.373 261.199 248.938 Q259.394 252.48 259.394 259.609 Q259.394 266.716 261.199 270.28 Q263.028 273.822 266.639 273.822 Q270.273 273.822 272.079 270.28 Q273.908 266.716 273.908 259.609 Q273.908 252.48 272.079 248.938 Q270.273 245.373 266.639 245.373 M266.639 241.669 Q272.449 241.669 275.505 246.276 Q278.583 250.859 278.583 259.609 Q278.583 268.336 275.505 272.942 Q272.449 277.526 266.639 277.526 Q260.829 277.526 257.75 272.942 Q254.695 268.336 254.695 259.609 Q254.695 250.859 257.75 246.276 Q260.829 241.669 266.639 241.669 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip840)\" d=\"M51.9875 54.0592 L81.6633 54.0592 L81.6633 57.9944 L51.9875 57.9944 L51.9875 54.0592 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip840)\" d=\"M101.756 39.4065 Q98.1447 39.4065 96.316 42.9713 Q94.5104 46.513 94.5104 53.6426 Q94.5104 60.749 96.316 64.3138 Q98.1447 67.8555 101.756 67.8555 Q105.39 67.8555 107.196 64.3138 Q109.024 60.749 109.024 53.6426 Q109.024 46.513 107.196 42.9713 Q105.39 39.4065 101.756 39.4065 M101.756 35.7029 Q107.566 35.7029 110.621 40.3093 Q113.7 44.8926 113.7 53.6426 Q113.7 62.3694 110.621 66.9758 Q107.566 71.5591 101.756 71.5591 Q95.9456 71.5591 92.8669 66.9758 Q89.8114 62.3694 89.8114 53.6426 Q89.8114 44.8926 92.8669 40.3093 Q95.9456 35.7029 101.756 35.7029 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip840)\" d=\"M121.918 65.0083 L126.802 65.0083 L126.802 70.8879 L121.918 70.8879 L121.918 65.0083 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip840)\" d=\"M146.987 39.4065 Q143.376 39.4065 141.547 42.9713 Q139.742 46.513 139.742 53.6426 Q139.742 60.749 141.547 64.3138 Q143.376 67.8555 146.987 67.8555 Q150.621 67.8555 152.427 64.3138 Q154.255 60.749 154.255 53.6426 Q154.255 46.513 152.427 42.9713 Q150.621 39.4065 146.987 39.4065 M146.987 35.7029 Q152.797 35.7029 155.853 40.3093 Q158.931 44.8926 158.931 53.6426 Q158.931 62.3694 155.853 66.9758 Q152.797 71.5591 146.987 71.5591 Q141.177 71.5591 138.098 66.9758 Q135.043 62.3694 135.043 53.6426 Q135.043 44.8926 138.098 40.3093 Q141.177 35.7029 146.987 35.7029 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip840)\" d=\"M177.149 39.4065 Q173.538 39.4065 171.709 42.9713 Q169.904 46.513 169.904 53.6426 Q169.904 60.749 171.709 64.3138 Q173.538 67.8555 177.149 67.8555 Q180.783 67.8555 182.589 64.3138 Q184.417 60.749 184.417 53.6426 Q184.417 46.513 182.589 42.9713 Q180.783 39.4065 177.149 39.4065 M177.149 35.7029 Q182.959 35.7029 186.015 40.3093 Q189.093 44.8926 189.093 53.6426 Q189.093 62.3694 186.015 66.9758 Q182.959 71.5591 177.149 71.5591 Q171.339 71.5591 168.26 66.9758 Q165.204 62.3694 165.204 53.6426 Q165.204 44.8926 168.26 40.3093 Q171.339 35.7029 177.149 35.7029 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip840)\" d=\"M211.477 52.2537 Q214.834 52.9713 216.709 55.2398 Q218.607 57.5083 218.607 60.8416 Q218.607 65.9573 215.088 68.7582 Q211.57 71.5591 205.089 71.5591 Q202.913 71.5591 200.598 71.1193 Q198.306 70.7027 195.852 69.8462 L195.852 65.3323 Q197.797 66.4666 200.112 67.0453 Q202.426 67.624 204.95 67.624 Q209.348 67.624 211.639 65.8879 Q213.954 64.1518 213.954 60.8416 Q213.954 57.7861 211.801 56.0731 Q209.672 54.337 205.852 54.337 L201.825 54.337 L201.825 50.4944 L206.038 50.4944 Q209.487 50.4944 211.315 49.1287 Q213.144 47.7398 213.144 45.1473 Q213.144 42.4852 211.246 41.0732 Q209.371 39.638 205.852 39.638 Q203.931 39.638 201.732 40.0547 Q199.533 40.4713 196.894 41.351 L196.894 37.1843 Q199.556 36.4436 201.871 36.0732 Q204.209 35.7029 206.269 35.7029 Q211.593 35.7029 214.695 38.1334 Q217.797 40.5408 217.797 44.6611 Q217.797 47.5315 216.153 49.5222 Q214.51 51.4898 211.477 52.2537 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip840)\" d=\"M226.292 36.3279 L248.514 36.3279 L248.514 38.3186 L235.968 70.8879 L231.084 70.8879 L242.889 40.263 L226.292 40.263 L226.292 36.3279 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip840)\" d=\"M257.681 36.3279 L276.037 36.3279 L276.037 40.263 L261.963 40.263 L261.963 48.7352 Q262.982 48.388 264 48.2259 Q265.019 48.0408 266.037 48.0408 Q271.824 48.0408 275.204 51.212 Q278.583 54.3833 278.583 59.7999 Q278.583 65.3786 275.111 68.4805 Q271.639 71.5591 265.32 71.5591 Q263.144 71.5591 260.875 71.1888 Q258.63 70.8184 256.223 70.0777 L256.223 65.3786 Q258.306 66.5129 260.528 67.0684 Q262.75 67.624 265.227 67.624 Q269.232 67.624 271.57 65.5175 Q273.908 63.411 273.908 59.7999 Q273.908 56.1889 271.57 54.0824 Q269.232 51.9759 265.227 51.9759 Q263.352 51.9759 261.477 52.3926 Q259.625 52.8092 257.681 53.6889 L257.681 36.3279 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip842)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"372.268,1445.72 374.192,1445.1 376.117,1444.47 378.042,1443.85 379.967,1443.23 381.891,1442.61 383.816,1441.99 385.741,1441.37 387.665,1440.75 389.59,1440.12 391.515,1439.5 393.44,1438.88 395.364,1438.26 397.289,1437.63 399.214,1437.01 401.139,1436.38 403.063,1435.76 404.988,1435.14 406.913,1434.51 408.837,1433.89 410.762,1433.26 412.687,1432.63 414.612,1432.01 416.536,1431.38 418.461,1430.76 420.386,1430.13 422.311,1429.5 424.235,1428.87 426.16,1428.25 428.085,1427.62 430.009,1426.99 431.934,1426.36 433.859,1425.73 435.784,1425.1 437.708,1424.47 439.633,1423.84 441.558,1423.21 443.483,1422.58 445.407,1421.95 447.332,1421.32 449.257,1420.69 451.182,1420.05 453.106,1419.42 455.031,1418.79 456.956,1418.16 458.88,1417.52 460.805,1416.89 462.73,1416.25 464.655,1415.62 466.579,1414.98 468.504,1414.35 470.429,1413.71 472.354,1413.08 474.278,1412.44 476.203,1411.8 478.128,1411.17 480.052,1410.53 481.977,1409.89 483.902,1409.25 485.827,1408.61 487.751,1407.98 489.676,1407.34 491.601,1406.7 493.526,1406.06 495.45,1405.42 497.375,1404.77 499.3,1404.13 501.224,1403.49 503.149,1402.85 505.074,1402.21 506.999,1401.56 508.923,1400.92 510.848,1400.28 512.773,1399.63 514.698,1398.99 516.622,1398.34 518.547,1397.7 520.472,1397.05 522.396,1396.4 524.321,1395.76 526.246,1395.11 528.171,1394.46 530.095,1393.82 532.02,1393.17 533.945,1392.52 535.87,1391.87 537.794,1391.22 539.719,1390.57 541.644,1389.92 543.568,1389.27 545.493,1388.62 547.418,1387.97 549.343,1387.31 551.267,1386.66 553.192,1386.01 555.117,1385.35 557.042,1384.7 558.966,1384.05 560.891,1383.39 562.816,1382.74 564.741,1382.08 566.665,1381.42 568.59,1380.77 570.515,1380.11 572.439,1379.45 574.364,1378.8 576.289,1378.14 578.214,1377.48 580.138,1376.82 582.063,1376.16 583.988,1375.5 585.913,1374.84 587.837,1374.18 589.762,1373.52 591.687,1372.86 593.611,1372.19 595.536,1371.53 597.461,1370.87 599.386,1370.21 601.31,1369.54 603.235,1368.88 605.16,1368.21 607.085,1367.55 609.009,1366.88 610.934,1366.21 612.859,1365.55 614.783,1364.88 616.708,1364.21 618.633,1363.55 620.558,1362.88 622.482,1362.21 624.407,1361.54 626.332,1360.87 628.257,1360.2 630.181,1359.53 632.106,1358.86 634.031,1358.19 635.955,1357.51 637.88,1356.84 639.805,1356.17 641.73,1355.5 643.654,1354.82 645.579,1354.15 647.504,1353.47 649.429,1352.8 651.353,1352.12 653.278,1351.45 655.203,1350.77 657.127,1350.09 659.052,1349.42 660.977,1348.74 662.902,1348.06 664.826,1347.38 666.751,1346.7 668.676,1346.02 670.601,1345.34 672.525,1344.66 674.45,1343.98 676.375,1343.3 678.3,1342.62 680.224,1341.93 682.149,1341.25 684.074,1340.57 685.998,1339.88 687.923,1339.2 689.848,1338.52 691.773,1337.83 693.697,1337.14 695.622,1336.46 697.547,1335.77 699.472,1335.08 701.396,1334.4 703.321,1333.71 705.246,1333.02 707.17,1332.33 709.095,1331.64 711.02,1330.95 712.945,1330.26 714.869,1329.57 716.794,1328.88 718.719,1328.19 720.644,1327.5 722.568,1326.81 724.493,1326.11 726.418,1325.42 728.342,1324.73 730.267,1324.03 732.192,1323.34 734.117,1322.64 736.041,1321.94 737.966,1321.25 739.891,1320.55 741.816,1319.85 743.74,1319.16 745.665,1318.46 747.59,1317.76 749.514,1317.06 751.439,1316.36 753.364,1315.66 755.289,1314.96 757.213,1314.26 759.138,1313.56 761.063,1312.86 762.988,1312.15 764.912,1311.45 766.837,1310.75 768.762,1310.04 770.687,1309.34 772.611,1308.63 774.536,1307.93 776.461,1307.22 778.385,1306.52 780.31,1305.81 782.235,1305.1 784.16,1304.4 786.084,1303.69 788.009,1302.98 789.934,1302.27 791.859,1301.56 793.783,1300.85 795.708,1300.14 797.633,1299.43 799.557,1298.71 801.482,1298 803.407,1297.29 805.332,1296.58 807.256,1295.86 809.181,1295.15 811.106,1294.43 813.031,1293.72 814.955,1293 816.88,1292.28 818.805,1291.57 820.729,1290.85 822.654,1290.13 824.579,1289.41 826.504,1288.69 828.428,1287.97 830.353,1287.25 832.278,1286.53 834.203,1285.81 836.127,1285.09 838.052,1284.37 839.977,1283.65 841.901,1282.92 843.826,1282.2 845.751,1281.47 847.676,1280.75 849.6,1280.02 851.525,1279.3 853.45,1278.57 855.375,1277.84 857.299,1277.11 859.224,1276.38 861.149,1275.66 863.073,1274.93 864.998,1274.19 866.923,1273.46 868.848,1272.73 870.772,1272 872.697,1271.27 874.622,1270.53 876.547,1269.8 878.471,1269.07 880.396,1268.33 882.321,1267.59 884.246,1266.86 886.17,1266.12 888.095,1265.38 890.02,1264.64 891.944,1263.9 893.869,1263.17 895.794,1262.42 897.719,1261.68 899.643,1260.94 901.568,1260.2 903.493,1259.46 905.418,1258.71 907.342,1257.97 909.267,1257.22 911.192,1256.48 913.116,1255.73 915.041,1254.98 916.966,1254.24 918.891,1253.49 920.815,1252.74 922.74,1251.99 924.665,1251.24 926.59,1250.49 928.514,1249.74 930.439,1248.98 932.364,1248.23 934.288,1247.47 936.213,1246.72 938.138,1245.96 940.063,1245.21 941.987,1244.45 943.912,1243.69 945.837,1242.93 947.762,1242.17 949.686,1241.41 951.611,1240.65 953.536,1239.89 955.46,1239.13 957.385,1238.36 959.31,1237.6 961.235,1236.83 963.159,1236.07 965.084,1235.3 967.009,1234.53 968.934,1233.76 970.858,1232.99 972.783,1232.22 974.708,1231.45 976.632,1230.68 978.557,1229.91 980.482,1229.13 982.407,1228.36 984.331,1227.58 986.256,1226.8 988.181,1226.03 990.106,1225.25 992.03,1224.47 993.955,1223.69 995.88,1222.91 997.805,1222.12 999.729,1221.34 1001.65,1220.56 1003.58,1219.77 1005.5,1218.98 1007.43,1218.2 1009.35,1217.41 1011.28,1216.62 1013.2,1215.83 1015.13,1215.04 1017.05,1214.24 1018.98,1213.45 1020.9,1212.66 1022.83,1211.86 1024.75,1211.06 1026.68,1210.26 1028.6,1209.47 1030.52,1208.67 1032.45,1207.86 1034.37,1207.06 1036.3,1206.26 1038.22,1205.45 1040.15,1204.65 1042.07,1203.84 1044,1203.03 1045.92,1202.22 1047.85,1201.41 1049.77,1200.6 1051.7,1199.78 1053.62,1198.97 1055.55,1198.15 1057.47,1197.33 1059.4,1196.52 1061.32,1195.7 1063.25,1194.87 1065.17,1194.05 1067.09,1193.23 1069.02,1192.4 1070.94,1191.58 1072.87,1190.75 1074.79,1189.92 1076.72,1189.09 1078.64,1188.25 1080.57,1187.42 1082.49,1186.58 1084.42,1185.75 1086.34,1184.91 1088.27,1184.07 1090.19,1183.23 1092.12,1182.39 1094.04,1181.54 1095.97,1180.69 1097.89,1179.85 1099.82,1179 1101.74,1178.15 1103.66,1177.29 1105.59,1176.44 1107.51,1175.58 1109.44,1174.73 1111.36,1173.87 1113.29,1173 1115.21,1172.14 1117.14,1171.28 1119.06,1170.41 1120.99,1169.54 1122.91,1168.67 1124.84,1167.8 1126.76,1166.93 1128.69,1166.05 1130.61,1165.17 1132.54,1164.29 1134.46,1163.41 1136.38,1162.53 1138.31,1161.64 1140.23,1160.75 1142.16,1159.86 1144.08,1158.97 1146.01,1158.08 1147.93,1157.18 1149.86,1156.29 1151.78,1155.38 1153.71,1154.48 1155.63,1153.58 1157.56,1152.67 1159.48,1151.76 1161.41,1150.85 1163.33,1149.94 1165.26,1149.02 1167.18,1148.1 1169.11,1147.18 1171.03,1146.26 1172.95,1145.33 1174.88,1144.4 1176.8,1143.47 1178.73,1142.54 1180.65,1141.6 1182.58,1140.67 1184.5,1139.73 1186.43,1138.78 1188.35,1137.84 1190.28,1136.89 1192.2,1135.94 1194.13,1134.98 1196.05,1134.02 1197.98,1133.06 1199.9,1132.1 1201.83,1131.13 1203.75,1130.17 1205.68,1129.19 1207.6,1128.22 1209.52,1127.24 1211.45,1126.26 1213.37,1125.28 1215.3,1124.29 1217.22,1123.3 1219.15,1122.31 1221.07,1121.31 1223,1120.31 1224.92,1119.31 1226.85,1118.3 1228.77,1117.29 1230.7,1116.28 1232.62,1115.26 1234.55,1114.24 1236.47,1113.22 1238.4,1112.19 1240.32,1111.16 1242.25,1110.12 1244.17,1109.08 1246.09,1108.04 1248.02,1106.99 1249.94,1105.95 1251.87,1104.89 1253.79,1103.83 1255.72,1102.77 1257.64,1101.71 1259.57,1100.64 1261.49,1099.56 1263.42,1098.48 1265.34,1097.4 1267.27,1096.32 1269.19,1095.22 1271.12,1094.13 1273.04,1093.03 1274.97,1091.93 1276.89,1090.82 1278.81,1089.71 1280.74,1088.59 1282.66,1087.47 1284.59,1086.34 1286.51,1085.21 1288.44,1084.07 1290.36,1082.93 1292.29,1081.78 1294.21,1080.63 1296.14,1079.48 1298.06,1078.32 1299.99,1077.15 1301.91,1075.98 1303.84,1074.8 1305.76,1073.62 1307.69,1072.43 1309.61,1071.24 1311.54,1070.04 1313.46,1068.84 1315.38,1067.63 1317.31,1066.42 1319.23,1065.2 1321.16,1063.97 1323.08,1062.74 1325.01,1061.5 1326.93,1060.26 1328.86,1059.01 1330.78,1057.75 1332.71,1056.49 1334.63,1055.22 1336.56,1053.95 1338.48,1052.67 1340.41,1051.38 1342.33,1050.09 1344.26,1048.79 1346.18,1047.49 1348.11,1046.17 1350.03,1044.86 1351.95,1043.53 1353.88,1042.2 1355.8,1040.86 1357.73,1039.51 1359.65,1038.16 1361.58,1036.8 1363.5,1035.44 1365.43,1034.06 1367.35,1032.68 1369.28,1031.29 1371.2,1029.9 1373.13,1028.5 1375.05,1027.09 1376.98,1025.67 1378.9,1024.24 1380.83,1022.81 1382.75,1021.37 1384.68,1019.92 1386.6,1018.47 1388.52,1017 1390.45,1015.53 1392.37,1014.05 1394.3,1012.56 1396.22,1011.07 1398.15,1009.57 1400.07,1008.05 1402,1006.53 1403.92,1005.01 1405.85,1003.47 1407.77,1001.92 1409.7,1000.37 1411.62,998.809 1413.55,997.238 1415.47,995.659 1417.4,994.071 1419.32,992.475 1421.24,990.869 1423.17,989.255 1425.09,987.632 1427.02,986 1428.94,984.359 1430.87,982.709 1432.79,981.05 1434.72,979.381 1436.64,977.704 1438.57,976.017 1440.49,974.321 1442.42,972.615 1444.34,970.901 1446.27,969.177 1448.19,967.443 1450.12,965.7 1452.04,963.947 1453.97,962.185 1455.89,960.414 1457.81,958.632 1459.74,956.841 1461.66,955.04 1463.59,953.23 1465.51,951.41 1467.44,949.58 1469.36,947.74 1471.29,945.891 1473.21,944.031 1475.14,942.162 1477.06,940.283 1478.99,938.393 1480.91,936.494 1482.84,934.585 1484.76,932.666 1486.69,930.737 1488.61,928.798 1490.54,926.85 1492.46,924.891 1494.38,922.922 1496.31,920.943 1498.23,918.954 1500.16,916.955 1502.08,914.946 1504.01,912.927 1505.93,910.898 1507.86,908.859 1509.78,906.81 1511.71,904.752 1513.63,902.683 1515.56,900.604 1517.48,898.516 1519.41,896.417 1521.33,894.309 1523.26,892.191 1525.18,890.063 1527.1,887.925 1529.03,885.777 1530.95,883.62 1532.88,881.453 1534.8,879.277 1536.73,877.091 1538.65,874.895 1540.58,872.69 1542.5,870.475 1544.43,868.251 1546.35,866.018 1548.28,863.775 1550.2,861.523 1552.13,859.262 1554.05,856.992 1555.98,854.713 1557.9,852.424 1559.83,850.127 1561.75,847.821 1563.67,845.506 1565.6,843.183 1567.52,840.851 1569.45,838.51 1571.37,836.161 1573.3,833.803 1575.22,831.438 1577.15,829.064 1579.07,826.681 1581,824.291 1582.92,821.893 1584.85,819.487 1586.77,817.074 1588.7,814.653 1590.62,812.224 1592.55,809.788 1594.47,807.344 1596.4,804.893 1598.32,802.436 1600.24,799.971 1602.17,797.499 1604.09,795.021 1606.02,792.536 1607.94,790.044 1609.87,787.546 1611.79,785.042 1613.72,782.532 1615.64,780.016 1617.57,777.493 1619.49,774.965 1621.42,772.432 1623.34,769.893 1625.27,767.348 1627.19,764.799 1629.12,762.244 1631.04,759.684 1632.97,757.119 1634.89,754.55 1636.81,751.976 1638.74,749.398 1640.66,746.816 1642.59,744.229 1644.51,741.639 1646.44,739.044 1648.36,736.446 1650.29,733.845 1652.21,731.24 1654.14,728.631 1656.06,726.02 1657.99,723.406 1659.91,720.789 1661.84,718.169 1663.76,715.547 1665.69,712.922 1667.61,710.295 1669.53,707.666 1671.46,705.036 1673.38,702.403 1675.31,699.769 1677.23,697.133 1679.16,694.496 1681.08,691.858 1683.01,689.219 1684.93,686.579 1686.86,683.938 1688.78,681.297 1690.71,678.655 1692.63,676.013 1694.56,673.371 1696.48,670.729 1698.41,668.087 1700.33,665.445 1702.26,662.804 1704.18,660.163 1706.1,657.523 1708.03,654.884 1709.95,652.246 1711.88,649.609 1713.8,646.973 1715.73,644.339 1717.65,641.706 1719.58,639.075 1721.5,636.445 1723.43,633.818 1725.35,631.192 1727.28,628.569 1729.2,625.948 1731.13,623.33 1733.05,620.714 1734.98,618.101 1736.9,615.491 1738.83,612.883 1740.75,610.279 1742.67,607.678 1744.6,605.08 1746.52,602.485 1748.45,599.894 1750.37,597.307 1752.3,594.723 1754.22,592.143 1756.15,589.567 1758.07,586.995 1760,584.427 1761.92,581.864 1763.85,579.305 1765.77,576.75 1767.7,574.2 1769.62,571.654 1771.55,569.113 1773.47,566.577 1775.39,564.046 1777.32,561.52 1779.24,558.998 1781.17,556.482 1783.09,553.972 1785.02,551.466 1786.94,548.966 1788.87,546.471 1790.79,543.982 1792.72,541.498 1794.64,539.02 1796.57,536.548 1798.49,534.082 1800.42,531.621 1802.34,529.167 1804.27,526.718 1806.19,524.275 1808.12,521.839 1810.04,519.408 1811.96,516.984 1813.89,514.566 1815.81,512.154 1817.74,509.749 1819.66,507.35 1821.59,504.958 1823.51,502.572 1825.44,500.192 1827.36,497.819 1829.29,495.453 1831.21,493.093 1833.14,490.74 1835.06,488.394 1836.99,486.054 1838.91,483.721 1840.84,481.395 1842.76,479.076 1844.69,476.763 1846.61,474.458 1848.53,472.159 1850.46,469.867 1852.38,467.583 1854.31,465.305 1856.23,463.034 1858.16,460.77 1860.08,458.513 1862.01,456.263 1863.93,454.02 1865.86,451.784 1867.78,449.555 1869.71,447.333 1871.63,445.118 1873.56,442.91 1875.48,440.709 1877.41,438.515 1879.33,436.329 1881.26,434.149 1883.18,431.976 1885.1,429.811 1887.03,427.652 1888.95,425.501 1890.88,423.356 1892.8,421.219 1894.73,419.088 1896.65,416.965 1898.58,414.848 1900.5,412.739 1902.43,410.636 1904.35,408.541 1906.28,406.452 1908.2,404.371 1910.13,402.296 1912.05,400.228 1913.98,398.167 1915.9,396.113 1917.82,394.066 1919.75,392.026 1921.67,389.992 1923.6,387.966 1925.52,385.946 1927.45,383.932 1929.37,381.926 1931.3,379.926 1933.22,377.933 1935.15,375.947 1937.07,373.967 1939,371.994 1940.92,370.028 1942.85,368.068 1944.77,366.114 1946.7,364.167 1948.62,362.227 1950.55,360.293 1952.47,358.366 1954.39,356.445 1956.32,354.53 1958.24,352.622 1960.17,350.72 1962.09,348.824 1964.02,346.934 1965.94,345.051 1967.87,343.174 1969.79,341.303 1971.72,339.439 1973.64,337.58 1975.57,335.728 1977.49,333.881 1979.42,332.041 1981.34,330.206 1983.27,328.378 1985.19,326.555 1987.12,324.738 1989.04,322.927 1990.96,321.122 1992.89,319.323 1994.81,317.53 1996.74,315.742 1998.66,313.96 2000.59,312.183 2002.51,310.412 2004.44,308.647 2006.36,306.887 2008.29,305.133 2010.21,303.384 2012.14,301.641 2014.06,299.903 2015.99,298.171 2017.91,296.444 2019.84,294.722 2021.76,293.005 2023.69,291.294 2025.61,289.588 2027.53,287.887 2029.46,286.191 2031.38,284.5 2033.31,282.814 2035.23,281.134 2037.16,279.458 2039.08,277.788 2041.01,276.122 2042.93,274.461 2044.86,272.805 2046.78,271.154 2048.71,269.508 2050.63,267.866 2052.56,266.229 2054.48,264.597 2056.41,262.97 2058.33,261.347 2060.25,259.729 2062.18,258.115 2064.1,256.506 2066.03,254.901 2067.95,253.301 2069.88,251.705 2071.8,250.114 2073.73,248.527 2075.65,246.944 2077.58,245.366 2079.5,243.791 2081.43,242.222 2083.35,240.656 2085.28,239.094 2087.2,237.537 2089.13,235.984 2091.05,234.435 2092.98,232.89 2094.9,231.349 2096.82,229.812 2098.75,228.278 2100.67,226.749 2102.6,225.224 2104.52,223.702 2106.45,222.185 2108.37,220.671 2110.3,219.161 2112.22,217.655 2114.15,216.152 2116.07,214.653 2118,213.158 2119.92,211.667 2121.85,210.179 2123.77,208.694 2125.7,207.213 2127.62,205.736 2129.55,204.262 2131.47,202.792 2133.39,201.325 2135.32,199.862 2137.24,198.401 2139.17,196.945 2141.09,195.491 2143.02,194.041 2144.94,192.594 2146.87,191.151 2148.79,189.71 2150.72,188.273 2152.64,186.839 2154.57,185.408 2156.49,183.981 2158.42,182.556 2160.34,181.134 2162.27,179.716 2164.19,178.3 2166.11,176.888 2168.04,175.478 2169.96,174.072 2171.89,172.668 2173.81,171.268 2175.74,169.87 2177.66,168.475 2179.59,167.083 2181.51,165.693 2183.44,164.307 2185.36,162.923 2187.29,161.542 2189.21,160.164 2191.14,158.788 2193.06,157.415 2194.99,156.045 2196.91,154.677 2198.84,153.312 2200.76,151.95 2202.68,150.59 2204.61,149.233 2206.53,147.878 2208.46,146.526 2210.38,145.176 2212.31,143.829 2214.23,142.484 2216.16,141.141 2218.08,139.801 2220.01,138.464 2221.93,137.129 2223.86,135.796 2225.78,134.465 2227.71,133.137 2229.63,131.811 2231.56,130.487 2233.48,129.166 2235.41,127.847 2237.33,126.53 2239.25,125.215 2241.18,123.903 2243.1,122.593 2245.03,121.284 2246.95,119.978 2248.88,118.674 2250.8,117.373 2252.73,116.073 2254.65,114.775 2256.58,113.48 2258.5,112.186 2260.43,110.895 2262.35,109.605 2264.28,108.318 2266.2,107.032 2268.13,105.749 2270.05,104.467 2271.98,103.187 2273.9,101.909 2275.82,100.634 2277.75,99.3596 2279.67,98.0875 2281.6,96.8172 2283.52,95.5488 2285.45,94.2822 2287.37,93.0175 2289.3,91.7545 2291.22,90.4933 2293.15,89.2339 2295.07,87.9763 \"/>\n<path clip-path=\"url(#clip840)\" d=\"M382.523 198.898 L610.668 198.898 L610.668 95.2176 L382.523 95.2176  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip840)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"382.523,198.898 610.668,198.898 610.668,95.2176 382.523,95.2176 382.523,198.898 \"/>\n<polyline clip-path=\"url(#clip840)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"405.169,147.058 541.047,147.058 \"/>\n<path clip-path=\"url(#clip840)\" d=\"M585.939 130.912 L585.939 135.472 Q583.277 134.199 580.916 133.574 Q578.554 132.949 576.355 132.949 Q572.536 132.949 570.453 134.43 Q568.393 135.912 568.393 138.643 Q568.393 140.935 569.758 142.115 Q571.147 143.273 574.99 143.99 L577.814 144.569 Q583.045 145.565 585.522 148.088 Q588.022 150.588 588.022 154.801 Q588.022 159.824 584.642 162.416 Q581.286 165.009 574.781 165.009 Q572.328 165.009 569.55 164.453 Q566.795 163.898 563.832 162.81 L563.832 157.995 Q566.68 159.592 569.411 160.402 Q572.142 161.213 574.781 161.213 Q578.786 161.213 580.962 159.639 Q583.138 158.064 583.138 155.148 Q583.138 152.602 581.564 151.166 Q580.013 149.731 576.448 149.014 L573.601 148.458 Q568.369 147.416 566.031 145.194 Q563.693 142.972 563.693 139.014 Q563.693 134.43 566.911 131.791 Q570.152 129.153 575.823 129.153 Q578.254 129.153 580.777 129.592 Q583.3 130.032 585.939 130.912 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /></svg>\n","category":"page"},{"location":"ne13/","page":"ne13.jl","title":"ne13.jl","text":"","category":"page"},{"location":"ne13/","page":"ne13.jl","title":"ne13.jl","text":"This page was generated using Literate.jl.","category":"page"},{"location":"EnergyEvaluation/#EnergyEvaluation","page":"EnergyEvaluation","title":"EnergyEvaluation","text":"","category":"section"},{"location":"EnergyEvaluation/","page":"EnergyEvaluation","title":"EnergyEvaluation","text":"Modules = [ParallelTemperingMonteCarlo.EnergyEvaluation]","category":"page"},{"location":"EnergyEvaluation/#ParallelTemperingMonteCarlo.EnergyEvaluation","page":"EnergyEvaluation","title":"ParallelTemperingMonteCarlo.EnergyEvaluation","text":"module EnergyEvaluation\n\nStructs and functions relating to the calculation of energy. Includes both low and high level functions from individual PES calculations to state-specific functions. The structure is as follows:\n\nDefine abstract potential and potential_variables\nDefine PES functions\nDimerPotential \nELJB \nEmbedded Atom Model \nMachine Learning Potentials \nEnergyUpdate function\nCalculates a new energy based on a trialpos for each PES type \nInitialiseEnergy function \nCalculates potentialvariables and total energy from a new config to be used when initialising MCStates \nSetVariables function \nInitialises the potential variables, aka creates a blank version of the struct for each type of PES\n\n\n\n\n\n","category":"module"},{"location":"EnergyEvaluation/#ParallelTemperingMonteCarlo.EnergyEvaluation.AbstractDimerPotential","page":"EnergyEvaluation","title":"ParallelTemperingMonteCarlo.EnergyEvaluation.AbstractDimerPotential","text":"AbstractDimerPotential <: AbstractPotential\n\nImplemented dimer potentials:   \n\nELJPotential\nELJPotentialEven\n\nNeeds methods for \n\ndimer_energy_atom\ndimer_energy_config\n\n\n\n\n\n","category":"type"},{"location":"EnergyEvaluation/#ParallelTemperingMonteCarlo.EnergyEvaluation.AbstractDimerPotentialB","page":"EnergyEvaluation","title":"ParallelTemperingMonteCarlo.EnergyEvaluation.AbstractDimerPotentialB","text":"AbstractDimerPotentialB <: AbstractPotential\n\nImplemented dimer potentials:   \n\nELJPotentialB\n\n\n\n\n\n","category":"type"},{"location":"EnergyEvaluation/#ParallelTemperingMonteCarlo.EnergyEvaluation.AbstractMachineLearningPotential","page":"EnergyEvaluation","title":"ParallelTemperingMonteCarlo.EnergyEvaluation.AbstractMachineLearningPotential","text":"AbstractMachineLearningPotential <: AbstractPotential\n\nAbstract type for all Machine Learning Potentials.\n\n\n\n\n\n","category":"type"},{"location":"EnergyEvaluation/#ParallelTemperingMonteCarlo.EnergyEvaluation.AbstractPotential","page":"EnergyEvaluation","title":"ParallelTemperingMonteCarlo.EnergyEvaluation.AbstractPotential","text":"AbstractPotential\n\nAbstract type for possible potentials. implemented subtype: \n\nAbstractDimerPotential\nAbstractDimerPotentialB\nEmbeddedAtomPotential\nAbstractMachineLearningPotential\n\nWhen defining a new type, the functions relating a potential to the rest of the Monte Carlo code are explicated at the end of this file. Each potential also requires a PotentialVariable AbstractPotentialVariables struct to hold all non-static information relating a potential to the current configuration. \n\nNeeds method for:\n\nenergy_update!\ninitialise_energy \nset_variables\n\n\n\n\n\n","category":"type"},{"location":"EnergyEvaluation/#ParallelTemperingMonteCarlo.EnergyEvaluation.AbstractPotentialVariables","page":"EnergyEvaluation","title":"ParallelTemperingMonteCarlo.EnergyEvaluation.AbstractPotentialVariables","text":"AbstractPotentialVariables\n\nAn abstract type defining a class of mutable struct containing all the relevant vectors and arrays each potential will need throughout the course of a simulation to prevent over-definitions inside the MCState struct. Implemented subtypes:\n\nDimerPotentialVariables\nELJPotentialBVariables\nEmbeddedAtomVariables\nNNPVariables\n\n\n\n\n\n","category":"type"},{"location":"EnergyEvaluation/#ParallelTemperingMonteCarlo.EnergyEvaluation.DimerPotentialVariables","page":"EnergyEvaluation","title":"ParallelTemperingMonteCarlo.EnergyEvaluation.DimerPotentialVariables","text":"DimerPotentialVariables\n\nThe struct contains only the en_atom_vec::Vector{T}, particular special features for this potential type.  This vector is the energy per atom in the system.\n\n\n\n\n\n","category":"type"},{"location":"EnergyEvaluation/#ParallelTemperingMonteCarlo.EnergyEvaluation.ELJPotential","page":"EnergyEvaluation","title":"ParallelTemperingMonteCarlo.EnergyEvaluation.ELJPotential","text":"ELJPotential{N,T}\n\nImplements type for extended Lennard Jones potential; subtype of AbstractDimerPotential<:AbstractPotential; as sum over c_i r^(-i), starting with i=6 up to i=N+6 field name: coeff::SVector{N,T} : contains ELJ coefficients c_i from i=6 to i=N+6, coefficient for every power needed. Constructors:     ELJPotential{N}(c::VorS) where N     ELJPotential(c::VorS)\n\n\n\n\n\n","category":"type"},{"location":"EnergyEvaluation/#ParallelTemperingMonteCarlo.EnergyEvaluation.ELJPotentialB","page":"EnergyEvaluation","title":"ParallelTemperingMonteCarlo.EnergyEvaluation.ELJPotentialB","text":"ELJPotentialB{N,T}\n\nExtended Lennard-Jones Potential in a magnetic field where there is anisotropy in the coefficient vectors coeff_a::SVector{N,T}, coeff_b::SVector{N,T}, coeff_c::SVector{N,T}. Constructors:     ELJPotentialB{N}(a::VorS, b::VorS, c::VorS) where N     ELJPotentialB(a::VorS, b::VorS, c::VorS)\n\n\n\n\n\n","category":"type"},{"location":"EnergyEvaluation/#ParallelTemperingMonteCarlo.EnergyEvaluation.ELJPotentialBVariables","page":"EnergyEvaluation","title":"ParallelTemperingMonteCarlo.EnergyEvaluation.ELJPotentialBVariables","text":"ELJPotentialBVariables{T}\n\nContains the en_atom_vec::Array{T}, tan_mat::Matrix{T} and new_tan_vec::Vector{T} for the ELJPotentialB potential.\n\n\n\n\n\n","category":"type"},{"location":"EnergyEvaluation/#ParallelTemperingMonteCarlo.EnergyEvaluation.ELJPotentialEven","page":"EnergyEvaluation","title":"ParallelTemperingMonteCarlo.EnergyEvaluation.ELJPotentialEven","text":"ELJPotentialEven{N,T}\n\nImplements type for extended Lennard Jones potential with only even powers; subtype of AbstractDimerPotential<:AbstractPotential; as sum over c_i r^(-i), starting with i=6 up to i=N+6 with only even integers i field name: coeff::SVector{N,T} : contains ELJ coefficients c_i from i=6 to i=N+6 in steps of 2, coefficient for every even power needed. Constructors:     ELJPotentialEven{N}(c::VorS) where N     ELJPotentialEven(c::VorS)\n\n\n\n\n\n","category":"type"},{"location":"EnergyEvaluation/#ParallelTemperingMonteCarlo.EnergyEvaluation.EmbeddedAtomPotential","page":"EnergyEvaluation","title":"ParallelTemperingMonteCarlo.EnergyEvaluation.EmbeddedAtomPotential","text":"EmbeddedAtomPotential\n\nStruct containing the important quantities for calculating EAM (specifically Sutton-Chen type) potentials.\n\nFields:\nn::Float64 the exponent for the two-body repulsive ϕ component\nm::Float64 the exponent for the embedded electron density ρ\nean::Float64 multiplicative factor ϵa^n /2 for ϕ\neCam::Float64 multiplicative factor ϵCa^(m/2) for ρ \n\n\n\n\n\n","category":"type"},{"location":"EnergyEvaluation/#ParallelTemperingMonteCarlo.EnergyEvaluation.EmbeddedAtomPotential-NTuple{5, Number}","page":"EnergyEvaluation","title":"ParallelTemperingMonteCarlo.EnergyEvaluation.EmbeddedAtomPotential","text":"EmbeddedAtomPotential(n::Number,m::Number,ϵ::Number,C::Number,a::Number)\n\nFunction to initalise the EAM struct given the actual constants cited in papers. The exponents n,m, the energy constant ϵ the distance constant a standard in all EAM models, and a dimensionless parameter C scaling ρ with respect to ϕ.\n\n\n\n\n\n","category":"method"},{"location":"EnergyEvaluation/#ParallelTemperingMonteCarlo.EnergyEvaluation.EmbeddedAtomVariables","page":"EnergyEvaluation","title":"ParallelTemperingMonteCarlo.EnergyEvaluation.EmbeddedAtomVariables","text":"EmbeddedAtomVariables{T}\n\nContains the component_vector::Matrix{T} and new_component_vector::Matrix{T} for the EAM potential.\n\n\n\n\n\n","category":"type"},{"location":"EnergyEvaluation/#ParallelTemperingMonteCarlo.EnergyEvaluation.NNPVariables","page":"EnergyEvaluation","title":"ParallelTemperingMonteCarlo.EnergyEvaluation.NNPVariables","text":"NNPVariables{T}\n\nBundle of variables used for the NNP potential: \n\nen_atom_vec::Vector{T} – the per-atom energy vector\nnew_en_atom::Vector{T} – the new per-atom energy vector\ng_matrix::Matrix{T} – the G matrix\nf_matrix::Matrix{T} – the F matrix\nnew_g_matrix::Matrix{T} – the new G matrix\nnew_f_vec::Vector{T} – the new F vector\n\nTodo: someone who knows what these are should write a better description\n\n\n\n\n\n","category":"type"},{"location":"EnergyEvaluation/#ParallelTemperingMonteCarlo.EnergyEvaluation.NNPVariables2a","page":"EnergyEvaluation","title":"ParallelTemperingMonteCarlo.EnergyEvaluation.NNPVariables2a","text":"NNPVariables2a{T,Na,Ng} <: AbstractPotentialVariables\nT  variable type, usually Float64 \nNa number of atoms\nNg number of symmetry functions\n\nMutable parameters relevant to a 2 atom NNP using the RuNNer Package.  fields include:     -enatomvec: atomic energy corresponding to config     -newenatom: after an atom move, the new atomic energy     -gmatrix: matrix of symmetry values, length NgxNa     -fmatrix: matrix of cutoff function values aor atom pairs i,j     -newgmatrix: after atom move, new symmetry values     -newfvec: after atom move, new cutoff values\n\n\n\n\n\n","category":"type"},{"location":"EnergyEvaluation/#ParallelTemperingMonteCarlo.EnergyEvaluation.RuNNerPotential","page":"EnergyEvaluation","title":"ParallelTemperingMonteCarlo.EnergyEvaluation.RuNNerPotential","text":"RuNNerPotential <: AbstractMachineLearningPotential\n\nContains the important structs required for a neural network potential defined in the MachineLearningPotential package:\n\nFields are:\nnnp::NeuralNetworkPotential – a struct containing the weights, biases and neural network parameters.\nradsymfunctions::StructVector{RadialType2{Float64}} – a vector containing the hyperparameters used to calculate symmetry function values\nangsymfunctions::StructVector{AngularType3{Float64}} – a vector containing the hyperparameters used to calculate symmetry function values\nr_cut::Float64 – every symmetry function has an r_cut, but saving it here saves annoying memory unpacking \n\n\n\n\n\n","category":"type"},{"location":"EnergyEvaluation/#ParallelTemperingMonteCarlo.EnergyEvaluation.RuNNerPotential-Union{Tuple{N}, Tuple{NeuralNetworkPotential, Array{RadialType2{N}, 1}, Array{AngularType3{N}, 1}}} where N<:Number","page":"EnergyEvaluation","title":"ParallelTemperingMonteCarlo.EnergyEvaluation.RuNNerPotential","text":"RuNNerPotential(nnp::NeuralNetworkPotential,radsymvec::VorS,angsymvec::VorS)\n\nRuNNerPotential constructor/initializer function, given a neural network potential nnp and the symmetry functions radsymvec,angsymvec and the cutoff radius r_cut.\n\n\n\n\n\n","category":"method"},{"location":"EnergyEvaluation/#ParallelTemperingMonteCarlo.EnergyEvaluation.RuNNerPotential2Atom","page":"EnergyEvaluation","title":"ParallelTemperingMonteCarlo.EnergyEvaluation.RuNNerPotential2Atom","text":"RuNNerPotential2Atom <: AbstractMachineLearningPotential\n\nContains the important structs required for a neural network potential defined in the MachineLearningPotential package for a 2 atom system:     Fields are:     nnp# – structs containing the weights, biases and neural network parameters.     symmetryfunctions – a vector containing the hyperparameters used to calculate symmetry function values     rcut – every symmetry function has an rcut, but saving it here saves annoying memory unpacking \n\n\n\n\n\n","category":"type"},{"location":"EnergyEvaluation/#ParallelTemperingMonteCarlo.EnergyEvaluation.calc_components-Tuple{AbstractVector{Z} where Z<:Number, AbstractVector{Z} where Z<:Number, Number, Number}","page":"EnergyEvaluation","title":"ParallelTemperingMonteCarlo.EnergyEvaluation.calc_components","text":"calc_components(componentvec::VorS,distancevec::VorS,n::Number,m::Number)\ncalc_components(new_component_vec::Matrix{Float64},atomindex::Int,old_r2_vec::VorS,new_r2_vec::VorS,n::Number,m::Number)\ncalc_components(component_vec::Matrix{Float64},new_component_vec::Matrix{Float64},atomindex::Int,old_r2_vec::VorS,new_r2_vec::VorS,n::Number,m::Number)\n\nPrimary calculation of ϕ,ρ for atom i, given each other atom's distance to i in distancevec. eatomvec stores the ϕ and ρ components.\n\nSecond method also includes an existing new_component_vec atomindex and old and new interatomic distances from an atom at atomindex stored in vectors new_r2_vec,old_r2_vec. This calculates the new_component_vec based on the updated distances and returns this.\n\n\n\n\n\n","category":"method"},{"location":"EnergyEvaluation/#ParallelTemperingMonteCarlo.EnergyEvaluation.calc_new_runner_energy!-Tuple{NNPVariables, RuNNerPotential}","page":"EnergyEvaluation","title":"ParallelTemperingMonteCarlo.EnergyEvaluation.calc_new_runner_energy!","text":"calc_new_runner_energy!(potential_variables::NNPVariables,pot::RuNNerPotential)\n\nFunction designed to calculate the new per-atom energy according to the RuNNer forward pass with parameters defined in pot. utilises the new_g_matrix to redefine the new_en and new_en_atom variables within the potential_variables struct.\n\n\n\n\n\n","category":"method"},{"location":"EnergyEvaluation/#ParallelTemperingMonteCarlo.EnergyEvaluation.calc_new_runner_energy!-Union{Tuple{Ng}, Tuple{Na}, Tuple{T}, Tuple{N2}, Tuple{N1}, Tuple{Nang}, Tuple{Nrad}, Tuple{NNPVariables2a{T, Na, Ng}, RuNNerPotential2Atom{Nrad, Nang, N1, N2}}} where {Nrad, Nang, N1, N2, T, Na, Ng}","page":"EnergyEvaluation","title":"ParallelTemperingMonteCarlo.EnergyEvaluation.calc_new_runner_energy!","text":"calc_new_runner_energy!(potential_variables::NNPVariables2a{T,Na,Ng},pot::RuNNerPotential2Atom{Nrad,Nang,N1,N2}) where {T,Na,Ng} where {Nrad,Nang,N1,N2}\n\nFunction to calculate the energy of a new configuration after an atom move. Accepts the potentialvariables struct and runs a forward pass on the newg_matrix. Returns the new energy.\n\n\n\n\n\n","category":"method"},{"location":"EnergyEvaluation/#ParallelTemperingMonteCarlo.EnergyEvaluation.dimer_energy-Union{Tuple{N}, Tuple{ELJPotential{N}, Number}} where N","page":"EnergyEvaluation","title":"ParallelTemperingMonteCarlo.EnergyEvaluation.dimer_energy","text":"dimer_energy(pot::ELJPotential{N}, r2::Number) where N\ndimer_energy(pot::ELJPotentialEven{N}, r2::Number) where N\ndimer_energy(pot::ELJPotentialB{N}, r2::Number, z_angle::Number) where N\n\nCalculates energy of dimer for given potential pot and squared distance r2 between atoms Methods implemented for:\n\nELJPotential\nELJPotentialEven\n\nDimer energy when the distance square between two atom is r2 and the angle between the line connecting them and z-direction is z_angle. When r2 < 5.30, returns 1.\n\n\n\n\n\n","category":"method"},{"location":"EnergyEvaluation/#ParallelTemperingMonteCarlo.EnergyEvaluation.dimer_energy_atom-Tuple{Int64, AbstractVector{Z} where Z<:Number, AbstractDimerPotential}","page":"EnergyEvaluation","title":"ParallelTemperingMonteCarlo.EnergyEvaluation.dimer_energy_atom","text":"dimer_energy_atom(i::Int, d2vec::VorS, pot::AbstractDimerPotential)\ndimer_energy_atom(i::Int, d2vec::VorS, r_cut::Number, pot::AbstractDimerPotential)\ndimer_energy_atom(i::Int, d2vec::VorS, tanvec::VorS,pot::AbstractDimerPotentialB)\ndimer_energy_atom(i::Int, d2vec::VorS, tanvec::VorS, r_cut::Number, pot::AbstractDimerPotentialB)\n\nSums the dimer energies for atom i with all other atoms  Needs vector of squared distances d2vec between atom i and all other atoms in configuration See get_distance2_mat and potential information pot AbstractPotential \n\nSecond method includes additional variable r_cut to exclude distances outside the cutoff radius of the potential.\n\nFinal two methods relate to the use of magnetic field potentials such as the ELJB potential.\n\n\n\n\n\n","category":"method"},{"location":"EnergyEvaluation/#ParallelTemperingMonteCarlo.EnergyEvaluation.dimer_energy_config-Tuple{Matrix{Float64}, Int64, DimerPotentialVariables, AbstractDimerPotential}","page":"EnergyEvaluation","title":"ParallelTemperingMonteCarlo.EnergyEvaluation.dimer_energy_config","text":"dimer_energy_config(distmat::Matrix{Float64}, NAtoms::Int, potential_variables::DimerPotentialVariables, pot::AbstractDimerPotential)\ndimer_energy_config(distmat::Matrix{Float64}, NAtoms::Int, potential_variables::DimerPotentialVariables, r_cut::Number, bc::CubicBC, pot::AbstractDimerPotential)\ndimer_energy_config(distmat::Matrix{Float64}, NAtoms::Int, potential_variables::DimerPotentialVariables, r_cut::Number, bc::RhombicBC, pot::AbstractDimerPotential)\ndimer_energy_config(distmat::Matrix{Float64}, NAtoms::Int, potential_variables::ELJPotentialBVariables, pot::AbstractDimerPotentialB)\ndimer_energy_config(distmat::Matrix{Float64}, NAtoms::Int, potential_variables::ELJPotentialBVariables, r_cut::Number, bc::CubicBC, pot::AbstractDimerPotentialB)\n\nStores the total of dimer energies of one atom with all other atoms in vector and calculates total energy of configuration.\n\nFirst two methods are for standard dimer potentials, one with a cutoff radius, one without a cutoff radius. The final two methods are for the same calculation using a magnetic potential such as the ELJB potential. \n\nNeeds squared distances matrix, see get_distance2_mat  and potential information pot AbstractPotential \n\n\n\n\n\n","category":"method"},{"location":"EnergyEvaluation/#ParallelTemperingMonteCarlo.EnergyEvaluation.dimer_energy_update!-Tuple{Int64, Matrix{Float64}, AbstractVector{Z} where Z<:Number, Float64, AbstractDimerPotential}","page":"EnergyEvaluation","title":"ParallelTemperingMonteCarlo.EnergyEvaluation.dimer_energy_update!","text":"dimer_energy_update!(index::Int,dist2_mat::Matrix{Float64},new_dist2_vec::VorS,en_tot::Float64,pot::AbstractDimerPotential)\ndimer_energy_update!(index::Int,dist2_mat::Matrix{Float64},new_dist2_vec::VorS,en_tot::Float64,r_cut::Number,pot::AbstractDimerPotential)\ndimer_energy_update!(index::Int,dist2_mat::Matrix{Float64},tanmat::Matrix{Float64},new_dist2_vec::VorS,new_tan_vec::VorS,en_tot::Float64,pot::AbstractDimerPotentialB)\ndimer_energy_update!(index::Int,dist2_mat::Matrix{Float64},tanmat::Matrix{Float64},new_dist2_vec::VorS,new_tan_vec::VorS,en_tot::Float64,r_cut::Number,pot::AbstractDimerPotentialB)\n\ndimer_energy_update is the potential-level-call where for a single mc_state we take the new position pos, for atom at index , inside the current config , where the interatomic distances dist2_mat and the new vector based on the new position new_dist2_vec; these use the potential to calculate a deltaenergy and modify the current `entot`. These quantities are modified in place and returned.\n\nFinal two methods are for use with a dimer potential in a magnetic field, where there is anisotropy in the coefficients.\n\n\n\n\n\n","category":"method"},{"location":"EnergyEvaluation/#ParallelTemperingMonteCarlo.EnergyEvaluation.energy_update!-Union{Tuple{Etype}, Tuple{Etype, Config, AbstractPotentialVariables, Matrix{Float64}, Vector{Float64}, Number, AbstractDimerPotential}} where Etype<:NVTVariables","page":"EnergyEvaluation","title":"ParallelTemperingMonteCarlo.EnergyEvaluation.energy_update!","text":"energy_update!(ensemblevariables::Etype, config::Config, potential_variables, dist2_mat, new_dist2_vec, en_tot, pot::AbstractDimerPotential) where Etype <: NVTVariables\nenergy_update!(ensemblevariables::Etype, config::Config, potential_variables, dist2_mat, new_dist2_vec, en_tot, pot::AbstractDimerPotential) where Etype <: NPTVariables\nenergy_update!(ensemblevariables::Etype, config::Config, potential_variables::ELJPotentialBVariables, dist2_mat, new_dist2_vec, en_tot, pot::AbstractDimerPotentialB) where Etype <: NVTVariables\nenergy_update!(ensemblevariables::Etype, config::Config, potential_variables::ELJPotentialBVariables, dist2_mat, new_dist2_vec, en_tot, pot::AbstractDimerPotentialB) where Etype <: NPTVariables\nenergy_update!(ensemblevariables::Etype, config::Config, potential_variables::EmbeddedAtomVariables, dist2_mat, new_dist2_vec, en_tot, pot::EmbeddedAtomPotential) where Etype <: AbstractEnsembleVariables\nenergy_update!(ensemblevariables::Etype, config::Config, potential_variables::NNPVariables, dist2_mat, new_dist2_vec, en_tot, pot::RuNNerPotential) where Etype <: AbstractEnsembleVariables\nenergy_update!(ensemblevariables::Etype, config::Config, potential_variables::NNPVariables2a, dist2_mat, new_dist2_vec, en_tot, pot::RuNNerPotential2Atom) where Etype <: AbstractEnsembleVariables\n\nEnergy update function for use within a cycle. at the top level this is called with the new position trial_pos which is the index-th atom in the config it operates on the potential_variables along with the dist2_mat. Using pot the potential to find the new_en. \n\nHas additional methods including r_cut where appropriate for use with periodic boundary conditions.\n\nThis function is designed as a curry function. The generic get_energy! function operates on a vector of states, this function takes each state and the set potential and calls the potential specific energy_update! function.\n\nMethods defined for :\nAbstractDimerPotential\nAbstractDimerPotentialB\nEmbeddedAtomPotential\nRuNNerPotential\nRuNNerPotential2Atom\n\n\n\n\n\n","category":"method"},{"location":"EnergyEvaluation/#ParallelTemperingMonteCarlo.EnergyEvaluation.get_new_state_vars!-Union{Tuple{N2}, Tuple{N1}, Tuple{Nang}, Tuple{Nrad}, Tuple{Any, Any, Config, NNPVariables2a, Any, Any, RuNNerPotential2Atom{Nrad, Nang, N1, N2}}} where {Nrad, Nang, N1, N2}","page":"EnergyEvaluation","title":"ParallelTemperingMonteCarlo.EnergyEvaluation.get_new_state_vars!","text":"get_new_state_vars!(trial_pos, atomindex, config::Config, potential_variables::NNPVariables2a, dist2_mat, new_dist2_vec, pot::RuNNerPotential2Atom{Nrad, Nang, N1, N2}) where {Nrad, Nang, N1, N2}\nget_new_state_vars!(indices, config, potential_variables, dist2_mat, potential::RuNNerPotential2Atom{Nrad, Nang, N1, N2}) where {Nrad, Nang, N1, N2}\n\nFunction to calculate the altered state variables after an atom move: Takes the new trialposition, its index, the total config, the current state variables, the distance matrix and updated vector and potential values. Calculates the new cutoff function values, the updated symmetry function matrix and passes these back to potentialvariables.\n\nMethod 2 calculates the new state variables based on an atomswap. Accepts many of the same variables, but the main difference is the indices vector, indicating which two atoms we are swapping.  Also returns, most imporantly `potentialvariables.newgmatrix`.\n\n\n\n\n\n","category":"method"},{"location":"EnergyEvaluation/#ParallelTemperingMonteCarlo.EnergyEvaluation.get_new_state_vars!-Union{Tuple{Nang}, Tuple{Nrad}, Tuple{Union{Vector{T}, StaticArraysCore.SVector{3, T}} where T<:Number, Int64, Config, NNPVariables, Matrix{Float64}, Vector{Float64}, RuNNerPotential{Nrad, Nang}}} where {Nrad, Nang}","page":"EnergyEvaluation","title":"ParallelTemperingMonteCarlo.EnergyEvaluation.get_new_state_vars!","text":"get_new_state_vars!(trial_pos::PositionVector,atomindex::Int,config::Config,potential_variables::NNPVariables,dist2_mat::Matrix{Float64},new_dist2_vec::Vector{Float64},pot::RuNNerPotential{Nrad,Nang}) where {Nrad,Nang}\n\nFunction for finding the new state variables for calculating an NNP. Redefines new_f and new_g matrices based on the trial_pos of atom at atomindex and adjusts the parameters in the potential_variables according to the variables in pot.\n\n\n\n\n\n","category":"method"},{"location":"EnergyEvaluation/#ParallelTemperingMonteCarlo.EnergyEvaluation.initialise_energy-Tuple{Config, Matrix{Float64}, AbstractPotentialVariables, NVTVariables, AbstractDimerPotential}","page":"EnergyEvaluation","title":"ParallelTemperingMonteCarlo.EnergyEvaluation.initialise_energy","text":"initialise_energy(config::Config,dist2_mat::Matrix{Float64},potential_variables::AbstractPotentialVariables,ensemble_variables::NVTVariables,pot::AbstractDimerPotential)\ninitialise_energy(config::Config,dist2_mat::Matrix{Float64},potential_variables::AbstractPotentialVariables,ensemble_variables::NPTVariables,pot::AbstractDimerPotential)\ninitialise_energy(config::Config,dist2_mat::Matrix{Float64},potential_variables::AbstractPotentialVariables,ensemble_variables::NVTVariables,pot::AbstractDimerPotentialB)\ninitialise_energy(config::Config,dist2_mat::Matrix{Float64},potential_variables::AbstractPotentialVariables,ensemble_variables::NPTVariables,pot::AbstractDimerPotentialB)\ninitialise_energy(config::Config,dist2_mat::Matrix{Float64},potential_variables::AbstractPotentialVariables,ensemble_variables::AbstractEnsembleVariables,pot::EmbeddedAtomPotential)\ninitialise_energy(config::Config,dist2_mat::Matrix{Float64},potential_variables::AbstractPotentialVariables,ensemble_variables::AbstractEnsembleVariables,pot::RuNNerPotential)\n\nInitialise energy is used during the MCState call to set the starting energy of a config according to the potential as pot and the configurational variables potential_variables. Written with general input means the top-level is type-invariant.  Methods included for:     -   Dimer Potential with and without magnetic field and with and without PBC      -   EmbeddedAtomModel      -   Machine Learning Potentials \n\n\n\n\n\n","category":"method"},{"location":"EnergyEvaluation/#ParallelTemperingMonteCarlo.EnergyEvaluation.invrexp-Tuple{Number, Number, Number}","page":"EnergyEvaluation","title":"ParallelTemperingMonteCarlo.EnergyEvaluation.invrexp","text":"invrexp(r2::Number,n::Number,m::Number)\n\nFunction to calculate the ϕ,ρ components given a square distance r2 and the exponents n,m\n\n\n\n\n\n","category":"method"},{"location":"EnergyEvaluation/#ParallelTemperingMonteCarlo.EnergyEvaluation.lrc-Union{Tuple{N}, Tuple{Int64, Number, ELJPotentialEven{N}}} where N","page":"EnergyEvaluation","title":"ParallelTemperingMonteCarlo.EnergyEvaluation.lrc","text":"lrc(NAtoms::Int,r_cut::Number,pot::ELJPotentialEven{N}) where N\nlrc(NAtoms::Int,r_cut::Number,pot::ELJPotentialB{N}) where N\n\nThe long range correction for the extended Lennard-Jones potential (even). r_cut is the cutoff distance. lrc is an integral of all interactions outside the cutoff distance, using the uniform density approximation. Second method applies to the ELJ potential in extreme magnetic fields ELJB.\n\n\n\n\n\n","category":"method"},{"location":"EnergyEvaluation/#ParallelTemperingMonteCarlo.EnergyEvaluation.set_variables-Union{Tuple{T}, Tuple{BC}, Tuple{N}, Tuple{Config{N, BC, T}, Matrix{Float64}, AbstractDimerPotential}} where {N, BC, T}","page":"EnergyEvaluation","title":"ParallelTemperingMonteCarlo.EnergyEvaluation.set_variables","text":"set_variables(config::Config{N, BC, T}, dist_2_mat::Matrix{Float64}, pot::AbstractDimerPotential) where {N, BC, T}\nset_variables(config::Config{N, BC, T}, dist2_matrix::Matrix{Float64}, pot::AbstractDimerPotentialB) where {N, BC, T}\nset_variables(config::Config{N, BC, T}, dist2_matrix::Matrix{Float64}, pot::EmbeddedAtomPotential) where {N, BC, T}\n(set_variables(config::Config{N, BC, T}, dist2_mat::Matrix{Float64}, pot::RuNNerPotential{nrad, nang}) where {N, BC, T}) where {nrad, nang}\n(set_variables(config::Config{N, BC, T}, dist2_mat, pot::RuNNerPotential2Atom{nrad, nang, n1, n2}) where {N, BC, T}) where {nrad, nang, n1, n2}\n\nInitialises the PotentialVariable struct for the various potentials. Defined in this way to generalise the MCState function as this must be type-invariant with respect to the potential. \n\n\n\n\n\n","category":"method"},{"location":"EnergyEvaluation/#ParallelTemperingMonteCarlo.EnergyEvaluation.swap_energy_update-NTuple{6, Any}","page":"EnergyEvaluation","title":"ParallelTemperingMonteCarlo.EnergyEvaluation.swap_energy_update","text":"swap_energy_update(ensemble_variables,config,potential_variables,dist2_matrix,en_tot,pot)\n\nThis is used as a replacement for the energyupdate! function when swapping atoms. It does not function in quite the same way, but stands as a replacement. First calculates `getnewstatevars!and thencalcnewrunnerenergy!` returning the newenergy.\n\n\n\n\n\n","category":"method"},{"location":"Ensembles/#Ensembles","page":"Ensembles","title":"Ensembles","text":"","category":"section"},{"location":"Ensembles/","page":"Ensembles","title":"Ensembles","text":"Modules = [ParallelTemperingMonteCarlo.Ensembles]","category":"page"},{"location":"Ensembles/#ParallelTemperingMonteCarlo.Ensembles.AbstractEnsemble","page":"Ensembles","title":"ParallelTemperingMonteCarlo.Ensembles.AbstractEnsemble","text":"AbstractEnsemble\n\nAbstract type for ensemble:\n\nNVT: canonical ensemble\nNPT: isothermal,isobaric ensemble\n\nEach subtype requires a corresponding AbstractEnsembleVariables struct.\n\n\n\n\n\n","category":"type"},{"location":"Ensembles/#ParallelTemperingMonteCarlo.Ensembles.AbstractEnsembleVariables","page":"Ensembles","title":"ParallelTemperingMonteCarlo.Ensembles.AbstractEnsembleVariables","text":"AbstractEnsembleVariables\n\nAbstract struct for variables specific to ensemble that change during MC run (moves).\n\n\n\n\n\n","category":"type"},{"location":"Ensembles/#ParallelTemperingMonteCarlo.Ensembles.MoveStrategy","page":"Ensembles","title":"ParallelTemperingMonteCarlo.Ensembles.MoveStrategy","text":"MoveStrategy{N,Etype}\n\nA struct to define the types of moves performed per MC cycle.\n\nField names:\nensemble::Etype: type of ensemble (NVT, NPT)\nmovestrat::Vector{String}: vector of strings that describes moves made per MC cycle (see MoveType)\n\nConstructors:\n\nMoveStrategy(ensemble::NPT)\nMoveStrategy(ensemble::NVT)\nMoveStrategy(ensemble::NNVT)\n\n\n\n\n\n","category":"type"},{"location":"Ensembles/#ParallelTemperingMonteCarlo.Ensembles.MoveType","page":"Ensembles","title":"ParallelTemperingMonteCarlo.Ensembles.MoveType","text":"MoveType\n\nDefines the abstract type for moves to establish the MoveStrategy struct. Basic types are:     -   atommove::MoveType: basic move of a single atom      -   volumemove::MoveType: NPT ensemble requires volume changes to maintain pressure as constant      -   atomswap::MoveType: for systems with different atom types we need to exchange atoms (not yet implemented)\n\n\n\n\n\n","category":"type"},{"location":"Ensembles/#ParallelTemperingMonteCarlo.Ensembles.NNVT","page":"Ensembles","title":"ParallelTemperingMonteCarlo.Ensembles.NNVT","text":"NNVT <: AbstractEnsemble\n\nEnsemble designed for systems with two types of atoms.\n\nField names:\natomtypes: vector specifying the atomic number of the species\nnatoms: vector specifying how much of each species we have in the system\nnatommoves: defaults to n_total\nnatomswaps: defaults to 1 per cycle\n\n\n\n\n\n","category":"type"},{"location":"Ensembles/#ParallelTemperingMonteCarlo.Ensembles.NNVTVariables","page":"Ensembles","title":"ParallelTemperingMonteCarlo.Ensembles.NNVTVariables","text":"NNVTVariables <: AbstractEnsembleVariables\n\nNNVT - specific ensembles for moves made during an NNVT run. Fields include:     - index: Used for standard atom moves     - trialmove: Used for standard atom moves     - atomlist1: index of atoms of type one     - atom_list2: index of atoms of type two \n\n\n\n\n\n","category":"type"},{"location":"Ensembles/#ParallelTemperingMonteCarlo.Ensembles.NPT","page":"Ensembles","title":"ParallelTemperingMonteCarlo.Ensembles.NPT","text":"NPT\n\nIsothermal, isobaric ensemble.\n\nFieldnames: \nn_atoms::Int64: number of atoms\nn_atom_moves::Int64: number of atom moves; defaults to n_atoms\nn_volume_moves::Int64: number of volume moves; defaults to 1\nn_swap_moves::Int64: number of atom exchanges made; defaults to 0\npressure::Float64: the fixed pressure of the system\n\n\n\n\n\n","category":"type"},{"location":"Ensembles/#ParallelTemperingMonteCarlo.Ensembles.NPTVariables","page":"Ensembles","title":"ParallelTemperingMonteCarlo.Ensembles.NPTVariables","text":"NPTVariables <: AbstractEnsembleVariables\n\nNPT ensemble specific variable that change during MC run.\n\nField names:\nindex::Int64\ntrial_move::SVector{3,T}\ntrial_config::Config\nnew_dist2_mat::Matrix{T}\nr_cut::T\nnew_r_cut::T\n\nWhen trialing a new configuration we select an atom at index to move to new position trial_move,  the index can be greater than n_atoms in which case we trial a volume move,  involving a scaled trial_config with a new_r_cut having a new_dist2_mat this being a volume move.\n\n\n\n\n\n","category":"type"},{"location":"Ensembles/#ParallelTemperingMonteCarlo.Ensembles.NVT","page":"Ensembles","title":"ParallelTemperingMonteCarlo.Ensembles.NVT","text":"NVT\n\nCanonical ensemble.\n\nFieldnames: \nn_atoms::Int64: number of atoms\nn_atom_moves::Int64: number of atom moves; defaults to n_atoms\nn_swap_moves::Int64: number of atom exchanges made; defaults to 0\n\n\n\n\n\n","category":"type"},{"location":"Ensembles/#ParallelTemperingMonteCarlo.Ensembles.NVTVariables","page":"Ensembles","title":"ParallelTemperingMonteCarlo.Ensembles.NVTVariables","text":"NVTVariables <: AbstractEnsembleVariables\n\nNVT ensemble specific variables that change during MC run:\n\nFields:\nindex::Int64\ntrial_move::SVector{3,T}\n\nWhen trialing a new configuration we select an atom at index to move to position given by trial_move.\n\n\n\n\n\n","category":"type"},{"location":"Ensembles/#ParallelTemperingMonteCarlo.Ensembles.get_r_cut-Tuple{CubicBC}","page":"Ensembles","title":"ParallelTemperingMonteCarlo.Ensembles.get_r_cut","text":"get_r_cut(bc<:PeriodicBC)\n\nFinds the square of the cut-off radius r_cut that is implied by periodic boundary conditions (to avoid double-counting). Implemented for CubicBC and RhombicBC, the only viable boundary conditions for an NPT ensemble.\n\n\n\n\n\n","category":"method"},{"location":"Ensembles/#ParallelTemperingMonteCarlo.Ensembles.set_ensemble_variables-Union{Tuple{T}, Tuple{BC}, Tuple{N}, Tuple{Config{N, BC, T}, NVT}} where {N, BC, T}","page":"Ensembles","title":"ParallelTemperingMonteCarlo.Ensembles.set_ensemble_variables","text":"set_ensemble_variables(config::Config{N, BC, T}, ensemble::NVT) where {N, BC, T}\nset_ensemble_variables(config::Config{N, BC, T}, ensemble::NPT) where {N, BC, T}\nset_ensemble_variables(config::Config{N, BC, T}, ensemble::NNVT) where {N, BC, T}\n\nInitialises the instance of EnsembleVariables (with ensemble being NVT or NPT); required to allow for neutral initialisation in defining the MCState Main.ParallelTemperingMonteCarlo.MCStates.MCState struct. \n\n\n\n\n\n","category":"method"},{"location":"Configurations/#Configurations","page":"Configurations","title":"Configurations","text":"","category":"section"},{"location":"Configurations/","page":"Configurations","title":"Configurations","text":"Modules = [ParallelTemperingMonteCarlo.Configurations]","category":"page"},{"location":"Configurations/#ParallelTemperingMonteCarlo.Configurations","page":"Configurations","title":"ParallelTemperingMonteCarlo.Configurations","text":"module Configurations\n\nThis module defines types and functions for working with atomic configurations of N atoms.\n\nExported types\n\nConfig \n\nExported functions\n\ndistance2\nget_distance2_mat\n\n\n\n\n\n","category":"module"},{"location":"Configurations/#ParallelTemperingMonteCarlo.Configurations.Config","page":"Configurations","title":"ParallelTemperingMonteCarlo.Configurations.Config","text":"Config(pos::Vector{SVector{3,T}}, bc::BC) where BC <: AbstractBC\nConfig{N}(pos::Vector{SVector{3,T}}, bc::BC) where BC <: AbstractBC\nConfig(pos::PositionArray, bc::BC) where BC <: AbstractBC\n\nGenerates a configuration of N atomic positions, each position saved as SVector of length 3.\n\nFieldnames: \npos: vector of x,y, and z coordinates of every atom \nbc: boundary condition\n\n\n\n\n\n","category":"type"},{"location":"Configurations/#ParallelTemperingMonteCarlo.Configurations.distance2-Tuple{Union{Vector{T}, StaticArraysCore.SVector{3, T}} where T<:Number, Union{Vector{T}, StaticArraysCore.SVector{3, T}} where T<:Number}","page":"Configurations","title":"ParallelTemperingMonteCarlo.Configurations.distance2","text":"distance2(a::PositionVector,b::PositionVector) \ndistance2(a::PositionVector,b::PositionVector,bc::SphericalBC)\ndistance2(a::PositionVector,b::PositionVector,bc::CubicBC)\ndistance2(a::PositionVector,b::PositionVector,bc::RhombicBC)\n\nMethod 1&2 - Finds the distance between two positions a and b. Method 3 - Finds the distance between two positions a and the nearest image of b in a cubic box. Method 4 -  Finds the distance between two positions a and the nearest image of b in a rhombic box. Minimum image convension in the z-direction is the same as the cubic box. In x and y-direction, first the box is transformed into a rectangular box, then MIC is done, finally the new coordinates are transformed back.\n\n\n\n\n\n","category":"method"},{"location":"Configurations/#ParallelTemperingMonteCarlo.Configurations.get_centre-Tuple{Union{Array{Vector{T}, 1}, Array{StaticArraysCore.SVector{3, T}, 1}} where T<:Number, Int64}","page":"Configurations","title":"ParallelTemperingMonteCarlo.Configurations.get_centre","text":"get_centre(position::PositionArray,N::Int64)\n\nFunction to find the centre of mass of a configuration. Accepts the positions and number of positions and calculates the xyz coordinates of their centre.\n\n\n\n\n\n","category":"method"},{"location":"Configurations/#ParallelTemperingMonteCarlo.Configurations.get_distance2_mat-Union{Tuple{Config{N}}, Tuple{N}} where N","page":"Configurations","title":"ParallelTemperingMonteCarlo.Configurations.get_distance2_mat","text":"get_distance2_mat(conf::Config{N})\n\nBuilds the matrix of squared distances between positions of configuration.\n\n\n\n\n\n","category":"method"},{"location":"Configurations/#ParallelTemperingMonteCarlo.Configurations.get_tan-Tuple{Union{Vector{T}, StaticArraysCore.SVector{3, T}} where T<:Number, Union{Vector{T}, StaticArraysCore.SVector{3, T}} where T<:Number}","page":"Configurations","title":"ParallelTemperingMonteCarlo.Configurations.get_tan","text":"get_tan(a::PositionVector,b::PositionVector)\nget_tan(a::PositionVector,b::PositionVector,bc::SphericalBC)\nget_tan(a::PositionVector,b::PositionVector,bc::CubicBC)\nget_tan(a::PositionVector,b::PositionVector,bc::RhombicBC)\n\nMethod 1&2 : tan of the angle between the line connecting two points a and b, and the z-direction Method 3: tan of the angle between the line connecting two points a and the nearest image of b, and the z-direction in a cubic boundary Method 4:  tan of the angle between the line connecting two points a and the nearest image of b, and the z-direction in a rhombic boundary\n\n\n\n\n\n","category":"method"},{"location":"Configurations/#ParallelTemperingMonteCarlo.Configurations.get_tantheta_mat-Union{Tuple{BC}, Tuple{Config, BC}} where BC<:AbstractBC","page":"Configurations","title":"ParallelTemperingMonteCarlo.Configurations.get_tantheta_mat","text":"get_tantheta_mat(conf::Config,bc::BC) where BC <: AbstractBC\n\nBuilds the matrix of tan of angles between positions of configuration in a spherical boundary.\n\n\n\n\n\n","category":"method"},{"location":"Configurations/#ParallelTemperingMonteCarlo.Configurations.get_volume-Tuple{CubicBC}","page":"Configurations","title":"ParallelTemperingMonteCarlo.Configurations.get_volume","text":"get_volume(bc::CubicBC)\nget_volume(bc::RhombicBC)\n\nReturns the volume of a box according to its geometry for use where the ensemble does not imply a fixed V.\n\n\n\n\n\n","category":"method"},{"location":"Configurations/#ParallelTemperingMonteCarlo.Configurations.recentre!-Union{Tuple{Config{N, BC, T}}, Tuple{T}, Tuple{BC}, Tuple{N}} where {N, BC, T}","page":"Configurations","title":"ParallelTemperingMonteCarlo.Configurations.recentre!","text":"recentre!(conf::Config{N,BC,T}) where {N,BC,T}\n\nFunction to change the centre of mass of a configuration conf to [0,0,0] in Cartesian space.\n\n\n\n\n\n","category":"method"},{"location":"Multihistogram_NPT/#Multihistogram_NPT","page":"Multihistogram_NPT","title":"Multihistogram_NPT","text":"","category":"section"},{"location":"Multihistogram_NPT/","page":"Multihistogram_NPT","title":"Multihistogram_NPT","text":"Modules = [ParallelTemperingMonteCarlo.Multihistogram_NPT]","category":"page"},{"location":"Multihistogram_NPT/#ParallelTemperingMonteCarlo.Multihistogram_NPT.multihistogram_NPT-Tuple{AbstractEnsemble, TempGrid, Output, Number, Bool}","page":"Multihistogram_NPT","title":"ParallelTemperingMonteCarlo.Multihistogram_NPT.multihistogram_NPT","text":"multihistogram_NPT(ensemble::AbstractEnsemble, temp::TempGrid, results::Output, conv_threshold::Number, readfile::Bool; debug = false)\n\nMultihistogram analysis for NPT:\n\nconv_threshold is the convergence threshold, which user can choose.\ndebug kwarg determines whether to print debug information. Defaults to false.\nNow \"readfile\" can only be false.\nExample: multihistogram_NPT(ensemble, temp, results, 10^(-3), false)\n\n\n\n\n\n","category":"method"},{"location":"ReadSave/#ReadSave","page":"ReadSave","title":"ReadSave","text":"","category":"section"},{"location":"ReadSave/","page":"ReadSave","title":"ReadSave","text":"Modules = [ParallelTemperingMonteCarlo.ReadSave]","category":"page"},{"location":"ReadSave/#ParallelTemperingMonteCarlo.ReadSave","page":"ReadSave","title":"ParallelTemperingMonteCarlo.ReadSave","text":"Checkpoint\n\nModule designed to save relevant parameters and configurations throughout the simulation to allow restarting.\n\n\n\n\n\n","category":"module"},{"location":"ReadSave/#ParallelTemperingMonteCarlo.ReadSave.build_states-Tuple{MCParams, AbstractEnsemble, TempGrid, AbstractPotential}","page":"ReadSave","title":"ParallelTemperingMonteCarlo.ReadSave.build_states","text":"build_states(mc_params::MCParams, ensemble::AbstractEnsemble, temp::TempGrid, potential::AbstractPotential)\n\nFor use initialising states and outputs when NOT restarting, but beginning from files. Builds empty Output struct named results and a vector of mc_states using either: one configuration stored in config.data OR a series of configurations stored in config.i. NB if config.i doesn't exist the default will be config.1. In this way states can be initialised with different starting configurations.  \n\n\n\n\n\n","category":"method"},{"location":"ReadSave/#ParallelTemperingMonteCarlo.ReadSave.checkpoint-Tuple{Int64, Vector{T} where T<:MCState, Output, AbstractEnsemble, Bool}","page":"ReadSave","title":"ParallelTemperingMonteCarlo.ReadSave.checkpoint","text":"checkpoint(index::Int, mc_states::MCStateVector, results::Output, ensemble::AbstractEnsemble, rdfsave::Bool)\ncheckpoint(index::Int, mc_states::MCStateVector, results::Output, ensemble::NPT, rdfsave::Bool)\n\nFunction to save relevant information about the current state of the system at step index. Saves the configurations in each mc_state save_configs as well as the histograms stored in results. Optionally stores the volume histograms if using the NPT ensemble and the radial distribution functions if desired. \n\n\n\n\n\n","category":"method"},{"location":"ReadSave/#ParallelTemperingMonteCarlo.ReadSave.checkpoint_config-Union{Tuple{Etype}, Tuple{Ptype}, Tuple{BC}, Tuple{N}, Tuple{T}, Tuple{IO, MCState{T, N, BC, Ptype, Etype}}} where {T, N, BC<:SphericalBC, Ptype, Etype}","page":"ReadSave","title":"ParallelTemperingMonteCarlo.ReadSave.checkpoint_config","text":"checkpoint_config(savefile::SaveFile, state::MCState{T, N, BC, Ptype, Etype}) where {T, N, BC <: SphericalBC, Ptype, Etype}\ncheckpoint_config(savefile::SaveFile, state::MCState{T, N, BC, Ptype, Etype}) where {T, N, BC <: CubicBC, Ptype, Etype}\ncheckpoint_config(savefile::SaveFile, state::MCState{T, N, BC, Ptype, Etype}) where {T, N, BC <: RhombicBC, Ptype, Etype}\n\nFunction writes a single config in the standard xyz format. N atoms, the comment line contains the boundary condition information (implemented for Spherical BC and both types of Periodic BC) as well as max_displ information determining the stepsize used at the current step of the monte carlo simulation. The comment row is followed by 1 as a placeholder for the atom type to be implemented in future and the positions x,y,z in order.\n\n\n\n\n\n","category":"method"},{"location":"ReadSave/#ParallelTemperingMonteCarlo.ReadSave.read_checkpoint_config-Tuple{Any}","page":"ReadSave","title":"ParallelTemperingMonteCarlo.ReadSave.read_checkpoint_config","text":"read_checkpoint_config(xyzdata)\n\nFunction designed to take a single xyz-style checkpoint file and return the configuration and max displacement data associated with a saved mc_state. This is used to reconstruct an MC simulation from checkpoints.\n\n\n\n\n\n","category":"method"},{"location":"ReadSave/#ParallelTemperingMonteCarlo.ReadSave.read_config-Tuple{Any}","page":"ReadSave","title":"ParallelTemperingMonteCarlo.ReadSave.read_config","text":"read_config(xyzdata)\n\nDesigned to read in one xyz-style file with one configuration and return this for starting a simulation from files without restarting.\n\n\n\n\n\n","category":"method"},{"location":"ReadSave/#ParallelTemperingMonteCarlo.ReadSave.read_init-Tuple{Bool, Float64}","page":"ReadSave","title":"ParallelTemperingMonteCarlo.ReadSave.read_init","text":"read_init()\n\nFunction to reinitialise the fixed parameters of the MC simulation as saved by the save_init function. \n\n\n\n\n\n","category":"method"},{"location":"ReadSave/#ParallelTemperingMonteCarlo.ReadSave.read_params-Tuple{Any}","page":"ReadSave","title":"ParallelTemperingMonteCarlo.ReadSave.read_params","text":"read_params(paramsvec)\nread_params(paramsvec,restart)\n\nFunction to turn a delimited paramsvec into an MCParams and TempGrid struct. Second method includes a bool restart to determine whether or not to set eq_cycles=0 or 0.2*cycles if not restarting\n\n\n\n\n\n","category":"method"},{"location":"ReadSave/#ParallelTemperingMonteCarlo.ReadSave.readensemble-Tuple{Any}","page":"ReadSave","title":"ParallelTemperingMonteCarlo.ReadSave.readensemble","text":"readensemble(ensemblevec)\n\nFunction to convert delimited file contents ensemblevec and convert them into an ensemble.\n\n\n\n\n\n","category":"method"},{"location":"ReadSave/#ParallelTemperingMonteCarlo.ReadSave.readpotential-Tuple{Any}","page":"ReadSave","title":"ParallelTemperingMonteCarlo.ReadSave.readpotential","text":"readpotential(potinfovec)\n\nFunction to convert delimited file contents potinfovec into a potential. Implemented for:\n\nELJPotentialEven\nELJPotential\nELJPotentialB\nEmbeddedAtomPotential\n\n\n\n\n\n","category":"method"},{"location":"ReadSave/#ParallelTemperingMonteCarlo.ReadSave.rebuild_states-Tuple{Int64, AbstractEnsemble, TempGrid, AbstractPotential}","page":"ReadSave","title":"ParallelTemperingMonteCarlo.ReadSave.rebuild_states","text":"rebuild_states(n_traj::Int, ensemble::AbstractEnsemble, temps::TempGrid, potential::AbstractPotential)\n\nFunction to rebuild the MCStates vector and results struct from checkpoint information. The ensemble temps and potential along with n_traj are reconstructed elsewhere, but required to accurately recreate the states. \n\n\n\n\n\n","category":"method"},{"location":"ReadSave/#ParallelTemperingMonteCarlo.ReadSave.save_configs-Tuple{Vector{T} where T<:MCState}","page":"ReadSave","title":"ParallelTemperingMonteCarlo.ReadSave.save_configs","text":"save_configs(mc_states::MCStateVector)\n\nFunction to save the configuration of each state in a vector of mc_states. Writes each configuration according to checkpoint_config into a file config.i where i indicates the order of the states. \n\n\n\n\n\n","category":"method"},{"location":"ReadSave/#ParallelTemperingMonteCarlo.ReadSave.save_histparams-Tuple{Output}","page":"ReadSave","title":"ParallelTemperingMonteCarlo.ReadSave.save_histparams","text":"save_histparams(results)\n\nInitialises and populates a data file containing the information necessary to interpret histogram data.\n\n\n\n\n\n","category":"method"},{"location":"ReadSave/#ParallelTemperingMonteCarlo.ReadSave.save_init-Tuple{AbstractPotential, AbstractEnsemble, MCParams, TempGrid}","page":"ReadSave","title":"ParallelTemperingMonteCarlo.ReadSave.save_init","text":"save_init(potential,ensemble,params,temp)\n\nFunction to write all static parameters into a single parameters file. If a params file does not exist, it is created in ./checkpoint as params.data. This contains the mc_params ensemble and potential data.\n\n\n\n\n\n","category":"method"},{"location":"ReadSave/#ParallelTemperingMonteCarlo.ReadSave.setresults-NTuple{4, Any}","page":"ReadSave","title":"ParallelTemperingMonteCarlo.ReadSave.setresults","text":"setresults(histparams,histdata,histv_data,r2data)\n\nFunction to re-initialise the results struct on restarting a simulation.\n\n\n\n\n\n","category":"method"},{"location":"ReadSave/#ParallelTemperingMonteCarlo.ReadSave.writeensemble-Tuple{IO, NVT}","page":"ReadSave","title":"ParallelTemperingMonteCarlo.ReadSave.writeensemble","text":"writeensemble(savefile::SaveFile, ensemble::NVT)\nwriteensemble(savefile::SaveFile, ensemble::NPT)\nwriteensemble(savefile::SaveFile, ensemble::NNVT)\n\nFunction to write the ensemble data into a savefile including the move types. First method is for the NVT ensemble which does not include volume changes, second method is NPT ensemble and does inclue volume moves.\n\n\n\n\n\n","category":"method"},{"location":"ReadSave/#ParallelTemperingMonteCarlo.ReadSave.writeparams-Tuple{IO, MCParams, TempGrid}","page":"ReadSave","title":"ParallelTemperingMonteCarlo.ReadSave.writeparams","text":"writeparams(savefile,params,temp)\n\nFunction to write the mc_params and temp data into a savefile. These are static parameters that define how the simulation is to proceed such as the number of cycles, trajectories and the temperatures to be covered.\n\n\n\n\n\n","category":"method"},{"location":"ReadSave/#ParallelTemperingMonteCarlo.ReadSave.writepotential-Union{Tuple{Ptype}, Tuple{IO, Ptype}} where Ptype<:AbstractDimerPotential","page":"ReadSave","title":"ParallelTemperingMonteCarlo.ReadSave.writepotential","text":"writepotential(savefile::SaveFile, potential::Ptype) where Ptype <: AbstractDimerPotential\nwritepotential(savefile::SaveFile, potential::Ptype) where Ptype <: AbstractDimerPotentialB\nwritepotential(savefile::SaveFile, potential::Ptype) where Ptype <: EmbeddedAtomPotential\nwritepotential(savefile::SaveFile, potential::Ptype) where Ptype <: AbstractMachineLearningPotential\n\nFunction to write potential surface information into savefile. implemented methods are the Embedded Atom Model, Extended Lennard-Jones and ELJ in Magnetic Field. This does not work for machine learning potentials.\n\n\n\n\n\n","category":"method"},{"location":"DeltaMatrix/#DeltaMatrix","page":"DeltaMatrix","title":"DeltaMatrix","text":"","category":"section"},{"location":"DeltaMatrix/","page":"DeltaMatrix","title":"DeltaMatrix","text":"Modules = [ParallelTemperingMonteCarlo.MachineLearningPotential.DeltaMatrix]","category":"page"},{"location":"DeltaMatrix/#ParallelTemperingMonteCarlo.MachineLearningPotential.DeltaMatrix","page":"DeltaMatrix","title":"ParallelTemperingMonteCarlo.MachineLearningPotential.DeltaMatrix","text":"module DeltaMatrix\n\nA module designed to update an existing matrix of symmetry function values based on a small perturbation in the positions. \n\n\n\n\n\n","category":"module"},{"location":"DeltaMatrix/#ParallelTemperingMonteCarlo.MachineLearningPotential.DeltaMatrix.adjust_angular_symm_val!-NTuple{6, Any}","page":"DeltaMatrix","title":"ParallelTemperingMonteCarlo.MachineLearningPotential.DeltaMatrix.adjust_angular_symm_val!","text":"adjust_angular_symm_val!(g_value,θ_new,θ_old,exp_new,exp_old,tpz)\nadjust_angular_symm_val!(g_value,exp_old,exp_new,θ_old,θ_new,λ,ζ,tpz)\n\nFunctions for adjusting angular symmetry function value from g_value by calculating the exponential component exp_old,exp_new, theta components θ_val_old,θ_val_new from the angles θ_old,θ_new and the normalisaiton factor tpz These are used to subtract the old g value and add the new one. \n\n\n\n\n\n","category":"method"},{"location":"DeltaMatrix/#ParallelTemperingMonteCarlo.MachineLearningPotential.DeltaMatrix.adjust_radial_symm_val!-NTuple{8, Any}","page":"DeltaMatrix","title":"ParallelTemperingMonteCarlo.MachineLearningPotential.DeltaMatrix.adjust_radial_symm_val!","text":"adjust_radial_symm_val!(g_value1,g_value2,rnew_ij,r2_ij,fnew_ij,f2_ij,η,g_norm)\n\nTaking the i and j symmetry function values g_value1,g_value2 we use the hyperparameters η,g_norm as well as the old and new distances and cutoff functions rnew_ij,fnew_ij r2_ij,f2_ij adds the new symmetry value and subtracts the old one based on g_{ij}\n\n\n\n\n\n","category":"method"},{"location":"DeltaMatrix/#ParallelTemperingMonteCarlo.MachineLearningPotential.DeltaMatrix.adjust_symm_val!-NTuple{5, Any}","page":"DeltaMatrix","title":"ParallelTemperingMonteCarlo.MachineLearningPotential.DeltaMatrix.adjust_symm_val!","text":"adjust_symm_val!(g_value,r_sum,f_prod,η,g_norm)\n\nDesigned to update the radial symmetry function value g_value. Accepts the hyperparameter η as well as r_sum, f_prod and g_norm and adds the individual contribution of g_{ij}. \n\n\n\n\n\n","category":"method"},{"location":"DeltaMatrix/#ParallelTemperingMonteCarlo.MachineLearningPotential.DeltaMatrix.angular_symmetry_calculation!-Tuple{Any, Any, Any, Any, Any, Any, Any, Any, AngularType3}","page":"DeltaMatrix","title":"ParallelTemperingMonteCarlo.MachineLearningPotential.DeltaMatrix.angular_symmetry_calculation!","text":"angular_symmetry_calculation!(g_vector, atomindex, newposition, position, dist2_mat, new_dis_vector, f_matrix, new_f_vector, symmetry_function::AngularType3)\n\nThis method is designed to do the same as the radial symmetry function for the angular symmetry function using the same inputs. Double loop over all j,k and use calc_new_symmetry_value! over g_vector.\n\n\n\n\n\n","category":"method"},{"location":"DeltaMatrix/#ParallelTemperingMonteCarlo.MachineLearningPotential.DeltaMatrix.calc_delta_matrix-NTuple{14, Any}","page":"DeltaMatrix","title":"ParallelTemperingMonteCarlo.MachineLearningPotential.DeltaMatrix.calc_delta_matrix","text":"calc_delta_matrix(g_mat,positions,newposition,atomindex,dist2_mat,new_dist2_vector,f_mat,new_f_vector,radsymmfunctions,angsymmfunctions,nrad,nang,n1,n2)\n\nHaving moved a single atom indexed by atomindex, we calcualte the changes to the total symmetry matrix gmat using the calcdeltasymmval functions\n\n\n\n\n\n","category":"method"},{"location":"DeltaMatrix/#ParallelTemperingMonteCarlo.MachineLearningPotential.DeltaMatrix.calc_delta_symm_val!-NTuple{10, Any}","page":"DeltaMatrix","title":"ParallelTemperingMonteCarlo.MachineLearningPotential.DeltaMatrix.calc_delta_symm_val!","text":"calc_delta_symm_val!(g_vector,atomindex,dist2_mat,new_dist2_vector,f_matrix,new_f_vector,n1,n2,η,g_norm)\ncalc_delta_symm_val!(g_vector,positions,newposition,atomindex,dist2_mat,new_dist2_vector,f_matrix,new_f_vector,n1,n2,η,λ,ζ,tpz)\n\nGeneric function to calculate the total update to the vector of symmetry values having moved a single atom defined by atomindex. The first method calculates the changes to a vector of radial symmetry values, the second calculates the changes to a vector of angular symmetry values. \n\n\n\n\n\n","category":"method"},{"location":"DeltaMatrix/#ParallelTemperingMonteCarlo.MachineLearningPotential.DeltaMatrix.calc_new_symmetry_value!-NTuple{22, Any}","page":"DeltaMatrix","title":"ParallelTemperingMonteCarlo.MachineLearningPotential.DeltaMatrix.calc_new_symmetry_value!","text":"calc_new_symmetry_value!(g_vector,indices,newposition,position1,position2,position3,rnew_ij,rnew_ik,r2_ij,r2_ik,r2_jk,fnew_ij,fnew_ik,f_ij,f_ik,f_jk,η,λ,ζ,tpz)\ncalc_new_symmetry_value!(g_vector,indexi,indexj,indexk,newposition,position,dist2_mat,new_dist2_vector,f_matrix,new_f_vector,η,λ,ζ,tpz)\n\nCurrying functions from higher-level data structures such as the radial distances in dist2_mat,new_dist2_vector and cutoff functions f_matrix,new_f_vector as well as positions in newposition,position and passes these to lower level functions along with hyperparameters η,λ,ζ,tpz to adjust the values in g_vector at positions indexi,indexj,indexk calculates the required exponential component and angles to pass down to adjust_angular_symm_val!\n\n\n\n\n\n","category":"method"},{"location":"DeltaMatrix/#ParallelTemperingMonteCarlo.MachineLearningPotential.DeltaMatrix.calc_new_symmetry_value!-NTuple{9, Any}","page":"DeltaMatrix","title":"ParallelTemperingMonteCarlo.MachineLearningPotential.DeltaMatrix.calc_new_symmetry_value!","text":"calc_new_symmetry_value!(g_vector,indexi,indexj,dist2_mat,new_dist2_vector,f_matrix,new_f_vector,η,g_norm)\n\nCall for the radial symmetry value designed to curry the input from g_vector at positions indexi,indexj to the adjust_radial_symm_val! function. It unpacks the radial distances from dist2_mat,new_dist2_vector and the cutoff functions from f_matrix,new_f_vec as well as the hyperparameters η,g_norm and gives these values to the lower level functions. \n\n\n\n\n\n","category":"method"},{"location":"DeltaMatrix/#ParallelTemperingMonteCarlo.MachineLearningPotential.DeltaMatrix.calc_swap_matrix-NTuple{12, Any}","page":"DeltaMatrix","title":"ParallelTemperingMonteCarlo.MachineLearningPotential.DeltaMatrix.calc_swap_matrix","text":"calc_swap_matrix(g_mat,positions,atomindex1,atomindex2,dist2_mat,f_mat,radsymmfunctions,angsymmfunctions,nrad,nang,n1,n2)\n\nhaving swapped atom at atomindex1 and atomindex2 in a system with n1 atoms of type 1 and n2 atoms of type 2, with nrad radial and nang angular symmetry functions, we calculate the changes to g_mat based on the swap. \n\n\n\n\n\n","category":"method"},{"location":"DeltaMatrix/#ParallelTemperingMonteCarlo.MachineLearningPotential.DeltaMatrix.calc_swap_symm_val-NTuple{9, Any}","page":"DeltaMatrix","title":"ParallelTemperingMonteCarlo.MachineLearningPotential.DeltaMatrix.calc_swap_symm_val","text":"calc_swap_symm_val(g_vector,atomindex1,atomindex2,dist2_mat,f_mat,n1,n2,η,g_norm)\ncalc_swap_symm_val(g_vector,positions,atomindex1,atomindex2,dist2_mat,f_mat,n1,n2,η,λ,ζ,tpz)\n\nfunction to calculate the changes to a symmetry vector gvector assuming we have swapped the positions of atomindex1 and atomindex2. The first method is defined for a radial symmetry function with parameters η and gnorm. Works for a system with n1 atoms of type 1 and n2 atoms of type 2.\n\n\n\n\n\n","category":"method"},{"location":"DeltaMatrix/#ParallelTemperingMonteCarlo.MachineLearningPotential.DeltaMatrix.new_angular_symm_vals-NTuple{17, Any}","page":"DeltaMatrix","title":"ParallelTemperingMonteCarlo.MachineLearningPotential.DeltaMatrix.new_angular_symm_vals","text":"new_angular_symm_vals(newposition,position1,position2,position3,rnew_ij,rnew_ik,r2_ij,r2_ik,r2_jk,fnew_ij,fnew_ik,f_ij,f_ik,f_jk,η,λ,ζ)\n\nFunction to calculate the updated value of an angular symmetry function: Using the old and new interatomic distances and positions along with cutoff values and parameters, we calculate the old and new symmetry value and return a static vector of the three new angular symmetry value, one for each atom i,j,k being the centre of the calculation.\n\n\n\n\n\n","category":"method"},{"location":"DeltaMatrix/#ParallelTemperingMonteCarlo.MachineLearningPotential.DeltaMatrix.new_radial_symm_val!-NTuple{5, Any}","page":"DeltaMatrix","title":"ParallelTemperingMonteCarlo.MachineLearningPotential.DeltaMatrix.new_radial_symm_val!","text":"new_radial_symm_val!(rnew_ij,r2_ij,fnew_ij,f2_ij,η)\n\nFunction to calculate the updated value of a radial symmetry function: That is, how much does the radial symmetry value calculated using the old distance r2ij change when using the new distance rnewij using the old and new cutoff values f2ij,fnewij and the parameter η. \n\n\n\n\n\n","category":"method"},{"location":"DeltaMatrix/#ParallelTemperingMonteCarlo.MachineLearningPotential.DeltaMatrix.radial_symmetry_calculation!-Tuple{Any, Any, Any, Any, Any, Any, RadialType2}","page":"DeltaMatrix","title":"ParallelTemperingMonteCarlo.MachineLearningPotential.DeltaMatrix.radial_symmetry_calculation!","text":"radial_symmetry_calculation!(g_vector, atomindex, dist2_mat, new_dist2_vector, f_matrix, new_f_vector, symmetry_function::RadialType2)\nsymmetry_calculation!(g_vector,atomindex,newposition,position,dist2_mat,new_dis_vector,f_matrix,new_f_vector,symmetry_function::AngularType3)\n\nThis method is designed for radial symmetry functions. Given an atom at atomindex along with high level data structures: dist2_mat,new_dist2_vector,f_matrix,new_f_vector containing the new and old positions, distances and cutoff functions. We iterate over all other atoms and pass their index to lower level currying functions.  The positions newposition,position are included for consistency with the higher-level function.\n\n\n\n\n\n","category":"method"},{"location":"DeltaMatrix/#ParallelTemperingMonteCarlo.MachineLearningPotential.DeltaMatrix.total_symm!-NTuple{12, Any}","page":"DeltaMatrix","title":"ParallelTemperingMonteCarlo.MachineLearningPotential.DeltaMatrix.total_symm!","text":"total_symm!(g_matrix,position,new_position,dist2_matrix,new_dist_vector,f_matrix,new_f_vector,atomindex,total_symmetry_vector)\n\nTop level function to calculate the total change to the matrix of symmetry function values g_matrix. Given position,dist2_matrix,f_matrix containing the original state of the system, and new_position,new_dist_vector,new_f_vector the change to this state based on the motion of atomindex, we iterate over the total_symmetry_vector using the defined radial_symmetry_calculation! and angular_symmetry_calculation! functions. \n\n\n\n\n\n","category":"method"},{"location":"MCRun/#MCRun","page":"MCRun","title":"MCRun","text":"","category":"section"},{"location":"MCRun/","page":"MCRun","title":"MCRun","text":"Modules = [ParallelTemperingMonteCarlo.MCRun]","category":"page"},{"location":"MCRun/#ParallelTemperingMonteCarlo.MCRun.acc_test!-Tuple{MCState, AbstractEnsemble, String}","page":"MCRun","title":"ParallelTemperingMonteCarlo.MCRun.acc_test!","text":"acc_test!(mc_state::MCState,ensemble::Etype,movetype::String) where Etype <: AbstractEnsemble\n\nacc_test! function now significantly contracted as a method of calculating the metropolis condition, comparing it to a random variable and if the condition is met using the swap_config! function to exchange the current mc_state with the internally defined new variables. ensemble and movetype dictate the exact calculation of the metropolis condition, and the internal potential_variables within the mcstates dictate how [`swapconfig!`](@ref) operates. \n\n\n\n\n\n","category":"method"},{"location":"MCRun/#ParallelTemperingMonteCarlo.MCRun.check_e_bounds-Tuple{Number, AbstractVector{Z} where Z<:Number}","page":"MCRun","title":"ParallelTemperingMonteCarlo.MCRun.check_e_bounds","text":"check_e_bounds(energy::Number, ebounds::VorS)\n\nFunction to determine if an energy value is greater than or less than the min/max, used in equilibration cycle.\n\n\n\n\n\n","category":"method"},{"location":"MCRun/#ParallelTemperingMonteCarlo.MCRun.equilibration-Union{Tuple{E}, Tuple{N}, Tuple{Vector{T} where T<:MCState, MoveStrategy{N, E}, MCParams, AbstractPotential, AbstractEnsemble, Int64, Output, Bool}} where {N, E}","page":"MCRun","title":"ParallelTemperingMonteCarlo.MCRun.equilibration","text":"equilibration(mc_states::MCStateVector, move_strat::MoveStrategy{N, E}, mc_params::MCParams, pot::Ptype, ensemble::Etype, n_steps::Int, results::Output, restart::Bool) where {N, E}\n\nWhile initialisation sets mc_states, params etc. we require something to thermalise our simulation and set the histograms. This function is mostly a wrapper for the equilibration_cycle! function that optionally removes the thermalisation from restart.\n\nN.B. Restart is currently non-functional, do not try use it\n\n\n\n\n\n","category":"method"},{"location":"MCRun/#ParallelTemperingMonteCarlo.MCRun.equilibration_cycle!-Union{Tuple{E}, Tuple{N}, Tuple{Vector{T} where T<:MCState, MoveStrategy{N, E}, MCParams, AbstractPotential, AbstractEnsemble, Int64, Output}} where {N, E}","page":"MCRun","title":"ParallelTemperingMonteCarlo.MCRun.equilibration_cycle!","text":"equilibration_cycle!(mc_states::MCStateVector, move_strat::MoveStrategy{N, E}, mc_params::MCParams, pot::Ptype, ensemble::Etype, n_steps::Int, results::Output) where {N, E}\n\nFunction to thermalise a set of mc_states ensuring that the number of equilibration cycles defined in mc_params are completed without updating the results before initialising the results struct according to the maximum and minimum energy determined throughout the equilibration cycle. \n\n\n\n\n\n","category":"method"},{"location":"MCRun/#ParallelTemperingMonteCarlo.MCRun.get_energy!-Union{Tuple{E}, Tuple{P}, Tuple{BC}, Tuple{N}, Tuple{T}, Tuple{MCState{T, N, BC, P, E}, AbstractPotential, String}} where {T, N, BC, P<:AbstractPotentialVariables, E<:NVTVariables}","page":"MCRun","title":"ParallelTemperingMonteCarlo.MCRun.get_energy!","text":"get_energy!(mc_state::MCState{T,N,BC,P,E},pot::PType,movetype::String) where PType <: AbstractPotential where {T,N,BC,P<:PotentialVariables,E<:NVTVariables}\nget_energy!(mc_state::MCState{T,N,BC,P,E},pot::PType,movetype::String) where PType <: AbstractPotential where {T,N,BC,P<:PotentialVariables,E<:NPTVariables}\nget_energy!(mc_state::MCState{T,N,BC,P,E},pot::PType,movetype::String) where PType <: AbstractPotential where {T,N,BC,P<:AbstractPotentialVariables,E<:NNVTVariables}\n\nCurry function designed to separate energy calculations into their respective ensembles and move types. Currently implemented for: \n\n    - NVT ensemble without r_cut\n    - NPT ensemble with r_cut\n    - NNVT ensemble for multiple-species atoms\n\n\n\n\n\n","category":"method"},{"location":"MCRun/#ParallelTemperingMonteCarlo.MCRun.mc_cycle!-Union{Tuple{E}, Tuple{N}, Tuple{Vector{T} where T<:MCState, MoveStrategy{N, E}, MCParams, AbstractPotential, AbstractEnsemble, Int64, Int64}} where {N, E}","page":"MCRun","title":"ParallelTemperingMonteCarlo.MCRun.mc_cycle!","text":"mc_cycle!(mc_states::MCStateVector, move_strat::MoveStrategy{N, E}, mc_params::MCParams, pot::Ptype, ensemble::Etype, n_steps::Int, index::Int) where {N, E}\nmc_cycle!(mc_states::MCStateVector, move_strat::MoveStrategy{N, E}, mc_params::MCParams, pot::Ptype, ensemble::Etype, n_steps::Int, results::Output, idx::Int, rdfsave::Bool) where {N, E}\n\nBasic function utilised by the simulation. For each of the n_steps run a single mc_step! on the mc_states according to pot, move_strat and ensemble, then complete the parallel_tempering_exchange! and update_step_size!.\n\nSecond method includes the sampling_step! which updates the results struct. The first method is used by the equilibration_cycle! and therefore does not update the results struct. \n\n\n\n\n\n","category":"method"},{"location":"MCRun/#ParallelTemperingMonteCarlo.MCRun.mc_move!-Union{Tuple{E}, Tuple{N}, Tuple{MCState, MoveStrategy{N, E}, AbstractPotential, AbstractEnsemble}} where {N, E}","page":"MCRun","title":"ParallelTemperingMonteCarlo.MCRun.mc_move!","text":"mc_move!(mc_state::MCState,move_strat::MoveStrategy{N,E},pot::Ptype,ensemble::Etype) where Ptype <: AbstractPotential where Etype <: AbstractEnsemble where {N,E}\n\nBasic move for one mc_state according to a move_strat dictating the types of moves allowed within the ensemble when moving across a pot defining the PES.\n\nCalculates an index for the move\nGenerates either a volume or atom move depending on movestrat[index]\nCalculates energy based on the pot and new move \nTests acc and swaps if relevant \n\n\n\n\n\n","category":"method"},{"location":"MCRun/#ParallelTemperingMonteCarlo.MCRun.mc_step!-Union{Tuple{E}, Tuple{N}, Tuple{Vector{T} where T<:MCState, MoveStrategy{N, E}, AbstractPotential, AbstractEnsemble, Int64}} where {N, E}","page":"MCRun","title":"ParallelTemperingMonteCarlo.MCRun.mc_step!","text":"mc_step!(mc_states::MCStateVector, move_strat::MoveStrategy{N, E}, pot::Ptype, ensemble::Etype, n_steps::Int) where {N, E}\n\nDistributes each state in mc_state to the mc_move! function in accordance with a move_strat, ensemble and pot.\n\n\n\n\n\n","category":"method"},{"location":"MCRun/#ParallelTemperingMonteCarlo.MCRun.ptmc_run!-Tuple{MCParams, TempGrid, Config, AbstractPotential, AbstractEnsemble}","page":"MCRun","title":"ParallelTemperingMonteCarlo.MCRun.ptmc_run!","text":"(ptmc_run!(mc_params::MCParams, temp::TempGrid, start_config::Config, potential::Ptype, ensemble::Etype; rdfsave = false, restart = false, save = false, workingdirectory = pwd()) where Ptype <: AbstractPotential) where Etype <: AbstractEnsemble\nptmc_run!(restart::Bool; rdfsave = false, save = 1000, eq_cycles = 0.2)\n\nMain call for the ptmc program. Given mc_params dictating the number of cycles etc. the temps containing the temperature and beta values we aim to simulate, an initial start_config and the potential and ensemble we run a complete simulation, explicitly outputting the mc_states and results structs. \n\nSecond method:\n\nThe second method relies on a series of checkpoint files -see Checkpoint module ReadSave- to autoinitialise an MC cycle. Still accepts restart as an argument to indicate whether this is a clean start with configs or a restart from a checkpoint at a given index. \n\nkwargs currently implemented are:\nrdfsave::Bool : tells the simulation whether or not to generate and save radial distribution functions (a resource intensive step) – set to false\nrestart::Bool : tells the simulation whether or not we are beginning from a partially complete simulation - set false for method one. \nacc::Vector : sets the min and max acceptance rates used to adjust stepsize for the simulation - set [0.4 0.6] for a target of 40-60% acceptance \nsave::Bool or Int : tells the simulation whether to write checkpoints - set false for no save or integer expressing save frequency\n\n\n\n\n\n","category":"method"},{"location":"MCRun/#ParallelTemperingMonteCarlo.MCRun.reset_counters-Tuple{MCState}","page":"MCRun","title":"ParallelTemperingMonteCarlo.MCRun.reset_counters","text":"reset_counters(state::MCState)\n\nAfter equilibration this resets the count stats to zero\n\n\n\n\n\n","category":"method"},{"location":"MCRun/#ParallelTemperingMonteCarlo.MCRun.swap_atom_config!-Union{Tuple{E}, Tuple{P}, Tuple{BC}, Tuple{N}, Tuple{T}, Tuple{MCState{T, N, BC, P, E}, Int64, Union{Vector{T}, StaticArraysCore.SVector{3, T}} where T<:Number}} where {T, N, BC, P<:AbstractPotentialVariables, E<:AbstractEnsembleVariables}","page":"MCRun","title":"ParallelTemperingMonteCarlo.MCRun.swap_atom_config!","text":"swap_atom_config!(mc_state::MCState{T, N, BC, P, E}, i_atom::Int, trial_pos::PositionVector) where {T, N, BC, P <: AbstractPotentialVariables, E <: AbstractEnsembleVariables}\n\n\n\n\n\n","category":"method"},{"location":"MCRun/#ParallelTemperingMonteCarlo.MCRun.swap_config!-Union{Tuple{E}, Tuple{P}, Tuple{BC}, Tuple{N}, Tuple{T}, Tuple{MCState{T, N, BC, P, E}, String}} where {T, N, BC, P<:AbstractPotentialVariables, E<:AbstractEnsembleVariables}","page":"MCRun","title":"ParallelTemperingMonteCarlo.MCRun.swap_config!","text":"swap_config!(mc_state::MCState{T, N, BC, P, E}, movetype::String) where {T, N, BC, P <: AbstractPotentialVariables, E <: AbstractEnsembleVariables}\n\nFunction for replacing the MC state and potential variables values with the updated values when metropolis condition is met.  Implemented for the following move_type:\n\natommove \nvolumemove\nswapmove for atom swaps\n\nAll methods also call the swap_vars! function which distributes the appropriate mc_states.potential_variables values into the current mc_state struct.\n\n\n\n\n\n","category":"method"},{"location":"MCRun/#ParallelTemperingMonteCarlo.MCRun.swap_config_v!-Union{Tuple{N}, Tuple{MCState, CubicBC, Config, Matrix{N}, AbstractVector{Z} where Z<:Number, Number}} where N<:Number","page":"MCRun","title":"ParallelTemperingMonteCarlo.MCRun.swap_config_v!","text":"swap_config_v!(mc_state::MCState, bc::CubicBC, trial_config::Config, new_dist2_mat::Matrix{N}, en_vec_new::VorS, new_en_tot::Number) where N <: Number\nswap_config_v!(mc_state::MCState, bc::RhombicBC, trial_config::Config, new_dist2_mat::Matrix{N}, en_vec_new::VorS, new_en_tot::Number) where N <: Number\n\nSwaps mc_states and ensemble variables in case of accepted volume move for NPT ensemble. Implemented for CubicBC and RhombicBC\n\n\n\n\n\n","category":"method"},{"location":"MCRun/#ParallelTemperingMonteCarlo.MCRun.swap_move_config!-Tuple{MCState, AbstractVector{Z} where Z<:Number}","page":"MCRun","title":"ParallelTemperingMonteCarlo.MCRun.swap_move_config!","text":"swap_move_config!(mc_state::MCState,indices::VorS)\n\nFunction designed to exchange relevant variables when swapping an atom. Accepts the mc_state and the atom indices and exchanges atom indices[1] with atom indices[2]\n\n\n\n\n\n","category":"method"},{"location":"MCRun/#ParallelTemperingMonteCarlo.MCRun.swap_vars!-Union{Tuple{V}, Tuple{Int64, V}} where V<:DimerPotentialVariables","page":"MCRun","title":"ParallelTemperingMonteCarlo.MCRun.swap_vars!","text":"swap_vars!(i_atom::Int, potential_variables::V) where V <: DimerPotentialVariables\nswap_vars!(i_atom::Int, potential_variables::ELJPotentialBVariables)\nswap_vars!(i_atom::Int, potential_variables::EmbeddedAtomVariables)\nswap_vars!(i_atom::Int, potential_variables::NNPVariables)\nswap_vars!(i_atom::Int, potential_variables::NNPVariables2a)\n\nCalled by swap_atom_config! function;  takes the appropriate potential_variables that are specific to the potential energy surface under consideration  and replaces the current values with the new values such as:\n\nUnder magnetic fields, the new tan matrix replaces the old\nIn the EAM, we replace the rho and phi vectors with the new updated versions\nUsing an NNP we require the new G matrix and F matrix to replace the old versions. \n\nImplemented for potential variables:\n\nDimerPotentialVariables\nELJPotentialBVariables\nEmbeddedAtomVariables\nNNPVariables\n\n\n\n\n\n","category":"method"},{"location":"InputParams/#InputParams","page":"InputParams","title":"InputParams","text":"","category":"section"},{"location":"InputParams/","page":"InputParams","title":"InputParams","text":"Modules = [ParallelTemperingMonteCarlo.InputParams]","category":"page"},{"location":"InputParams/#ParallelTemperingMonteCarlo.InputParams","page":"InputParams","title":"ParallelTemperingMonteCarlo.InputParams","text":"module InputParams\n\nThis module provides structs and methods to arrange input parameters.\n\n\n\n\n\n","category":"module"},{"location":"InputParams/#ParallelTemperingMonteCarlo.InputParams.MCParams","page":"InputParams","title":"ParallelTemperingMonteCarlo.InputParams.MCParams","text":"MCParams(cycles::Int, n_traj::Int, n_atoms::Int; eq_percentage = 0.2, mc_sample = 1, n_adjust = 100, n_bin = 100)\n\nType that collects MC specific data; field names: \n\nmc_cycle::Int: number of MC cycles\neq_cycles::Int: number of equilibration cycles (default 20% of mc_cycle)\nmc_sample::Int: gives number of MC cycles after which energy is saved (default: 1)\nn_traj::Int: number of trajectories (ie. temperatures) propagated in parallel\nn_atoms::Int: number N of atoms in configuration\nn_adjust::Int: number of moves after which step size of atom/volume moves is adjusted (default: 100)\nn_bin::Int: number of histogram bins (default: 100)\n\n\n\n\n\n","category":"type"},{"location":"InputParams/#ParallelTemperingMonteCarlo.InputParams.Output","page":"InputParams","title":"ParallelTemperingMonteCarlo.InputParams.Output","text":"Output{T}(n_bin; en_min = 0) where T <: Number\n\nCollects output of MC calculation; field names:\n\nn_bin::Int: number of energy bins for histograms\nen_min::T: minimum energy found during calculation\nen_max::T: maximum energy found during calculation\nv_min::T: minimum volume\nv_max::T: maximum volume\ndelta_en_hist::T: the step size associated with the energy histogram \ndelta_v_hist::T: step size associated with volume histogram\ndelta_r2::T: step size associated with the rdf histogram\nmax_displ::Vector{T}: final maximum displacements\nen_avg::Vector{T}: inner energy U(T) (as average over sampled energies)\nheat_cap::Vector{T}: heat capacities C(T) \nrdf::Vector{Vector{T}}: radial distribution information\ncount_stat_*::Vector{T}: statistics of accepted atom, volume and rotation moves and attempted and successful parallel-tempering exchanges\n\n\n\n\n\n","category":"type"},{"location":"InputParams/#ParallelTemperingMonteCarlo.InputParams.TempGrid","page":"InputParams","title":"ParallelTemperingMonteCarlo.InputParams.TempGrid","text":"TempGrid{N}(ti::Number, tf::Number; tdistr) \nTempGrid(ti::Number, tf::Number, N::Int; tdistr=:geometric)\n\nGenerates grid of N temperatures and inverse temperatures for MC calculation between initial and final temperatures ti and tf.\n\nField names:\nt_grid::SVector{N,T}: temperatures (in K)\nbeta_grid::SVector{N,T}: inverse temperatures (in atomic units)\nKeyword argument tdistr:\n:geometric (default): generates geometric temperature distribution\n:equally_spaced: generates equally spaced temperature grid (not implemented presently)\n\n\n\n\n\n","category":"type"},{"location":"MCSampling/#MCSampling","page":"MCSampling","title":"MCSampling","text":"","category":"section"},{"location":"MCSampling/","page":"MCSampling","title":"MCSampling","text":"Modules = [ParallelTemperingMonteCarlo.MCSampling]","category":"page"},{"location":"MCSampling/#ParallelTemperingMonteCarlo.MCSampling.finalise_results-Tuple{Vector{T} where T<:MCState, MCParams, Output}","page":"MCSampling","title":"ParallelTemperingMonteCarlo.MCSampling.finalise_results","text":"finalise_results(mc_states::MCStateVector, mc_params::MCParams, results::Output)\n\nFunction designed to take a complete MC simulation and calculate the averages. \n\n\n\n\n\n","category":"method"},{"location":"MCSampling/#ParallelTemperingMonteCarlo.MCSampling.find_hist_index-Tuple{Number, Int64}","page":"MCSampling","title":"ParallelTemperingMonteCarlo.MCSampling.find_hist_index","text":"find_hist_index(hist_index::Number, n_bin::Int)\nfind_hist_index(mc_state::MCState, results::Output, delta_en_hist::Number)\nfind_hist_index(mc_state::MCState, results::Output, delta_en_hist::Number, delta_v_hist::Number)\n\nReturns the histogram index of a single mc_state energy and returns this value. \n\n\n\n\n\n","category":"method"},{"location":"MCSampling/#ParallelTemperingMonteCarlo.MCSampling.initialise_histograms!-Union{Tuple{N}, Tuple{MCParams, Output, AbstractVector{N}, SphericalBC}} where N<:Number","page":"MCSampling","title":"ParallelTemperingMonteCarlo.MCSampling.initialise_histograms!","text":"initialise_histograms!(mc_params::MCParams, results::Output, e_bounds::AbstractArray{N, 1}, bc::SphericalBC) where N <: Number\ninitialise_histograms!(mc_params::MCParams, results::Output, e_bounds::AbstractArray{N, 1}, bc::CubicBC; debug = false) where N <: Number\ninitialise_histograms!(mc_params::MCParams, results::Output, e_bounds::AbstractArray{N, 1}, bc::RhombicBC) where N <: Number\n\nFunction to create the energy and radial histograms at the end of equilibration. The min/max energy values are extracted from e_bounds and (with 2% either side additionally) used to determine the energy grating for the histogram (delta_en_hist). For spherical boundary conditions the radius squared is used to define a diameter squared since the greatest possible atomic distance is 2*r2 and distance**2 is used throughout the simulation. Histogram contains overflow bins, rdf has 5 times the number of bins as en_histogram.\n\nReturns delta_en_hist, delta_r2\n\n\n\n\n\n","category":"method"},{"location":"MCSampling/#ParallelTemperingMonteCarlo.MCSampling.sampling_step!-Tuple{MCParams, Vector{T} where T<:MCState, AbstractEnsemble, Int64, Output, Bool}","page":"MCSampling","title":"ParallelTemperingMonteCarlo.MCSampling.sampling_step!","text":"sampling_step!(mc_params::MCParams, mc_states::MCStateVector, ensemble::AbstractEnsemble, save_index::Int, results::Output, rdfsave::Bool)\nsampling_step!(mc_params::MCParams, mc_states::MCStateVector, ensemble::NPT, save_index::Int, results::Output, rdfsave::Bool)\n\nFunction performed at the end of an mc_cycle! after equilibration. Updates the E,E**2 totals for each mc_state, updates the energy and radial histograms and then returns the modified mc_states and results.\n\nN.B. we have now included the delta_en, delta_v and delta_r2 values in the results struct to allow for more general methods such as this.  \n\nSecond method does not perform the rdf calculation. This is designed to improve the speed of sampling where the rdf is not required.\n\nTO IMPLEMENT: This function benchmarked at 7.84μs, the update RDF step takes 7.545μs of this. Removing the rdf information should become a toggle-able option in case faster results with less information are wanted. \n\n\n\n\n\n","category":"method"},{"location":"MCSampling/#ParallelTemperingMonteCarlo.MCSampling.update_energy_tot-Union{Tuple{Etype}, Tuple{Vector{T} where T<:MCState, Etype}} where Etype<:AbstractEnsemble","page":"MCSampling","title":"ParallelTemperingMonteCarlo.MCSampling.update_energy_tot","text":"update_energy_tot(mc_states::MCStateVector, ensemble::Etype) where Etype <: AbstractEnsemble\nupdate_energy_tot(mc_states::MCStateVector, ensemble::NPT)\n\nFunction to update the current energy and energy squared values for coarse analysis of averages at the end. These are weighted according to the ensemble, and as such a method for each ensemble is required.  Two methods avoids needless for-loops, where the JIT can save us computation time.\n\n\n\n\n\n","category":"method"},{"location":"MCSampling/#ParallelTemperingMonteCarlo.MCSampling.update_histograms!-Tuple{Vector{T} where T<:MCState, Output, Number}","page":"MCSampling","title":"ParallelTemperingMonteCarlo.MCSampling.update_histograms!","text":"update_histograms!(mc_states::MCStateVector, results::Output, delta_en_hist::Number)\nupdate_histograms!(mc_states::MCStateVector, results::Output, delta_en_hist::Number, delta_v_hist::Number)\n\nSelf explanatory name, updates the energy histograms in results using the current mc_states.en_tot\n\n\n\n\n\n","category":"method"},{"location":"MCSampling/#ParallelTemperingMonteCarlo.MCSampling.update_rdf!-Tuple{Vector{T} where T<:MCState, Output, Number}","page":"MCSampling","title":"ParallelTemperingMonteCarlo.MCSampling.update_rdf!","text":"update_rdf!(mc_states::MCStateVector, results::Output, delta_r2::Number)\n\nSelf explanatory name, iterates over mc_states and adds to the appropriate results.rdf histogram. Type stable by the initialise function specifying a vector of integers.  \n\n\n\n\n\n","category":"method"},{"location":"#ParallelTemperingMonteCarlo","page":"Home","title":"ParallelTemperingMonteCarlo","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"","category":"page"}]
}
